:js

:import NofibPrelude.mls
//│ Imported 112 member(s)


fun expand(a, b, c, d, e, f) = f + (e*10) + (d*100) + (c*1000) + (b*10000) + (a*100000)

fun condition(thirywelvn) = if thirywelvn is
  t :: h :: i :: r :: y :: w :: e :: l :: v :: n :: Nil then
    (expand(t, h, i, r, t, y) + 5 * expand(t, w, e, l, v, e)) == expand(n, i, n, e, t, y)

fun addj(j, ls) = if ls is
  Nil then (j :: Nil) :: Nil
  k :: ks then
    fun lscomp(p1) = if p1 is
      Nil then Nil
      h1 :: t1 then (k :: h1) :: lscomp(t1)
    
    (j :: (k :: ks)) :: lscomp(addj(j, ks))

fun permutations(ls) = if ls is
  Nil then Nil :: Nil
  j :: js then
    fun lscomp1(p1) = if p1 is
      Nil then Nil
      pjs :: t1 then
        fun lscomp2(p2) = if p2 is
          Nil then lscomp1(t1)
          r :: t2 then r :: lscomp2(t2)
        lscomp2(addj(j, pjs))
    
    lscomp1(permutations(js))

fun testCryptarithm_nofib(n) = 
  map((i => let p0 = take(10, enumFromTo(0, 9 + i)) in filter(condition, permutations(p0))), enumFromTo(1, n))


:re
print(testCryptarithm_nofib(1))
//│ ═══[RUNTIME ERROR] RangeError: Maximum call stack size exceeded
