:js
:import NofibPrelude.mls
//│ Imported 109 member(s)


fun unlines(ls) = concat(map(x => append(x, ("\n" :: Nil)), ls))

fun height(p) = listLen(p)

fun width(p) = listLen(head(p))

fun stack(ls) = foldr1((a, b) => append(a, b), ls)

fun spread(ls) = foldr1((a, b) => zipWith((a, b) => append(a, b), a, b), ls)

fun emptyPic(hw) = if hw is Tup2(h, w) then replicate(h, replicate(w, " "))

fun groop(n, xs) = if xs is
  Nil then Nil
  else take(n, xs) :: groop(n, drop(n, xs))

fun block(n, t)  = stack(map(spread, groop(n, t)))

fun blockT(n, t) = stack(map(stack, groop(n, t)))

fun lframe(mn, p) = if mn is Tup2(m,n) then
  let h = height(p)
  let w = width(p)
  append(zipWith(append, p, emptyPic(Tup2(h, n - w))), emptyPic(Tup2(m - h, n)))

fun leap(year) = if
  intMod(year, 100) == 0 then intMod(year, 400) == 0
  else intMod(year, 4) == 0

fun monthLengths(year) =
  let feb = if leap(year) then 29 else 28
  31 :: feb :: 31 :: 30 :: 31 :: 30 :: 31 :: 31 :: 30 :: 31 :: 30 :: 31 :: Nil

let monthNames = Cons(Cons("J", Cons("a", Cons("n", Cons("u", Cons("a", Cons("r", Cons("y", Nil))))))), Cons(Cons("F", Cons("e", Cons("b", Cons("r", Cons("u", Cons("a", Cons("r", Cons("y", Nil)))))))), Cons(Cons("M", Cons("a", Cons("r", Cons("c", Cons("h", Nil))))), Cons(Cons("A", Cons("p", Cons("r", Cons("i", Cons("l", Nil))))), Cons(Cons("M", Cons("a", Cons("y", Nil))), Cons(Cons("J", Cons("u", Cons("n", Cons("e", Nil)))), Cons(Cons("J", Cons("u", Cons("l", Cons("y", Nil)))), Cons(Cons("A", Cons("u", Cons("g", Cons("u", Cons("s", Cons("t", Nil)))))), Cons(Cons("S", Cons("e", Cons("p", Cons("t", Cons("e", Cons("m", Cons("b", Cons("e", Cons("r", Nil))))))))), Cons(Cons("O", Cons("c", Cons("t", Cons("o", Cons("b", Cons("e", Cons("r", Nil))))))), Cons(Cons("N", Cons("o", Cons("v", Cons("e", Cons("m", Cons("b", Cons("e", Cons("r", Nil)))))))), Cons(Cons("D", Cons("e", Cons("c", Cons("e", Cons("m", Cons("b", Cons("e", Cons("r", Nil)))))))), Nil))))))))))))
//│ > Cons {
//│ >   head: Cons { head: 'J', tail: Cons { head: 'a', tail: [Cons] } },
//│ >   tail: Cons {
//│ >     head: Cons { head: 'F', tail: [Cons] },
//│ >     tail: Cons { head: [Cons], tail: [Cons] }
//│ >   }
//│ monthNames = }

fun jan1st(year) =
  let last = year - 1
  intMod(year + intDiv(last, 4) - intDiv(last, 100) + intDiv(last, 400), 7)

fun firstDays(year) =
  take(12, map(x => intMod(x, 7), scanl((a, b) => a + b, jan1st(year), monthLengths(year))))

fun space(n) = replicate(n, " ")

fun ljustify(n, s) = append(s, space(n - listLen(s)))

fun rjustify(n, s) = append(space(n - listLen(s)), s)

fun date(ml, d) = if (d < 1) || (ml < d) then Cons(Cons(" ", Cons(" ", Cons(" ", Nil))), Nil) else Cons(rjustify(3, nofibStringToList(stringOfInt(d))), Nil)

fun dates(fd, ml) = map(d => date(ml, d), enumFromTo(1 - fd, 42 - fd))

fun cjustify(n, s) =
  let m = n - listLen(s)
  let halfm = intDiv(m, 2)
  append(append(space(halfm), s), space(m - halfm))

fun cal(year) =
  let side = emptyPic(Tup2(8, 2))
  let end = emptyPic(Tup2(1, 25))
  let daynames = Cons(Cons(" ", Cons("S", Cons("u", Cons(" ", Cons("M", Cons("o", Cons(" ", Cons("T", Cons("u", Cons(" ", Cons("W", Cons("e", Cons(" ", Cons("T", Cons("h", Cons(" ", Cons("F", Cons("r", Cons(" ", Cons("S", Cons("a", Nil))))))))))))))))))))), Nil)
  fun banner(yr) = append(cjustify(75, nofibStringToList(stringOfInt(yr))) :: Nil, emptyPic(Tup2(1, 75)))
  fun body(yr) = block(3, map(x => pad(pic(x)), months(yr)))
  fun pic(mnfdml) = if mnfdml is Tup3(mn, fd, ml) then append(title(mn), table(fd, ml))
  fun pad(p) = append(zipWith(append, zipWith(append, side, p), side), end)
  fun title(mn) = cjustify(21, mn) :: Nil
  fun table(fd, ml) = append(daynames, entries(fd, ml))
  fun entries(fd, ml) = block(7, dates(fd, ml))
  fun months(yer) = zip3(monthNames, firstDays(yer), monthLengths(yer))
  
  unlines(append(banner(year), body(year)))

fun testCalendar_nofib(n) = map(x => cal(x), enumFromTo(1993, 1993 + n))


// NOTE: original input: 1000
nofibListToString(concat(testCalendar_nofib(0)))
//│ > '                                   1993                                    \n' +
//│ >   '                                                                           \n' +
//│ >   '         January                 February                   March          \n' +
//│ >   '   Su Mo Tu We Th Fr Sa     Su Mo Tu We Th Fr Sa     Su Mo Tu We Th Fr Sa  \n' +
//│ >   '                   1  2         1  2  3  4  5  6         1  2  3  4  5  6  \n' +
//│ >   '    3  4  5  6  7  8  9      7  8  9 10 11 12 13      7  8  9 10 11 12 13  \n' +
//│ >   '   10 11 12 13 14 15 16     14 15 16 17 18 19 20     14 15 16 17 18 19 20  \n' +
//│ >   '   17 18 19 20 21 22 23     21 22 23 24 25 26 27     21 22 23 24 25 26 27  \n' +
//│ >   '   24 25 26 27 28 29 30     28                       28 29 30 31           \n' +
//│ >   '   31                                                                      \n' +
//│ >   '                                                                           \n' +
//│ >   '          April                     May                     June           \n' +
//│ >   '   Su Mo Tu We Th Fr Sa     Su Mo Tu We Th Fr Sa     Su Mo Tu We Th Fr Sa  \n' +
//│ >   '                1  2  3                        1            1  2  3  4  5  \n' +
//│ >   '    4  5  6  7  8  9 10      2  3  4  5  6  7  8      6  7  8  9 10 11 12  \n' +
//│ >   '   11 12 13 14 15 16 17      9 10 11 12 13 14 15     13 14 15 16 17 18 19  \n' +
//│ >   '   18 19 20 21 22 23 24     16 17 18 19 20 21 22     20 21 22 23 24 25 26  \n' +
//│ >   '   25 26 27 28 29 30        23 24 25 26 27 28 29     27 28 29 30           \n' +
//│ >   '                            30 31                                          \n' +
//│ >   '                                                                           \n' +
//│ >   '          July                    August                  September        \n' +
//│ >   '   Su Mo Tu We Th Fr Sa     Su Mo Tu We Th Fr Sa     Su Mo Tu We Th Fr Sa  \n' +
//│ >   '                1  2  3      1  2  3  4  5  6  7               1  2  3  4  \n' +
//│ >   '    4  5  6  7  8  9 10      8  9 10 11 12 13 14      5  6  7  8  9 10 11  \n' +
//│ >   '   11 12 13 14 15 16 17     15 16 17 18 19 20 21     12 13 14 15 16 17 18  \n' +
//│ >   '   18 19 20 21 22 23 24     22 23 24 25 26 27 28     19 20 21 22 23 24 25  \n' +
//│ >   '   25 26 27 28 29 30 31     29 30 31                 26 27 28 29 30        \n' +
//│ >   '                                                                           \n' +
//│ >   '                                                                           \n' +
//│ >   '         October                 November                 December         \n' +
//│ >   '   Su Mo Tu We Th Fr Sa     Su Mo Tu We Th Fr Sa     Su Mo Tu We Th Fr Sa  \n' +
//│ >   '                   1  2         1  2  3  4  5  6               1  2  3  4  \n' +
//│ >   '    3  4  5  6  7  8  9      7  8  9 10 11 12 13      5  6  7  8  9 10 11  \n' +
//│ >   '   10 11 12 13 14 15 16     14 15 16 17 18 19 20     12 13 14 15 16 17 18  \n' +
//│ >   '   17 18 19 20 21 22 23     21 22 23 24 25 26 27     19 20 21 22 23 24 25  \n' +
//│ >   '   24 25 26 27 28 29 30     28 29 30                 26 27 28 29 30 31     \n' +
//│ >   '   31                                                                      \n' +
//│ =   '                                                                           \n'
