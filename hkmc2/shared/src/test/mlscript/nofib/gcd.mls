:js

:import NofibPrelude.mls
//│ Imported 112 member(s)


fun g(u1u2u3, v1v2v3) = if u1u2u3 is [u1, u2, u3] and v1v2v3 is [v1, v2, v3] then
  if
    v3 == 0 then [u3, u1, u2]
    else if
      quotRem(u3, v3) is [q, r] then
        g([v1, v2, v3], [u1 - (q * v1), u2 - (q * v2), r])

fun gcdE(x, y) = if 
  x == 0 then [y, 0, 1]
  else g([1, 0, x], [0, 1, y])

fun max_(ls) = if ls is
  x :: Nil then x
  x :: y :: xs then if x < y then max_(y :: xs) else max_(x::xs)

fun test(d) =
  let ns = enumFromTo(5000, 5000 + d)
  
  let ms = enumFromTo(10000, 10000 + d)
  
  fun lscomp1(p1) = if p1 is
    Nil then Nil
    h1 :: t1 then
      fun lscomp2(p2) = if p2 is
        Nil then lscomp1(t1)
        h2 :: t2 then [h1, h2] :: lscomp2(t2)
      lscomp2(ms)
  
  let tripls =
    map(case { [x, y] then [x, y, gcdE(x, y)] }, lscomp1(ns))
  
  let rs = map(case { [d1, d2, [gg, u, v]] then abs(gg + u + v) }, tripls)
  
  max_(rs)


fun testGcd_nofib(x) = test(x)



// NOTE: original input 400
:expect 5021
testGcd_nofib(40)
//│ = 5021
