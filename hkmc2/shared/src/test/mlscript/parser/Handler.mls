
:pe
handle
//│ ╔══[PARSE ERROR] Expected expression after 'handle' binding keyword; found end of input instead
//│ ║  l.3: 	handle
//│ ╙──     	      ^

:pe
handle h
//│ ╔══[PARSE ERROR] Expected '=' keyword after 'handle' binding head; found end of input instead
//│ ║  l.9: 	handle h
//│ ╙──     	        ^

:pe
handle h = Eff
//│ ╔══[PARSE ERROR] Expected 'with' keyword after 'handle' binding class name; found end of input instead
//│ ║  l.15: 	handle h = Eff
//│ ╙──      	              ^

:parseOnly
handle h = Eff with
  fun f(r) = r(0)
  fun g(a, r) = r(1)
//│ Parsed:
//│ 	Handle(Ident(h),Ident(Eff),Block(List(TermDef(Fun,App(Ident(f),Tup(List(Ident(r)))),Some(App(Ident(r),Tup(List(IntLit(0)))))), TermDef(Fun,App(Ident(g),Tup(List(Ident(a), Ident(r)))),Some(App(Ident(r),Tup(List(IntLit(1)))))))),None)


:e
fun foo(x) = 1
handle 1 = 1 with
  fun f(r) = r(0)
in
  foo(h)
//│ ╔══[ERROR] Unsupported handle binding shape
//│ ║  l.30: 	handle 1 = 1 with
//│ ║        	       ^^^^^^^^^^
//│ ║  l.31: 	  fun f(r) = r(0)
//│ ╙──      	^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Name not found: h
//│ ║  l.33: 	  foo(h)
//│ ╙──      	      ^

class Eff
fun foo(h) = 0
handle h = Eff with
  fun f(r) = r(0)
in
  foo(h)

class Eff
fun foo(h) = 0
handle h = Eff with
  fun f(r) = r(0)
  fun g(a, r) = r(1)
foo(h) 

:e
(
  handle h = Eff with
    fun f(r) = r(0)
    fun g(a, r) = r(1)
) + 1
//│ ╔══[ERROR] Expected a body for handle bindings in expression position
//│ ║  l.59: 	  handle h = Eff with
//│ ║        	         ^^^^^^^^^^^^
//│ ║  l.60: 	    fun f(r) = r(0)
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ║  l.61: 	    fun g(a, r) = r(1)
//│ ╙──      	^^^^^^^^^^^^^^^^^^^^^^

:el
class Eff
fun foo(h) = 0
handle h = Eff with
  fun f(r) = r(0)
  fun g(a, r) = r(1)
foo(h)
//│ Elab: { Cls Eff { }; ‹› fun member:foo(Param(‹›,h,None), ) = 0; handle globalThis:block#8.h = SynthSel(Ref(globalThis:block#8),Ident(Eff)) List(HandlerTermDefinition(r,TermDefinition(Some(globalThis:block#8),Fun,member:f,List(ParamList(‹›,List(),None)),None,Some(App(Ref(r),Tup(List(Fld(‹›,Lit(IntLit(0)),None))))),‹result of member:f›,‹›)), HandlerTermDefinition(r,TermDefinition(Some(globalThis:block#8),Fun,member:g,List(ParamList(‹›,List(Param(‹›,a,None)),None)),None,Some(App(Ref(r),Tup(List(Fld(‹›,Lit(IntLit(1)),None))))),‹result of member:g›,‹›))); globalThis:block#8#666(.)foo‹member:foo›(globalThis:block#8.h#666) }

:el
class Eff
fun foo(h) = 0
handle h = Eff with
  fun f(r) = r(0)
  fun g(a, r)()() = r(1)
foo(h)
//│ Elab: { Cls Eff { }; ‹› fun member:foo(Param(‹›,h,None), ) = 0; handle globalThis:block#9.h = SynthSel(Ref(globalThis:block#9),Ident(Eff)) List(HandlerTermDefinition(r,TermDefinition(Some(globalThis:block#9),Fun,member:f,List(ParamList(‹›,List(),None)),None,Some(App(Ref(r),Tup(List(Fld(‹›,Lit(IntLit(0)),None))))),‹result of member:f›,‹›)), HandlerTermDefinition(r,TermDefinition(Some(globalThis:block#9),Fun,member:g,List(ParamList(‹›,List(Param(‹›,a,None)),None), ParamList(‹›,List(),None), ParamList(‹›,List(),None)),None,Some(App(Ref(r),Tup(List(Fld(‹›,Lit(IntLit(1)),None))))),‹result of member:g›,‹›))); globalThis:block#9#666(.)foo‹member:foo›(globalThis:block#9.h#666) }

:e
class Eff
fun foo(h) = 0
handle h = Eff with
  fun f(r) = r(0)
  fun g(a, r) = r(1)
  val x = 24
  class Test with
    fun x() = x
foo(h)
//│ ╔══[ERROR] Only function definitions are allowed in handler blocks
//│ ║  l.95: 	  val x = 24
//│ ╙──      	          ^^
//│ ╔══[ERROR] Only function definitions are allowed in handler blocks
//│ ║  l.97: 	    fun x() = x
//│ ╙──      	              ^

:e
class Eff
fun foo(h) = 0
handle h = Eff with
  fun f(r) = r(0)
  fun g(a, r) = 
    handle e = Eff with
      fun f = r(0)
      fun g() = r(0)
      fun h()() = r(1)
    foo(h)
foo(h)
//│ ╔══[ERROR] Handler function is missing resumption parameter
//│ ║  l.113: 	      fun f = r(0)
//│ ╙──       	              ^^^^
//│ ╔══[ERROR] Handler function is missing resumption parameter
//│ ║  l.114: 	      fun g() = r(0)
//│ ╙──       	                ^^^^
//│ ╔══[ERROR] Handler function is missing resumption parameter
//│ ║  l.115: 	      fun h()() = r(1)
//│ ╙──       	                  ^^^^

:w
:el
class Eff
fun foo(h) = 0
handle h = Eff with
  fun f(r) = r(0)
  fun g(a, r) = r(1)
  12345
foo(h)
//│ ╔══[WARNING] Terms in handler block do nothing
//│ ║  l.135: 	  12345
//│ ╙──       	  ^^^^^
//│ Elab: { Cls Eff { }; ‹› fun member:foo(Param(‹›,h,None), ) = 0; handle globalThis:block#12.h = SynthSel(Ref(globalThis:block#12),Ident(Eff)) List(HandlerTermDefinition(r,TermDefinition(Some(globalThis:block#12),Fun,member:f,List(ParamList(‹›,List(),None)),None,Some(App(Ref(r),Tup(List(Fld(‹›,Lit(IntLit(0)),None))))),‹result of member:f›,‹›)), HandlerTermDefinition(r,TermDefinition(Some(globalThis:block#12),Fun,member:g,List(ParamList(‹›,List(Param(‹›,a,None)),None)),None,Some(App(Ref(r),Tup(List(Fld(‹›,Lit(IntLit(1)),None))))),‹result of member:g›,‹›))); globalThis:block#12#666(.)foo‹member:foo›(globalThis:block#12.h#666) }
