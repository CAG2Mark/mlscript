:parseOnly


:pe
let let
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding keyword; found end of input instead
//│ ║  l.5: 	let let
//│ ╙──     	       ^
//│ Parsed:
//│ 	LetLike(keyword 'let',Error(),None,None)

:pe
let x = 1 let y = 2
//│ ╔══[PARSE ERROR] Expected end of input; found 'let' keyword instead
//│ ║  l.13: 	let x = 1 let y = 2
//│ ╙──      	          ^^^
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),None)

let x = 1 in let y = 2
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(LetLike(keyword 'let',Ident(y),Some(IntLit(2)),None)))

let x = 1 in let y = 2 in let z = 3
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(LetLike(keyword 'let',Ident(y),Some(IntLit(2)),Some(LetLike(keyword 'let',Ident(z),Some(IntLit(3)),None)))))

let x = 1
let y = 2
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),None)
//│ 	LetLike(keyword 'let',Ident(y),Some(IntLit(2)),None)

let
  x
  y
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),None,None)
//│ 	LetLike(keyword 'let',Ident(y),None,None)

let
  x = 1
  y = 2
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),None)
//│ 	LetLike(keyword 'let',Ident(y),Some(IntLit(2)),None)

let
  x = 1 in x
  y = 2 in y
//│ Parsed:
//│ 	LetLike(keyword 'let',Ident(x),Some(IntLit(1)),Some(Ident(x)))
//│ 	LetLike(keyword 'let',Ident(y),Some(IntLit(2)),Some(Ident(y)))


