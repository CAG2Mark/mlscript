:js


:todo
fun f(x) = x
  + 1
//│ /!!!\ Uncaught error: scala.MatchError: OpBlock(List((Ident(+),IntLit(1)))) (of class hkmc2.syntax.Tree$OpBlock)

:todo
fun f(x) = x
  * 2
  + 1
//│ /!!!\ Uncaught error: scala.MatchError: OpBlock(List((Ident(*),IntLit(2)), (Ident(+),IntLit(1)))) (of class hkmc2.syntax.Tree$OpBlock)

:pt
:todo
fun f(x) = x
  + 1
  * 2
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   head = App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│   rhs = S of App:
//│     lhs = Ident of "x"
//│     rhs = OpBlock of Ls of 
//│       Tuple2:
//│         _1 = Ident of "+"
//│         _2 = IntLit of 1
//│       Tuple2:
//│         _1 = Ident of "*"
//│         _2 = IntLit of 2
//│ /!!!\ Uncaught error: scala.MatchError: OpBlock(List((Ident(+),IntLit(1)), (Ident(*),IntLit(2)))) (of class hkmc2.syntax.Tree$OpBlock)

:pt
:todo
fun f(x) = x
  + 1
    * 2
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   head = App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│   rhs = S of App:
//│     lhs = Ident of "x"
//│     rhs = OpBlock of Ls of 
//│       Tuple2:
//│         _1 = Ident of "+"
//│         _2 = App:
//│           lhs = IntLit of 1
//│           rhs = OpBlock of Ls of 
//│             Tuple2:
//│               _1 = Ident of "*"
//│               _2 = IntLit of 2
//│ /!!!\ Uncaught error: scala.MatchError: OpBlock(List((Ident(+),App(IntLit(1),OpBlock(List((Ident(*),IntLit(2)))))))) (of class hkmc2.syntax.Tree$OpBlock)


:pe
:fixme
fun f(x) = x { + 1, * 2 }
//│ ╔══[PARSE ERROR] Unexpected comma in this position
//│ ║  l.66: 	fun f(x) = x { + 1, * 2 }
//│ ╙──      	                  ^
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.66: 	fun f(x) = x { + 1, * 2 }
//│ ╙──      	                    ^
//│ /!!!\ Uncaught error: scala.MatchError: OpBlock(List((Ident(+),IntLit(1)))) (of class hkmc2.syntax.Tree$OpBlock)


:pt
fun f(x) = if x
  == 0 then "a"
  > 1 then "b"
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   head = App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│   rhs = S of IfLike:
//│     kw = keyword 'if'
//│     split = App:
//│       lhs = Ident of "x"
//│       rhs = OpBlock of Ls of 
//│         Tuple2:
//│           _1 = Ident of "=="
//│           _2 = InfixApp:
//│             lhs = IntLit of 0
//│             kw = keyword 'then'
//│             rhs = StrLit of "a"
//│         Tuple2:
//│           _1 = Ident of ">"
//│           _2 = InfixApp:
//│             lhs = IntLit of 1
//│             kw = keyword 'then'
//│             rhs = StrLit of "b"

f(0)
//│ = 'a'

:re
f(1)
//│ ═══[RUNTIME ERROR] Error: match error

f(2)
//│ = 'b'


// :pt
:pe
:e
fun f(x) = if x
  > 0 then "a"
  is 0 then "b"
//│ ╔══[PARSE ERROR] Expect an operator instead of 'is' keyword
//│ ║  l.121: 	  is 0 then "b"
//│ ╙──       	  ^^
//│ ╔══[PARSE ERROR] Unexpected 'is' keyword here
//│ ║  l.121: 	  is 0 then "b"
//│ ╙──       	  ^^
//│ ═══[ERROR] Unrecognized operator branch.


// :pt
:todo
:e
fun f(x) = if x
  foo(A) then a
  bar(B) then b
//│ ╔══[ERROR] Unrecognized term split (juxtaposition).
//│ ║  l.134: 	fun f(x) = if x
//│ ║         	              ^
//│ ║  l.135: 	  foo(A) then a
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.136: 	  bar(B) then b
//│ ╙──       	^^^^^^^^^^^^^^^


:pe
fun f(x) = if x
  is 0 then "a"
  is 1 then "b"
//│ ╔══[PARSE ERROR] Expected start of statement in this position; found 'is' keyword instead
//│ ║  l.149: 	  is 1 then "b"
//│ ╙──       	  ^^
//│ ╔══[PARSE ERROR] Expected end of input; found literal instead
//│ ║  l.149: 	  is 1 then "b"
//│ ╙──       	     ^
//│ = [Function: f]


