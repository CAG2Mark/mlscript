:js
:handler


abstract class Effect[A] with
  fun perform(arg: A): A


handle h1 = Effect with
  fun perform(arg)(k) =
    print("performing " + arg)
    [k("ok")]
h1.perform("hi")
h1.perform("hello")
//│ > performing hi
//│ > performing hello
//│ = [ [ 'ok' ] ]

:e
h1
//│ ╔══[ERROR] Name not found: h1
//│ ║  l.20: 	h1
//│ ╙──      	^^

:e
h1.perform("oops")
//│ ╔══[ERROR] Name not found: h1
//│ ║  l.26: 	h1.perform("oops")
//│ ╙──      	^^


// deep handler
:todo
handle h2 = Effect with
  fun perform(arg)(k) =
    print("performing " + arg)
    k of if arg > 0
      then h2.perform(arg - 1) + " " + arg
      else "0"
[
  print("–––");
  h2.perform(2)
  print("–––");
  h2.perform(3)
]
//│ ╔══[ERROR] Name not found: h2
//│ ║  l.38: 	      then h2.perform(arg - 1) + " " + arg
//│ ╙──      	           ^^
//│ > –––
//│ > performing 2
//│ > –––
//│ > performing 3
//│ = [ undefined, undefined ]


// The current implementation insert new handlers surrounding the entire handle block, and hence "later" handle block become the outer one
let res =
  handle h = Effect with
    fun perform(arg)(k) =
      print("A " + arg)
      handle g = Effect with
        fun perform(arg1)(k1) =
          print("B " + arg + " " + arg1)
          ["‹", k1(arg), arg1, "›"]
      [k(g)]
  let g = h.perform("hi")
  g.perform("bye")
  g.perform("friend")
  set g = h.perform("hola")
  g.perform("adios")
  g.perform("amigos")
in res.toString()
//│ > A hi
//│ > B hi bye
//│ > B hi friend
//│ > A hola
//│ > B hola adios
//│ > B hola amigos
//│ = '‹,‹,‹,‹,hola,friend,›,bye,›,amigos,›,adios,›'


// Output for the "later" handle block as the inner one
let res =
  print("A " + "hi")
  handle g = Effect with
    fun perform(arg1)(k1) =
      print("B " + "hi" + " " + arg1)
      ["‹", k1("hi"), arg1, "›"]
  g.perform("bye")
  g.perform("friend")
  print("A " + "hola")
  handle g2 = Effect with
    fun perform(arg1)(k1) =
      print("B " + "hola" + " " + arg1)
      ["‹", k1("hola"), arg1, "›"]
  g2.perform("adios")
  g2.perform("amigos")
in res.toString()
//│ > A hi
//│ > B hi bye
//│ > B hi friend
//│ > A hola
//│ > B hola adios
//│ > B hola amigos
//│ = '‹,‹,‹,‹,hola,amigos,›,adios,›,friend,›,bye,›'


let str = ""
if true do
  handle h1 = Effect with
    fun perform(arg)(k) =
      set str += "A"
      k(arg)
      set str = str + "A"
  handle h2 = Effect with
    fun perform(arg)(k) =
      set str = str + "B"
      k(arg)
      set str = str + "B"
  h2.perform(())
  h1.perform(())
str
//│ = 'BABA'
//│ str = 'BABA'
