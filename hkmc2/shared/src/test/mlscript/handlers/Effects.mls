:js

:fixme
:lot
abstract class Effect with
  fun perform(arg: Str): Str
let r = handle h = Effect with
  fun perform(arg, k) = k(arg)
in
  h.perform("k")
r
//│ Lowered:
//│ Program:
//│   imports = Nil
//│   main = Define:
//│     defn = ClsLikeDefn:
//│       sym = class:Effect
//│       k = Cls
//│       methods = Nil
//│       privateFields = Nil
//│       publicFields = Nil
//│       ctor = End of ""
//│     rest = HandleBlock: \
//│     lhs = globalThis:block#1.h
//│     handlers = Ls of 
//│       Handler:
//│         sym = member:perform
//│         resumeSym = k
//│         params = Ls of 
//│           ParamList:
//│             flags = ParamListFlags of false
//│             params = Ls of 
//│               Param:
//│                 flags = ()
//│                 sym = arg
//│                 sign = N
//│             restParam = N
//│         body = Return:
//│           res = Call:
//│             fun = Ref of k
//│             args = Ls of 
//│               Arg:
//│                 spread = false
//│                 value = Ref of arg
//│           implct = false
//│     rest = Assign: \
//│     lhs = $tmp
//│     rhs = Call:
//│       fun = Select:
//│         qual = Ref of globalThis:block#1.h
//│         name = Ident of "perform"
//│       args = Ls of 
//│         Arg:
//│           spread = false
//│           value = Lit of StrLit of "k"
//│     rest = Assign: \
//│     lhs = globalThis:block#1.r
//│     rhs = Ref of $tmp
//│     rest = Return: \
//│     res = Ref of globalThis:block#1.r
//│     implct = true
//│ /!!!\ Uncaught error: scala.MatchError: HandleBlock(globalThis:block#1.h,List(Handler(member:perform,k,List(ParamList(‹›,List(Param(‹›,arg,None)),None)),Return(Call(Ref(k),List(Arg(false,Ref(arg)))),false))),Assign($tmp,Call(Select(Ref(globalThis:block#1.h),Ident(perform)),List(Arg(false,Lit(StrLit(k))))),Assign(globalThis:block#1.r,Ref($tmp),Return(Ref(globalThis:block#1.r),true)))) (of class hkmc2.codegen.HandleBlock)
