:js


class Some[out A](value: A)

:todo
let Some(x) = Some(42)
//│ /!!!\ Uncaught error: scala.MatchError: Let(App(Ident(Some),Tup(List(Ident(x)))),Some(App(Ident(Some),Tup(List(IntLit(42))))),None) (of class hkmc2.syntax.Tree$Let)


class Foo(a)

:todo
let Foo(x) = Foo(1) in log(x)
//│ /!!!\ Uncaught error: scala.MatchError: Let(App(Ident(Foo),Tup(List(Ident(x)))),Some(App(Ident(Foo),Tup(List(IntLit(1))))),Some(App(Ident(log),Tup(List(Ident(x)))))) (of class hkmc2.syntax.Tree$Let)

:todo
let Foo(x) and x > 0 = Foo(1) in log("ok")
//│ /!!!\ Uncaught error: scala.MatchError: Let(InfixApp(App(Ident(Foo),Tup(List(Ident(x)))),keyword 'and',App(Ident(>),Tup(List(Ident(x), IntLit(0))))),Some(App(Ident(Foo),Tup(List(IntLit(1))))),Some(App(Ident(log),Tup(List(StrLit(ok)))))) (of class hkmc2.syntax.Tree$Let)


