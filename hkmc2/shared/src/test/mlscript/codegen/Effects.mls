:js
:il

// note: seems we can't use traits yet :|
// using a field to store the effect handler instead

// TODO: put resume$ and Cont$ into a Predef (resume$ should not be instrumented) for correctness, as the same Cont$ should be used for all function code

// TODO: use this syntax
// TODO: prepend or append resumption parameter like fun perform(x)(resume): Str -> Str or fun perform(resume)(x): Str -> Str
// Handle the case where the function is defined like fun perform: Str, then e.perform should also yield an effect?
// handle ... fun perform(resume)(x)(y)(z): A = resume(x)
// Dummy handler: fun dummy_perform(x)(y)(z) = { let result = new EffectSig$(h, perform(x)(y)(z)); result.tail = result; return result; }
// resume: A -> ?
// this simplifies current handler code, no need to Array.push anymore
:sjs
abstract class Effect[A] with
  fun perform(x: A): Str -> Str
//│ JS:
//│ function resume$(cont) {
//│   return (value) => {
//│     let cont1, value1;
//│     cont1 = cont;
//│     value1 = value;
//│     chainLoop: while (true) {
//│       if (cont1) {
//│         value1 = cont1.resume(value1);
//│         cont1 = cont1.next;
//│         continue chainLoop;
//│       }
//│       return value1;
//│       break;
//│     }
//│   };
//│ }
//│ this.Cont$ = function Cont$(resume1, resumed1, next1, isCont$1) { return new Cont$.class(resume1, resumed1, next1, isCont$1); };
//│ this.Cont$.class = class Cont$ {
//│   constructor(resume, resumed, next, isCont$) {
//│     this.resume = resume;
//│     this.resumed = resumed;
//│     this.next = next;
//│     this.isCont$ = isCont$;
//│     
//│   }
//│   toString() { return "Cont$(" + this.resume + ", " + this.resumed + ", " + this.next + ", " + this.isCont$ + ")"; }
//│ };
//│ this.Effect = class Effect {
//│   constructor() {
//│     
//│   }
//│   toString() { return "Effect"; }
//│ };
//│ undefined

:expect 'b'
class Effect[A](perform: Str -> Str)
val r = handle h = Effect with
  fun perform(arg, k) = "b"
in
  h.perform("k")
r
//│ r = 'b'

:expect 'k'
class Effect[A](perform: Str -> Str)
val r = handle h = Effect with
  fun perform(arg, k) = arg
in
  h.perform("k")
r
//│ r = 'k'

:expect 'Hello'
class Effect[A](perform: Str -> Str)
fun foo(e) = e.perform("hi")
val r = handle h = Effect with
  fun perform(arg, k) =
    print(arg)
    k(arg)
in
  (() => h.perform("Hello"))()
r
//│ > Hello
//│ r = 'Hello'

:expect 'hi'
class Effect[A](perform: Str -> Str)
fun foo(e) = e.perform("hi")
val r = handle h = Effect with
  fun perform(arg, k) =
    print(arg)
    k(arg)
in
  foo(h)
r
//│ > hi
//│ r = 'hi'

:expect 'hello'
class Effect[A](perform: Str -> Str)
val r = handle h = Effect with
  fun perform(arg, k) =
    print(arg)
    k(arg)
in
  h.perform("hi")
  h.perform("hello")
r
//│ > hi
//│ > hello
//│ r = 'hello'

:expect 'b'
class Effect[A](perform: Str -> Str)
val x =
  handle h = Effect with
    fun perform(arg, k) =
      print(arg)
      "b"
  in
    h.perform("t")
x
//│ > t
//│ x = 'b'

// TODO: val is not working
:expect 'Hello World!'
class Effect[A](perform: Str -> Str)
fun foo(h) =
  print("Entering foo")
  let result = h.perform("Hello")
  print("Exiting foo")
  result
fun bar(h) =
  print("Entering bar")
  let result = foo(h) + " World"
  print("Exiting bar")
  result
fun foobar(h) =
  print("Entering foobar")
  let result = bar(h) + "!"
  print("Exiting foobar")
  result
val x = handle h = Effect with
  fun perform(arg, k) =
    print("handler called")
    let result = k(arg)
    print("handler finished")
    result
in
  print("mainbody start")
  let result = foobar(h)
  print("mainbody end")
  result
x
//│ > mainbody start
//│ > Entering foobar
//│ > Entering bar
//│ > Entering foo
//│ > handler called
//│ > Exiting foo
//│ > Exiting bar
//│ > Exiting foobar
//│ > mainbody end
//│ > handler finished
//│ x = 'Hello World!'

:fixme
:expect 'Hello World!'
class Effect[A](perform: Str -> Str)
fun foo(h) =
  print("Entering foo")
  let result = h.perform("Hello")
  h.perform("Oops!")
  print("Exiting foo")
  result
fun bar(h) =
  print("Entering bar")
  let result = foo(h) + " World"
  print("Exiting bar")
  result
fun foobar(h) =
  print("Entering foobar")
  let result = bar(h) + "!"
  print("Exiting foobar")
  result
val x = handle h = Effect with
  fun perform(arg, k) =
    print("handler called")
    let result = k(arg)
    print("handler finished")
    result
in
  print("mainbody start")
  let result = foobar(h)
  print("mainbody end")
  result
x
//│ > mainbody start
//│ > Entering foobar
//│ > Entering bar
//│ > Entering foo
//│ > handler called
//│ > Exiting bar
//│ > Exiting foobar
//│ > mainbody end
//│ > handler finished
//│ ═══[RUNTIME ERROR] Expected: 'Hello World!', got: 'Cont$(undefined, false, Cont$409$foo, true) World!'

:fixme
:expect 1
class Cell(getVal: () -> Int, setVal: Int -> ())
let x = 0
let k
let m
let res = handle h = Cell with
  fun getVal(k) = k(x)
  fun setVal(value, k) =
    x = value
    k(())
in
  k = h.getVal()
  h.setVal(1)
  m = h.getVal()
k + m
//│ ═══[RUNTIME ERROR] Expected: 1, got: 0
//│ x = 1

// weird...?
:expect 1
k + m

class A(x) with
  fun debug() = print(x)
let x = new A(333)
x.debug()
//│ > 333
//│ x = A { x: 333 }

:fixme
fun f() =
  val x = 3
  let y = 5 in
    val x = 5
    x + y
//│ ═══[COMPILATION ERROR] [Uncaught SyntaxError] Identifier 'x' has already been declared

:sjs
fun f() =
  let x = 2 
  let y = f()
  let z = 3
  2
//│ JS:
//│ function resume$(cont) {
//│   return (value) => {
//│     let cont1, value1;
//│     cont1 = cont;
//│     value1 = value;
//│     chainLoop: while (true) {
//│       if (cont1) {
//│         value1 = cont1.resume(value1);
//│         cont1 = cont1.next;
//│         continue chainLoop;
//│       }
//│       return value1;
//│       break;
//│     }
//│   };
//│ }
//│ this.Cont$ = function Cont$(resume1, resumed1, next1, isCont$1) { return new Cont$.class(resume1, resumed1, next1, isCont$1); };
//│ this.Cont$.class = class Cont$ {
//│   constructor(resume, resumed, next, isCont$) {
//│     this.resume = resume;
//│     this.resumed = resumed;
//│     this.next = next;
//│     this.isCont$ = isCont$;
//│     
//│   }
//│   toString() { return "Cont$(" + this.resume + ", " + this.resumed + ", " + this.next + ", " + this.isCont$ + ")"; }
//│ };
//│ function f() {
//│   let x, y, z, res, tmp;
//│   class Cont$591$f {
//│     constructor() {
//│       
//│     }
//│     resume(value$) {
//│       if (this.pc$0 === 1) {
//│         this.res$0 = value$;
//│       } else {
//│       }
//│       contLoop: while (true) {
//│         if (this.pc$0 === 2) {
//│           this.x$0 = 2;
//│           this.res$0 = globalThis.f();
//│           if (this.res$0) {
//│             if (this.res$0.isCont$) {
//│               this.res$0.tail.next = this;
//│               this.pc$0 = 1;
//│               return this.res$0;
//│             }
//│             this.pc$0 = 1;
//│             continue contLoop;
//│           }
//│           this.pc$0 = 1;
//│           continue contLoop;
//│         } else {
//│           if (this.pc$0 === 1) {
//│             this.y$0 = this.res$0;
//│             this.z$0 = 3;
//│             return 2;
//│           }
//│         }
//│         break;
//│       }
//│     }
//│     toString() { return "Cont$591$f"; }
//│   }
//│   x = 2;
//│   res = globalThis.f();
//│   if (res) {
//│     if (res.isCont$) {
//│       tmp = new Cont$591$f(1, undefined);
//│       tmp.pc$0 = 1;
//│       tmp.isCont$ = true;
//│       tmp.x$0 = x;
//│       tmp.y$0 = y;
//│       res.tail.next = tmp;
//│       res.tail = tmp;
//│       return res;
//│     }
//│   }
//│   y = res;
//│   z = 3;
//│   return 2;
//│ }
//│ undefined

:expect 120
class Eff(get: () -> Int)
fun fact(e, factvalue) = 
  if factvalue != 0 then
    factvalue * fact(e, factvalue-1)
  else e.get()
handle h = Eff with
  fun get(k) = k(1)
let result = fact(h, 5)
result
//│ result = 120

// stack safe recursion
:expect 5050
class StackDelay(raise: () -> ())
handle h = StackDelay with
  fun raise(k) =
    print("stack unwinded")
    k(10)
fun sum(depth, x) =
  val new_depth = if depth > 70 then h.raise() else depth + 1
  if x != 0 then
    x + sum(new_depth, x - 1)
  else 0
let result = sum(0, 100)
result
//│ > stack unwinded
//│ result = 5050

// stack safe recursion
:fixme
:expect 5050
:sjs
class StackDelay(raise: () -> Int)
handle h = StackDelay with
  fun raise(k) =
    print("stack unwinded")
    k(10)
fun sum(depth, x) =
  val new_depth = if depth > 30 then h.raise() else depth + 1
  if x != 0 then
    x + sum(new_depth, x - 1)
  else 0
let result = sum(0, 100)
result
//│ JS:
//│ let cur, resume, tmp, res, tmp1;
//│ function resume$(cont) {
//│   return (value) => {
//│     let cont1, value1;
//│     cont1 = cont;
//│     value1 = value;
//│     chainLoop: while (true) {
//│       if (cont1) {
//│         value1 = cont1.resume(value1);
//│         cont1 = cont1.next;
//│         continue chainLoop;
//│       }
//│       return value1;
//│       break;
//│     }
//│   };
//│ }
//│ this.Cont$ = function Cont$(resume2, resumed1, next1, isCont$1) { return new Cont$.class(resume2, resumed1, next1, isCont$1); };
//│ this.Cont$.class = class Cont$ {
//│   constructor(resume1, resumed, next, isCont$) {
//│     this.resume = resume1;
//│     this.resumed = resumed;
//│     this.next = next;
//│     this.isCont$ = isCont$;
//│     
//│   }
//│   toString() { return "Cont$(" + this.resume1 + ", " + this.resumed + ", " + this.next + ", " + this.isCont$ + ")"; }
//│ };
//│ this.StackDelay = function StackDelay(raise1) { return new StackDelay.class(raise1); };
//│ this.StackDelay.class = class StackDelay {
//│   constructor(raise) {
//│     this.raise = raise;
//│     
//│   }
//│   toString() { return "StackDelay(" + this.raise + ")"; }
//│ };
//│ function raise(k) {
//│   let res1, tmp2, res2, tmp3;
//│   class Cont$736$raise {
//│     constructor() {
//│       
//│     }
//│     resume(value$) {
//│       if (this.pc$0 === 2) {
//│         this.res$0 = value$;
//│       } else {
//│         if (this.pc$0 === 3) {
//│           this.res$0 = value$;
//│         } else {
//│         }
//│       }
//│       contLoop: while (true) {
//│         if (this.pc$0 === 4) {
//│           this.res$0 = Predef.print("stack unwinded");
//│           if (this.res$0) {
//│             if (this.res$0.isCont$) {
//│               this.res$0.tail.next = this;
//│               this.pc$0 = 2;
//│               return this.res$0;
//│             }
//│             this.pc$0 = 2;
//│             continue contLoop;
//│           }
//│           this.pc$0 = 2;
//│           continue contLoop;
//│         } else {
//│           if (this.pc$0 === 2) {
//│             this.res$0 = k(10);
//│             if (this.res$0) {
//│               if (this.res$0.isCont$) {
//│                 this.res$0.tail.next = this;
//│                 this.pc$0 = 3;
//│                 return this.res$0;
//│               }
//│               this.pc$0 = 3;
//│               continue contLoop;
//│             }
//│             this.pc$0 = 3;
//│             continue contLoop;
//│           } else {
//│             if (this.pc$0 === 3) {
//│               return this.res$0;
//│             }
//│           }
//│         }
//│         break;
//│       }
//│     }
//│     toString() { return "Cont$736$raise"; }
//│   }
//│   res1 = Predef.print("stack unwinded");
//│   if (res1) {
//│     if (res1.isCont$) {
//│       tmp2 = new Cont$736$raise(2, undefined);
//│       tmp2.pc$0 = 2;
//│       tmp2.isCont$ = true;
//│       res1.tail.next = tmp2;
//│       res1.tail = tmp2;
//│       return res1;
//│     }
//│   }
//│   res2 = k(10);
//│   if (res2) {
//│     if (res2.isCont$) {
//│       tmp3 = new Cont$736$raise(3, undefined);
//│       tmp3.pc$0 = 3;
//│       tmp3.isCont$ = true;
//│       res2.tail.next = tmp3;
//│       res2.tail = tmp3;
//│       return res2;
//│     }
//│   }
//│   return res2;
//│ }
//│ handlerBody: while (true) {
//│   class Cont$751$ {
//│     constructor() {
//│       
//│     }
//│     resume(value$) {
//│       if (this.pc$0 === 9) {
//│         this.res$0 = value$;
//│       } else {
//│       }
//│       contLoop: while (true) {
//│         if (this.pc$0 === 10) {
//│           globalThis.h = new globalThis.StackDelay(() => {
//│             let cont;
//│             cont = new globalThis.Cont$.class(undefined, false, undefined, true);
//│             cont.tail = cont;
//│             cont.handler = globalThis.h;
//│             cont.handlerFun = raise;
//│             cont.params = [
//│               
//│             ];
//│             return cont;
//│           });
//│           function sum(depth, x) {
//│             let scrut, scrut1, res1, tmp2, tmp3, res2, tmp4, tmp5;
//│             class Cont$752$sum {
//│               constructor() {
//│                 
//│               }
//│               resume(value$1) {
//│                 if (this.pc$0 === 5) {
//│                   this.res$0 = value$1;
//│                 } else {
//│                   if (this.pc$0 === 6) {
//│                     this.res$0 = value$1;
//│                   } else {
//│                   }
//│                 }
//│                 contLoop1: while (true) {
//│                   if (this.pc$0 === 7) {
//│                     this.scrut$0 = depth > 30;
//│                     if (this.scrut$0) {
//│                       this.res$0 = globalThis.h.raise();
//│                       if (this.res$0) {
//│                         if (this.res$0.isCont$) {
//│                           this.res$0.tail.next = this;
//│                           this.pc$0 = 5;
//│                           return this.res$0;
//│                         }
//│                         this.pc$0 = 5;
//│                         continue contLoop1;
//│                       }
//│                       this.pc$0 = 5;
//│                       continue contLoop1;
//│                     } else {
//│                       this.tmp$0 = depth + 1;
//│                       this.pc$0 = 8;
//│                       continue contLoop1;
//│                     }
//│                     this.pc$0 = 8;
//│                     continue contLoop1;
//│                   } else {
//│                     if (this.pc$0 === 8) {
//│                       const new_depth = this.tmp$0;
//│                       this.scrut$0 = x != 0;
//│                       if (this.scrut$0) {
//│                         this.tmp$0 = x - 1;
//│                         this.res$0 = globalThis.sum(new_depth, this.tmp$0);
//│                         if (this.res$0) {
//│                           if (this.res$0.isCont$) {
//│                             this.res$0.tail.next = this;
//│                             this.pc$0 = 6;
//│                             return this.res$0;
//│                           }
//│                           this.pc$0 = 6;
//│                           continue contLoop1;
//│                         }
//│                         this.pc$0 = 6;
//│                         continue contLoop1;
//│                       } else {
//│                         return 0;
//│                       }
//│                       break contLoop1;
//│                     } else {
//│                       if (this.pc$0 === 5) {
//│                         this.tmp$0 = this.res$0;
//│                         this.pc$0 = 8;
//│                         continue contLoop1;
//│                       } else {
//│                         if (this.pc$0 === 6) {
//│                           return x + this.res$0;
//│                         }
//│                       }
//│                     }
//│                   }
//│                   break;
//│                 }
//│               }
//│               toString() { return "Cont$752$sum"; }
//│             }
//│             scrut = depth > 30;
//│             if (scrut) {
//│               res1 = globalThis.h.raise();
//│               if (res1) {
//│                 if (res1.isCont$) {
//│                   tmp2 = new Cont$752$sum(5, undefined);
//│                   tmp2.pc$0 = 5;
//│                   tmp2.isCont$ = true;
//│                   res1.tail.next = tmp2;
//│                   res1.tail = tmp2;
//│                   return res1;
//│                 }
//│               }
//│               tmp3 = res1;
//│             } else {
//│               tmp3 = depth + 1;
//│             }
//│             const new_depth = tmp3;
//│             scrut1 = x != 0;
//│             if (scrut1) {
//│               tmp5 = x - 1;
//│               res2 = globalThis.sum(new_depth, tmp5);
//│               if (res2) {
//│                 if (res2.isCont$) {
//│                   tmp4 = new Cont$752$sum(6, undefined);
//│                   tmp4.pc$0 = 6;
//│                   tmp4.isCont$ = true;
//│                   res2.tail.next = tmp4;
//│                   res2.tail = tmp4;
//│                   return res2;
//│                 }
//│               }
//│               return x + res2;
//│             } else {
//│               return 0;
//│             }
//│           }
//│           this.res$0 = globalThis.sum(0, 100);
//│           if (this.res$0) {
//│             if (this.res$0.isCont$) {
//│               this.res$0.tail.next = this;
//│               this.pc$0 = 9;
//│               return this.res$0;
//│             }
//│             this.pc$0 = 9;
//│             continue contLoop;
//│           }
//│           this.pc$0 = 9;
//│           continue contLoop;
//│         } else {
//│           if (this.pc$0 === 9) {
//│             globalThis.result = this.res$0;
//│             this.cur$0 = globalThis.result;
//│             return this.cur$0;
//│           }
//│         }
//│         break;
//│       }
//│     }
//│     toString() { return "Cont$751$"; }
//│   }
//│   this.h = new this.StackDelay(() => {
//│     let cont;
//│     cont = new this.Cont$.class(undefined, false, undefined, true);
//│     cont.tail = cont;
//│     cont.handler = this.h;
//│     cont.handlerFun = raise;
//│     cont.params = [
//│       
//│     ];
//│     return cont;
//│   });
//│   function sum(depth, x) {
//│     let scrut, scrut1, res1, tmp2, tmp3, res2, tmp4, tmp5;
//│     class Cont$752$sum {
//│       constructor() {
//│         
//│       }
//│       resume(value$) {
//│         if (this.pc$0 === 5) {
//│           this.res$0 = value$;
//│         } else {
//│           if (this.pc$0 === 6) {
//│             this.res$0 = value$;
//│           } else {
//│           }
//│         }
//│         contLoop: while (true) {
//│           if (this.pc$0 === 7) {
//│             this.scrut$0 = depth > 30;
//│             if (this.scrut$0) {
//│               this.res$0 = globalThis.h.raise();
//│               if (this.res$0) {
//│                 if (this.res$0.isCont$) {
//│                   this.res$0.tail.next = this;
//│                   this.pc$0 = 5;
//│                   return this.res$0;
//│                 }
//│                 this.pc$0 = 5;
//│                 continue contLoop;
//│               }
//│               this.pc$0 = 5;
//│               continue contLoop;
//│             } else {
//│               this.tmp$0 = depth + 1;
//│               this.pc$0 = 8;
//│               continue contLoop;
//│             }
//│             this.pc$0 = 8;
//│             continue contLoop;
//│           } else {
//│             if (this.pc$0 === 8) {
//│               const new_depth = this.tmp$0;
//│               this.scrut$0 = x != 0;
//│               if (this.scrut$0) {
//│                 this.tmp$0 = x - 1;
//│                 this.res$0 = globalThis.sum(new_depth, this.tmp$0);
//│                 if (this.res$0) {
//│                   if (this.res$0.isCont$) {
//│                     this.res$0.tail.next = this;
//│                     this.pc$0 = 6;
//│                     return this.res$0;
//│                   }
//│                   this.pc$0 = 6;
//│                   continue contLoop;
//│                 }
//│                 this.pc$0 = 6;
//│                 continue contLoop;
//│               } else {
//│                 return 0;
//│               }
//│               break contLoop;
//│             } else {
//│               if (this.pc$0 === 5) {
//│                 this.tmp$0 = this.res$0;
//│                 this.pc$0 = 8;
//│                 continue contLoop;
//│               } else {
//│                 if (this.pc$0 === 6) {
//│                   return x + this.res$0;
//│                 }
//│               }
//│             }
//│           }
//│           break;
//│         }
//│       }
//│       toString() { return "Cont$752$sum"; }
//│     }
//│     scrut = depth > 30;
//│     if (scrut) {
//│       res1 = globalThis.h.raise();
//│       if (res1) {
//│         if (res1.isCont$) {
//│           tmp2 = new Cont$752$sum(5, undefined);
//│           tmp2.pc$0 = 5;
//│           tmp2.isCont$ = true;
//│           res1.tail.next = tmp2;
//│           res1.tail = tmp2;
//│           return res1;
//│         }
//│       }
//│       tmp3 = res1;
//│     } else {
//│       tmp3 = depth + 1;
//│     }
//│     const new_depth = tmp3;
//│     scrut1 = x != 0;
//│     if (scrut1) {
//│       tmp5 = x - 1;
//│       res2 = globalThis.sum(new_depth, tmp5);
//│       if (res2) {
//│         if (res2.isCont$) {
//│           tmp4 = new Cont$752$sum(6, undefined);
//│           tmp4.pc$0 = 6;
//│           tmp4.isCont$ = true;
//│           res2.tail.next = tmp4;
//│           res2.tail = tmp4;
//│           return res2;
//│         }
//│       }
//│       return x + res2;
//│     } else {
//│       return 0;
//│     }
//│   }
//│   res = this.sum(0, 100);
//│   if (res) {
//│     if (res.isCont$) {
//│       tmp1 = new Cont$751$(9, undefined);
//│       tmp1.pc$0 = 9;
//│       tmp1.isCont$ = true;
//│       tmp1.h$0 = this.h;
//│       tmp1.result$0 = this.result;
//│       res.tail.next = tmp1;
//│       res.tail = tmp1;
//│       cur = res;
//│       break handlerBody;
//│     }
//│   }
//│   this.result = res;
//│   cur = this.result;
//│   break handlerBody;
//│   break;
//│ }
//│ handler: while (true) {
//│   if (cur) {
//│     if (cur.isCont$) {
//│       if (cur.handler) {
//│         tmp = cur.handler === this.h;
//│         if (tmp) {
//│           resume = resume$(cur.next);
//│           tmp = cur.params.push(resume);
//│           cur = cur.handlerFun.apply(null, cur.params);
//│           continue handler;
//│         }
//│       } else {
//│         throw new this.Error("Unhandled effects");
//│       }
//│     }
//│   }
//│   break;
//│ }
//│ undefined
//│ > stack unwinded
//│ ═══[RUNTIME ERROR] Expected: 5050, got: '100999897969594939291908988878685848382818079787776757473727170Cont$(undefined, false, Cont$752$sum, true)'
