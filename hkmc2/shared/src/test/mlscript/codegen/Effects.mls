:js
:il

// note: seems we can't use traits yet :|
// using a field to store the effect handler instead

// TODO: put resume$ and Cont$ into a Predef (resume$ should not be instrumented) for correctness, as the same Cont$ should be used for all function code

// TODO: use this syntax
// TODO: prepend or append resumption parameter like fun perform(x)(resume): Str -> Str or fun perform(resume)(x): Str -> Str
// handle ... fun perform(resume)(x)(y)(z): A = resume(x)
// Dummy handler: fun dummy_perform(x)(y)(z) = { let result = new EffectSig$(h, perform(x)(y)(z)); result.tail = result; return result; }
// resume: A -> ?
// this simplifies current handler code, no need to Array.push anymore
:sjs
abstract class Effect[A] with
  fun perform(x: A): Str -> Str
//│ JS:
//│ function resume$(cont) {
//│   return (value) => {
//│     let cont1, value1;
//│     cont1 = cont;
//│     value1 = value;
//│     chainLoop: while (true) {
//│       if (cont1) {
//│         value1 = cont1.resume(value1);
//│         cont1 = cont1.next;
//│         continue chainLoop;
//│       }
//│       return value1;
//│       break;
//│     }
//│   };
//│ }
//│ this.Cont$ = function Cont$(resume1, resumed1, next1, isCont$1) { return new Cont$.class(resume1, resumed1, next1, isCont$1); };
//│ this.Cont$.class = class Cont$ {
//│   constructor(resume, resumed, next, isCont$) {
//│     this.resume = resume;
//│     this.resumed = resumed;
//│     this.next = next;
//│     this.isCont$ = isCont$;
//│     
//│   }
//│   toString() { return "Cont$(" + this.resume + ", " + this.resumed + ", " + this.next + ", " + this.isCont$ + ")"; }
//│ };
//│ this.Effect = class Effect {
//│   constructor() {
//│     
//│   }
//│   toString() { return "Effect"; }
//│ };
//│ undefined

:expect 'b'
class Effect[A](perform: Str -> Str)
val r = handle h = Effect with
  fun perform(arg, k) = "b"
in
  h.perform("k")
r
//│ r = 'b'

:expect 'k'
class Effect[A](perform: Str -> Str)
val r = handle h = Effect with
  fun perform(arg, k) = arg
in
  h.perform("k")
r
//│ r = 'k'

:expect 'Hello'
class Effect[A](perform: Str -> Str)
fun foo(e) = e.perform("hi")
val r = handle h = Effect with
  fun perform(arg, k) =
    print(arg)
    k(arg)
in
  (() => h.perform("Hello"))()
r
//│ > Hello
//│ r = 'Hello'

:expect 'hi'
class Effect[A](perform: Str -> Str)
fun foo(e) = e.perform("hi")
val r = handle h = Effect with
  fun perform(arg, k) =
    print(arg)
    k(arg)
in
  foo(h)
r
//│ > hi
//│ r = 'hi'

// Resumption bug
:fixme
:sjs
class Effect[A](perform: Str -> Str)
val r = handle h = Effect with
  fun perform(arg, k) =
    print(arg)
    k(arg)
in
  h.perform("hi")
  h.perform("hello")
r
//│ JS:
//│ let h, cur, resume, tmp, res, tmp1, res1, tmp2;
//│ function resume$(cont) {
//│   return (value) => {
//│     let cont1, value1;
//│     cont1 = cont;
//│     value1 = value;
//│     chainLoop: while (true) {
//│       if (cont1) {
//│         value1 = cont1.resume(value1);
//│         cont1 = cont1.next;
//│         continue chainLoop;
//│       }
//│       return value1;
//│       break;
//│     }
//│   };
//│ }
//│ this.Cont$ = function Cont$(resume2, resumed1, next1, isCont$1) { return new Cont$.class(resume2, resumed1, next1, isCont$1); };
//│ this.Cont$.class = class Cont$ {
//│   constructor(resume1, resumed, next, isCont$) {
//│     this.resume = resume1;
//│     this.resumed = resumed;
//│     this.next = next;
//│     this.isCont$ = isCont$;
//│     
//│   }
//│   toString() { return "Cont$(" + this.resume1 + ", " + this.resumed + ", " + this.next + ", " + this.isCont$ + ")"; }
//│ };
//│ this.Effect = function Effect(perform1) { return new Effect.class(perform1); };
//│ this.Effect.class = class Effect {
//│   constructor(perform) {
//│     this.perform = perform;
//│     
//│   }
//│   toString() { return "Effect(" + this.perform + ")"; }
//│ };
//│ function perform(arg, k) {
//│   let res2, tmp3, res3, tmp4;
//│   class Cont$194$perform {
//│     constructor() {
//│       
//│     }
//│     resume(value$) {
//│       if (this.pc$0 === 2) {
//│         this.res$0 = value$;
//│       } else {
//│         if (this.pc$0 === 3) {
//│           this.res$0 = value$;
//│         } else {
//│         }
//│       }
//│       contLoop: while (true) {
//│         if (this.pc$0 === 4) {
//│           this.res$0 = Predef.print(arg);
//│           if (this.res$0) {
//│             if (this.res$0.isCont$) {
//│               this.tmp$0 = new Cont$194$perform(2, undefined);
//│               this.tmp$0.pc$0 = 2;
//│               this.tmp$0.isCont$ = true;
//│               this.res$0.tail.next = this.tmp$0;
//│               this.res$0.tail = this.tmp$0;
//│               return this.res$0;
//│             }
//│             this.pc$0 = 8;
//│             continue contLoop;
//│           }
//│           this.pc$0 = 7;
//│           continue contLoop;
//│         } else {
//│           if (this.pc$0 === 7) {
//│             this.pc$0 = 2;
//│             continue contLoop;
//│           } else {
//│             if (this.pc$0 === 2) {
//│               this.res$0 = k(arg);
//│               if (this.res$0) {
//│                 if (this.res$0.isCont$) {
//│                   this.tmp$0 = new Cont$194$perform(3, undefined);
//│                   this.tmp$0.pc$0 = 3;
//│                   this.tmp$0.isCont$ = true;
//│                   this.res$0.tail.next = this.tmp$0;
//│                   this.res$0.tail = this.tmp$0;
//│                   return this.res$0;
//│                 }
//│                 this.pc$0 = 6;
//│                 continue contLoop;
//│               }
//│               this.pc$0 = 5;
//│               continue contLoop;
//│             } else {
//│               if (this.pc$0 === 5) {
//│                 this.pc$0 = 3;
//│                 continue contLoop;
//│               } else {
//│                 if (this.pc$0 === 3) {
//│                   return this.res$0;
//│                 } else {
//│                   if (this.pc$0 === 6) {
//│                     this.pc$0 = 5;
//│                     continue contLoop;
//│                   } else {
//│                     if (this.pc$0 === 8) {
//│                       this.pc$0 = 7;
//│                       continue contLoop;
//│                     }
//│                   }
//│                 }
//│               }
//│             }
//│           }
//│         }
//│         break;
//│       }
//│     }
//│     toString() { return "Cont$194$perform"; }
//│   }
//│   res2 = Predef.print(arg);
//│   if (res2) {
//│     if (res2.isCont$) {
//│       tmp3 = new Cont$194$perform(2, undefined);
//│       tmp3.pc$0 = 2;
//│       tmp3.isCont$ = true;
//│       res2.tail.next = tmp3;
//│       res2.tail = tmp3;
//│       return res2;
//│     }
//│   }
//│   res3 = k(arg);
//│   if (res3) {
//│     if (res3.isCont$) {
//│       tmp4 = new Cont$194$perform(3, undefined);
//│       tmp4.pc$0 = 3;
//│       tmp4.isCont$ = true;
//│       res3.tail.next = tmp4;
//│       res3.tail = tmp4;
//│       return res3;
//│     }
//│   }
//│   return res3;
//│ }
//│ handlerBody: while (true) {
//│   class Cont$208$ {
//│     constructor() {
//│       
//│     }
//│     resume(value$) {
//│       if (this.pc$0 === 9) {
//│         this.res$0 = value$;
//│       } else {
//│         if (this.pc$0 === 10) {
//│           this.res$0 = value$;
//│         } else {
//│         }
//│       }
//│       contLoop: while (true) {
//│         if (this.pc$0 === 11) {
//│           this.h$0 = new globalThis.Effect((arg) => {
//│             let cont;
//│             cont = new globalThis.Cont$.class(undefined, false, undefined, true);
//│             cont.tail = cont;
//│             cont.handler = this.h$0;
//│             cont.handlerFun = perform;
//│             cont.params = [
//│               arg
//│             ];
//│             return cont;
//│           });
//│           this.res$0 = this.h$0.perform("hi");
//│           if (this.res$0) {
//│             if (this.res$0.isCont$) {
//│               this.tmp$0 = new Cont$208$(9, undefined);
//│               this.tmp$0.pc$0 = 9;
//│               this.tmp$0.isCont$ = true;
//│               this.res$0.tail.next = this.tmp$0;
//│               this.res$0.tail = this.tmp$0;
//│               this.cur$0 = this.res$0;
//│               return this.cur$0;
//│             }
//│             this.pc$0 = 15;
//│             continue contLoop;
//│           }
//│           this.pc$0 = 14;
//│           continue contLoop;
//│         } else {
//│           if (this.pc$0 === 14) {
//│             this.pc$0 = 9;
//│             continue contLoop;
//│           } else {
//│             if (this.pc$0 === 9) {
//│               this.res$0 = this.h$0.perform("hello");
//│               if (this.res$0) {
//│                 if (this.res$0.isCont$) {
//│                   this.tmp$0 = new Cont$208$(10, undefined);
//│                   this.tmp$0.pc$0 = 10;
//│                   this.tmp$0.isCont$ = true;
//│                   this.res$0.tail.next = this.tmp$0;
//│                   this.res$0.tail = this.tmp$0;
//│                   this.cur$0 = this.res$0;
//│                   return this.cur$0;
//│                 }
//│                 this.pc$0 = 13;
//│                 continue contLoop;
//│               }
//│               this.pc$0 = 12;
//│               continue contLoop;
//│             } else {
//│               if (this.pc$0 === 12) {
//│                 this.pc$0 = 10;
//│                 continue contLoop;
//│               } else {
//│                 if (this.pc$0 === 10) {
//│                   this.cur$0 = this.res$0;
//│                   return this.cur$0;
//│                 } else {
//│                   if (this.pc$0 === 13) {
//│                     this.pc$0 = 12;
//│                     continue contLoop;
//│                   } else {
//│                     if (this.pc$0 === 15) {
//│                       this.pc$0 = 14;
//│                       continue contLoop;
//│                     }
//│                   }
//│                 }
//│               }
//│             }
//│           }
//│         }
//│         break;
//│       }
//│     }
//│     toString() { return "Cont$208$"; }
//│   }
//│   h = new this.Effect((arg) => {
//│     let cont;
//│     cont = new this.Cont$.class(undefined, false, undefined, true);
//│     cont.tail = cont;
//│     cont.handler = h;
//│     cont.handlerFun = perform;
//│     cont.params = [
//│       arg
//│     ];
//│     return cont;
//│   });
//│   res = h.perform("hi");
//│   if (res) {
//│     if (res.isCont$) {
//│       tmp1 = new Cont$208$(9, undefined);
//│       tmp1.pc$0 = 9;
//│       tmp1.isCont$ = true;
//│       res.tail.next = tmp1;
//│       res.tail = tmp1;
//│       cur = res;
//│       break handlerBody;
//│     }
//│   }
//│   res1 = h.perform("hello");
//│   if (res1) {
//│     if (res1.isCont$) {
//│       tmp2 = new Cont$208$(10, undefined);
//│       tmp2.pc$0 = 10;
//│       tmp2.isCont$ = true;
//│       res1.tail.next = tmp2;
//│       res1.tail = tmp2;
//│       cur = res1;
//│       break handlerBody;
//│     }
//│   }
//│   cur = res1;
//│   break handlerBody;
//│   break;
//│ }
//│ handler: while (true) {
//│   if (cur) {
//│     if (cur.isCont$) {
//│       if (cur.handler) {
//│         tmp = cur.handler === h;
//│         if (tmp) {
//│           resume = resume$(cur.next);
//│           tmp = cur.params.push(resume);
//│           cur = cur.handlerFun.apply(null, cur.params);
//│           continue handler;
//│         }
//│       } else {
//│         throw new this.Error("Unhandled effects");
//│       }
//│     }
//│   }
//│   break;
//│ }
//│ this.r = cur;
//│ undefined
//│ ═══[RUNTIME ERROR] TypeError: Cannot read properties of undefined (reading 'perform')
//│ r = 'hi'

:expect 'b'
class Effect[A](perform: Str -> Str)
val x =
  handle h = Effect with
    fun perform(arg, k) =
      print(arg)
      "b"
  in
    h.perform("t")
x
//│ > t
//│ x = 'b'

:fixme
:expect 1
class Cell(getVal: () -> Int, setVal: Int -> ())
let x = 0
let k
let m
let res = handle h = Cell with
  fun getVal(k) = k(x)
  fun setVal(value, k) =
    x = value
    k(())
in
  k = h.getVal()
  h.setVal(1)
  m = h.getVal()
k + m
//│ ═══[RUNTIME ERROR] Expected: 1, got: 0
//│ m = 1
//│ x = 1

// weird...?
:expect 1
k + m

:fixme
class Cell(getVal: () -> Int, setVal: Int -> ())
let x = 0
let k
let m
val res = handle h = Cell with
  fun getVal(k) = k(x)
  fun setVal(value, k) =
    x = value
    k(())
in
  k = h.getVal()
  h.setVal(1)
  m = h.getVal()
//│ ═══[RUNTIME ERROR] TypeError: Cannot read properties of undefined (reading 'setVal')
//│ k = 0
//│ m = 1
//│ x = 0


:il
class A(x) with
  fun debug() = print(x)
let x = new A(333)
x.debug()
//│ > 333
//│ x = A { x: 333 }

:fixme
fun f() =
  val x = 3
  let y = 5 in
    val x = 5
    x + y
//│ ═══[COMPILATION ERROR] [Uncaught SyntaxError] Identifier 'x' has already been declared

:sjs
fun f() =
  let x = 2
  let y = f()
  let z = 3
  2
//│ JS:
//│ function resume$(cont) {
//│   return (value) => {
//│     let cont1, value1;
//│     cont1 = cont;
//│     value1 = value;
//│     chainLoop: while (true) {
//│       if (cont1) {
//│         value1 = cont1.resume(value1);
//│         cont1 = cont1.next;
//│         continue chainLoop;
//│       }
//│       return value1;
//│       break;
//│     }
//│   };
//│ }
//│ this.Cont$ = function Cont$(resume1, resumed1, next1, isCont$1) { return new Cont$.class(resume1, resumed1, next1, isCont$1); };
//│ this.Cont$.class = class Cont$ {
//│   constructor(resume, resumed, next, isCont$) {
//│     this.resume = resume;
//│     this.resumed = resumed;
//│     this.next = next;
//│     this.isCont$ = isCont$;
//│     
//│   }
//│   toString() { return "Cont$(" + this.resume + ", " + this.resumed + ", " + this.next + ", " + this.isCont$ + ")"; }
//│ };
//│ function f() {
//│   let x, y, z, res, tmp;
//│   class Cont$403$f {
//│     constructor() {
//│       
//│     }
//│     resume(value$) {
//│       if (this.pc$0 === 1) {
//│         this.res$0 = value$;
//│       } else {
//│       }
//│       contLoop: while (true) {
//│         if (this.pc$0 === 2) {
//│           this.x$0 = 2;
//│           this.res$0 = globalThis.f();
//│           if (this.res$0) {
//│             if (this.res$0.isCont$) {
//│               this.tmp$0 = new Cont$403$f(1, undefined);
//│               this.tmp$0.pc$0 = 1;
//│               this.tmp$0.isCont$ = true;
//│               this.res$0.tail.next = this.tmp$0;
//│               this.res$0.tail = this.tmp$0;
//│               return this.res$0;
//│             }
//│             this.pc$0 = 4;
//│             continue contLoop;
//│           }
//│           this.pc$0 = 3;
//│           continue contLoop;
//│         } else {
//│           if (this.pc$0 === 3) {
//│             this.pc$0 = 1;
//│             continue contLoop;
//│           } else {
//│             if (this.pc$0 === 1) {
//│               this.y$0 = this.res$0;
//│               this.z$0 = 3;
//│               return 2;
//│             } else {
//│               if (this.pc$0 === 4) {
//│                 this.pc$0 = 3;
//│                 continue contLoop;
//│               }
//│             }
//│           }
//│         }
//│         break;
//│       }
//│     }
//│     toString() { return "Cont$403$f"; }
//│   }
//│   x = 2;
//│   res = globalThis.f();
//│   if (res) {
//│     if (res.isCont$) {
//│       tmp = new Cont$403$f(1, undefined);
//│       tmp.pc$0 = 1;
//│       tmp.isCont$ = true;
//│       res.tail.next = tmp;
//│       res.tail = tmp;
//│       return res;
//│     }
//│   }
//│   y = res;
//│   z = 3;
//│   return 2;
//│ }
//│ undefined

:expect 120
fun fact(factvalue) = 
  if factvalue != 0 then
    factvalue * fact(factvalue-1)
  else 1
let result = fact(5)
result
//│ result = 120
