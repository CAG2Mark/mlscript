:js


fun res

val res: Int

:showRepl
fun res() = 1
//│ REPL> Sending: try { function res() { return 1 }; undefined } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  undefined
//│ REPL> Parsed:
//│ >  undefined

:showRepl
2 + 2
//│ REPL> Sending: try { 2 + 2 } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  4
//│ REPL> Parsed:
//│ >  4
//│ = 4

:showRepl
res
//│ REPL> Sending: try { this.res } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  [Function: res]
//│ REPL> Parsed:
//│ >  [Function: res]
//│ = [Function: res]


:showRepl
:re
let x = 1, log(x), x
//│ REPL> Sending: try { let tmp; this.x = 1; tmp = this.log(this.x); this.x } catch (e) { console.log('\u200B' + e + '\u200B'); }
//│ REPL> Collected:
//│ >  ​TypeError: this.log is not a function​
//│ >  undefined
//│ REPL> Parsed:
//│ >  [runtime error] TypeError: this.log is not a function
//│ ═══[RUNTIME ERROR] TypeError: this.log is not a function
//│ REPL> Sending: try { this.x } catch (e) { console.log('\u200B' + e + '\u200B'); }
//│ REPL> Collected:
//│ >  1
//│ REPL> Parsed:
//│ >  1
//│ x = 1

:import PredefJS.mls
//│ Imported 2 member(s)

:showRepl
let x = 1, log(x), x
//│ REPL> Sending: try { let tmp; this.x = 1; tmp = this.log(this.x); this.x } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  1
//│ >  1
//│ REPL> Parsed:
//│ >  1
//│ >  1
//│ > 1
//│ = 1
//│ REPL> Sending: try { this.x } catch (e) { console.log('\u200B' + e.stack + '\u200B'); }
//│ REPL> Collected:
//│ >  1
//│ REPL> Parsed:
//│ >  1
//│ x = 1


// FIXME multiline result is treated as part stdout
["***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***", "***"]
//│ > [
//│ >   '***', '***', '***',
//│ >   '***', '***', '***',
//│ >   '***', '***', '***',
//│ >   '***', '***', '***',
//│ >   '***', '***', '***'
//│ = ]


