:js

:import PredefJS.mls
//│ Imported 2 member(s)


fun test() =
  class C(a) with { fun f() = a }
  C(0).f()

test()
//│ = 0


:sjs
fun test(a) =
  class Inner(b) with
    log(a)
    fun f(c) = [a, b, c]
    fun g(d) =
      fun h(e) = [a, b, d, e]
      h(d)
  Inner(42)
//│ JS:
//│ function test(...args) {
//│   globalThis.Predef.checkArgs("test", 1, true, args.length);
//│   let a = args[0];
//│   function Inner(...args1) { return new Inner.class(...args1); };
//│   Inner.class = class Inner {
//│     constructor(b) {
//│       this.b = b;
//│       let tmp;
//│       tmp = globalThis.log(a) ?? null;
//│     }
//│     f(...args1) {
//│       globalThis.Predef.checkArgs("f", 1, true, args1.length);
//│       let c = args1[0];
//│       return [
//│         a,
//│         this.b,
//│         c
//│       ];
//│     } 
//│     g(...args2) {
//│       globalThis.Predef.checkArgs("g", 1, true, args2.length);
//│       let d = args2[0];
//│       
//│       const this$Inner = this;
//│       function h(...args1) {
//│         globalThis.Predef.checkArgs("h", 1, true, args1.length);
//│         let e = args1[0];
//│         return [
//│           a,
//│           this$Inner.b,
//│           d,
//│           e
//│         ];
//│       }
//│       return h(d) ?? null;
//│     }
//│     toString() { return "Inner(" + this.b + ")"; }
//│   };
//│   return Inner(42) ?? null;
//│ }
//│ undefined

let i = test(100)
//│ > 100
//│ i = Inner { b: 42 }

i.f(200)
//│ = [ 100, 42, 200 ]

i.g(200)
//│ = [ 100, 42, 200, 200 ]


:sjs
fun test(a) =
  class C1(b) with
    print of [a, b]
  class C2(b) with
    print of [a, b]
  [C1(1), C2(2)]
//│ JS:
//│ function test(...args) {
//│   globalThis.Predef.checkArgs("test", 1, true, args.length);
//│   let a = args[0];
//│   let tmp, tmp1;
//│   function C1(...args1) { return new C1.class(...args1); };
//│   C1.class = class C1 {
//│     constructor(b) {
//│       this.b = b;
//│       Predef.print([
//│         a,
//│         this.b
//│       ]) ?? null
//│     }
//│     toString() { return "C1(" + this.b + ")"; }
//│   };
//│   function C2(...args1) { return new C2.class(...args1); };
//│   C2.class = class C2 {
//│     constructor(b) {
//│       this.b = b;
//│       Predef.print([
//│         a,
//│         this.b
//│       ]) ?? null
//│     }
//│     toString() { return "C2(" + this.b + ")"; }
//│   };
//│   tmp = C1(1) ?? null;
//│   tmp1 = C2(2) ?? null;
//│   return [
//│     tmp,
//│     tmp1
//│   ];
//│ }
//│ undefined

test(123)
//│ > 123,1
//│ > 123,2
//│ = [ C1 { b: 1 }, C2 { b: 2 } ]


:sjs
class Foo(a) with
  fun foo() =
    fun bar() = a
    fun baz() = a
    bar()
    baz()
  foo()
Foo(123)
//│ JS:
//│ this.Foo = function Foo(...args1) { return new Foo.class(...args1); };
//│ this.Foo.class = class Foo {
//│   constructor(a) {
//│     this.a = a;
//│     this.foo() ?? null
//│   }
//│   foo(...args) {
//│     globalThis.Predef.checkArgs("foo", 0, true, args.length);
//│     let tmp;
//│     
//│     const this$Foo = this;
//│     function bar(...args1) {
//│       globalThis.Predef.checkArgs("bar", 0, true, args1.length);
//│       return this$Foo.a;
//│     }
//│     function baz(...args1) {
//│       globalThis.Predef.checkArgs("baz", 0, true, args1.length);
//│       return this$Foo.a;
//│     }
//│     tmp = bar() ?? null;
//│     return baz() ?? null;
//│   }
//│   toString() { return "Foo(" + this.a + ")"; }
//│ };
//│ this.Foo(123) ?? null
//│ = Foo { a: 123 }


