:js

:import PredefJS.mls
//│ Imported 2 member(s)

:global
:sjs


class Foo()
//│ JS:
//│ this.Foo = function Foo(...args) { return new Foo.class(...args); };
//│ this.Foo.class = class Foo {
//│   constructor() {
//│     
//│   }
//│   toString() { return "Foo(" +  + ")"; }
//│ };
//│ null

Foo
//│ JS:
//│ this.Foo
//│ = [Function: Foo] { class: [class Foo] }

Foo()
//│ JS:
//│ this.Foo()
//│ = Foo {}

Foo.class
//│ JS:
//│ let selRes;
//│ selRes = this.Foo.class;
//│ if (selRes === undefined) {
//│   throw new this.Error("Access to required field 'class' yielded 'undefined'");
//│ } else {
//│   selRes
//│ }
//│ = [class Foo]


class Foo(a)
//│ JS:
//│ this.Foo = function Foo(...args) { return new Foo.class(...args); };
//│ this.Foo.class = class Foo {
//│   constructor(a) {
//│     this.a = a;
//│     
//│   }
//│   toString() { return "Foo(" + this.a + ")"; }
//│ };
//│ null

Foo
//│ JS:
//│ this.Foo
//│ = [Function: Foo] { class: [class Foo] }

Foo(1)
//│ JS:
//│ this.Foo(1)
//│ = Foo { a: 1 }

Foo(1).a
//│ JS:
//│ let tmp, selRes;
//│ tmp = this.Foo(1);
//│ selRes = tmp.a;
//│ if (selRes === undefined) {
//│   throw new this.Error("Access to required field 'a' yielded 'undefined'");
//│ } else {
//│   selRes
//│ }
//│ = 1

fun foo(y) = Foo(y)
foo(27)
//│ JS:
//│ function foo(...args) {
//│   globalThis.Predef.checkArgs("foo", 1, true, args.length);
//│   let y = args[0];
//│   return globalThis.Foo(y);
//│ }
//│ this.foo(27)
//│ = Foo { a: 27 }


class Foo(a, b)
//│ JS:
//│ this.Foo = function Foo(...args) { return new Foo.class(...args); };
//│ this.Foo.class = class Foo {
//│   constructor(a, b) {
//│     this.a = a;
//│     this.b = b;
//│     
//│   }
//│   toString() { return "Foo(" + this.a + ", " + this.b + ")"; }
//│ };
//│ null

let foo = Foo
//│ JS:
//│ this.foo = this.Foo; null
//│ foo = [Function: Foo] { class: [class Foo] }

let f = foo(1, 2)
//│ JS:
//│ let tmp; tmp = this.foo(1, 2) ?? null; this.f = tmp; null
//│ f = Foo { a: 1, b: 2 }

let f = new foo(1, 2)
//│ JS:
//│ let tmp; tmp = new this.foo(1, 2); this.f = tmp; null
//│ f = Foo { a: 1, b: 2 }

f.a
//│ JS:
//│ let selRes;
//│ selRes = this.f.a;
//│ if (selRes === undefined) {
//│   throw new this.Error("Access to required field 'a' yielded 'undefined'");
//│ } else {
//│   selRes
//│ }
//│ = 1

f.b
//│ JS:
//│ let selRes;
//│ selRes = this.f.b;
//│ if (selRes === undefined) {
//│   throw new this.Error("Access to required field 'b' yielded 'undefined'");
//│ } else {
//│   selRes
//│ }
//│ = 2

let f = Foo(1, 2)
//│ JS:
//│ let tmp; tmp = this.Foo(1, 2); this.f = tmp; null
//│ f = Foo { a: 1, b: 2 }

f.a
//│ JS:
//│ let selRes;
//│ selRes = this.f.a;
//│ if (selRes === undefined) {
//│   throw new this.Error("Access to required field 'a' yielded 'undefined'");
//│ } else {
//│   selRes
//│ }
//│ = 1

f.b
//│ JS:
//│ let selRes;
//│ selRes = this.f.b;
//│ if (selRes === undefined) {
//│   throw new this.Error("Access to required field 'b' yielded 'undefined'");
//│ } else {
//│   selRes
//│ }
//│ = 2

Foo(log(1), log(2))
//│ JS:
//│ let tmp, tmp1; tmp = this.log(1); tmp1 = this.log(2); this.Foo(tmp, tmp1)
//│ > 1
//│ > 2
//│ = Foo { a: null, b: null }


class Inner(c) with
  fun i1(d) = c + d
  log(c)
//│ JS:
//│ this.Inner = function Inner(...args1) { return new Inner.class(...args1); };
//│ this.Inner.class = class Inner {
//│   constructor(c) {
//│     this.c = c;
//│     globalThis.log(this.c)
//│   }
//│   i1(...args) {
//│     globalThis.Predef.checkArgs("i1", 1, true, args.length);
//│     let d = args[0];
//│     return this.c + d;
//│   }
//│   toString() { return "Inner(" + this.c + ")"; }
//│ };
//│ null

let i = new Inner(100)
//│ JS:
//│ let tmp; tmp = new this.Inner.class(100); this.i = tmp; null
//│ > 100
//│ i = Inner { c: 100 }

i.i1(20)
//│ JS:
//│ this.i.i1(20) ?? null
//│ = 120


