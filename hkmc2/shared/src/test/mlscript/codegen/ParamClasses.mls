:js

:import PredefJS.mls
//│ Imported 1 member(s)

:global
:sjs


class Foo()
//│ JS:
//│ globalThis.Foo = class Foo { constructor() {  } }; undefined

Foo
//│ JS:
//│ () => { return new globalThis.Foo() }
//│ = [Function (anonymous)]

Foo()
//│ JS:
//│ new globalThis.Foo()
//│ = Foo {}


class Foo(a)
//│ JS:
//│ globalThis.Foo = class Foo { constructor(a) { this.a = a;  } }; undefined

Foo
//│ JS:
//│ (a) => { return new globalThis.Foo(a) }
//│ = [Function (anonymous)]

Foo(1)
//│ JS:
//│ new globalThis.Foo(1)
//│ = Foo { a: 1 }

Foo(1).a
//│ JS:
//│ let tmp; tmp = new globalThis.Foo(1); tmp.a
//│ = 1


class Foo(a, b)
//│ JS:
//│ globalThis.Foo = class Foo { constructor(a, b) { this.a = a; this.b = b;  } }; undefined

let f = Foo
//│ JS:
//│ globalThis.f = (a, b) => { return new globalThis.Foo(a, b) }; undefined
//│ f = [Function (anonymous)]

let f = f(1, 2)
//│ JS:
//│ let tmp; tmp = globalThis.f(1, 2); globalThis.f = tmp; undefined
//│ f = Foo { a: 1, b: 2 }

f.a
//│ JS:
//│ globalThis.f.a
//│ = 1

f.b
//│ JS:
//│ globalThis.f.b
//│ = 2

let f = Foo(1, 2)
//│ JS:
//│ let tmp; tmp = new globalThis.Foo(1, 2); globalThis.f = tmp; undefined
//│ f = Foo { a: 1, b: 2 }

f.a
//│ JS:
//│ globalThis.f.a
//│ = 1

f.b
//│ JS:
//│ globalThis.f.b
//│ = 2

Foo(log(1), log(2))
//│ JS:
//│ let tmp, tmp1; tmp = log(1); tmp1 = log(2); new globalThis.Foo(tmp, tmp1)
//│ > 1
//│ > 2
//│ = Foo { a: undefined, b: undefined }


class Inner(c) with
  fun i1(d) = c + d
  log(c)
//│ JS:
//│ globalThis.Inner = class Inner {
//│   constructor(c) {
//│     this.c = c;
//│     log(this.c)
//│   }
//│   i1(d) {
//│     return this.c + d
//│   }
//│ };
//│ undefined

let i = new Inner(100)
//│ JS:
//│ let tmp; tmp = new globalThis.Inner(100); globalThis.i = tmp; undefined
//│ > 100
//│ i = Inner { c: 100 }

i.i1(20)
//│ JS:
//│ globalThis.i.i1(20)
//│ = 120


