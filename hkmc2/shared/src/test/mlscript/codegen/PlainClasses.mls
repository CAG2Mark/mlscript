:js

:import PredefJS.mls
//│ Imported 2 member(s)

:global
:sjs


class Foo
//│ JS:
//│ this.Foo = class Foo { constructor() {  } toString() { return "Foo"; } }; undefined

Foo is Foo
//│ JS:
//│ let scrut; scrut = this.Foo; if (scrut instanceof this.Foo) { true } else { false }
//│ = false

(new Foo) is Foo
//│ JS:
//│ let scrut; scrut = new this.Foo(); if (scrut instanceof this.Foo) { true } else { false }
//│ = true

new Foo
//│ JS:
//│ new this.Foo()
//│ = Foo {}

new Foo()
//│ JS:
//│ new this.Foo()
//│ = Foo {}

Foo
//│ JS:
//│ this.Foo
//│ = [class Foo]

:re
Foo()
//│ JS:
//│ this.Foo() ?? null
//│ ═══[RUNTIME ERROR] TypeError: Class constructor Foo cannot be invoked without 'new'


class Foo with { log("hi") }
log("ok")
//│ JS:
//│ this.Foo = class Foo {
//│   constructor() {
//│     globalThis.log("hi") ?? null
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ this.log("ok") ?? null
//│ > ok

fun test() =
  class Foo with { log("hi") }
  log("ok")
  Foo
//│ JS:
//│ function test(...args) {
//│   globalThis.Predef.checkArgs("test", 0, true, args.length);
//│   let tmp;
//│   class Foo {
//│     constructor() {
//│       globalThis.log("hi") ?? null
//│     }
//│     toString() { return "Foo"; }
//│   }
//│   tmp = globalThis.log("ok") ?? null;
//│   return Foo;
//│ }
//│ undefined

let t = test()
//│ JS:
//│ let tmp; tmp = this.test() ?? null; this.t = tmp; undefined
//│ > ok
//│ t = [class Foo]

new t
//│ JS:
//│ new this.t()
//│ > hi
//│ = Foo {}

new t()
//│ JS:
//│ new this.t()
//│ > hi
//│ = Foo {}


class Foo with
  val x = 1
  let y = x + 1
  fun z() = y + x
//│ JS:
//│ this.Foo = class Foo {
//│   #y;
//│   constructor() {
//│     let tmp;
//│     this.x = 1;
//│     tmp = this.x + 1;
//│     this.#y = tmp;
//│   }
//│   z(...args) {
//│     globalThis.Predef.checkArgs("z", 0, true, args.length);
//│     return this.#y + this.x;
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ undefined


class Foo with
  val x1 = 1
  val x2 = 2
  let y1 = 3
  let y2 = 4
  fun z1() = 5
  fun z2() = 6
  log("hello")
//│ JS:
//│ this.Foo = class Foo {
//│   #y1;
//│   #y2;
//│   constructor() {
//│     this.x1 = 1;
//│     this.x2 = 2;
//│     this.#y1 = 3;
//│     this.#y2 = 4;
//│     globalThis.log("hello") ?? null
//│   }
//│   z1(...args) {
//│     globalThis.Predef.checkArgs("z1", 0, true, args.length);
//│     return 5;
//│   } 
//│   z2(...args1) {
//│     globalThis.Predef.checkArgs("z2", 0, true, args1.length);
//│     return 6;
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ undefined


class Foo with
  val x = 1
  fun foo(y) = x + y
  fun bar(z) = foo(z) + 1
//│ JS:
//│ this.Foo = class Foo {
//│   constructor() {
//│     this.x = 1;
//│   }
//│   foo(...args) {
//│     globalThis.Predef.checkArgs("foo", 1, true, args.length);
//│     let y = args[0];
//│     return this.x + y;
//│   } 
//│   bar(...args1) {
//│     globalThis.Predef.checkArgs("bar", 1, true, args1.length);
//│     let z = args1[0];
//│     let tmp;
//│     tmp = this.foo(z) ?? null;
//│     return tmp + 1;
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ undefined

let a = new Foo
log(a.x)
log(a.foo(1))
log(a.bar(1))
//│ JS:
//│ let tmp, selRes, tmp1, tmp2, tmp3, tmp4, tmp5;
//│ tmp = new this.Foo();
//│ this.a = tmp;
//│ selRes = this.a.x;
//│ if (selRes === undefined) {
//│   throw new this.Error("Access to required field 'x' yielded 'undefined'");
//│ } else {
//│   tmp1 = selRes;
//│ }
//│ tmp2 = this.log(tmp1) ?? null;
//│ tmp3 = this.a.foo(1) ?? null;
//│ tmp4 = this.log(tmp3) ?? null;
//│ tmp5 = this.a.bar(1) ?? null;
//│ this.log(tmp5) ?? null
//│ > 1
//│ > 2
//│ > 3
//│ a = Foo { x: 1 }





// ——— TODO ———


// FIXME reject duplicated member names
class Foo with
  val x = 1
  let x = 2
//│ JS:
//│ this.Foo = class Foo {
//│   #x;
//│   constructor() {
//│     this.x = 1;
//│     this.#x = 2;
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ undefined


:fixme
class Foo with val x = 1
//│ ╔══[PARSE ERROR] Expected block after type declaration body; found 'val' keyword instead
//│ ║  l.223: 	class Foo with val x = 1
//│ ╙──       	               ^^^
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.223: 	class Foo with val x = 1
//│ ╙──       	                     ^
//│ ╔══[ERROR] Illegal juxtaposition right-hand side.
//│ ║  l.223: 	class Foo with val x = 1
//│ ╙──       	                   ^
//│ JS:
//│ /* error */


