:js

:import PredefJS.mls
//│ Imported 2 member(s)

:global
:sjs


class Foo
//│ JS (unsanitized):
//│ this.Foo = class Foo { constructor() {  } toString() { return "Foo"; } }; null

Foo is Foo
//│ JS (unsanitized):
//│ let scrut; scrut = this.Foo; if (scrut instanceof this.Foo) { true } else { false }
//│ = false

(new Foo) is Foo
//│ JS (unsanitized):
//│ let scrut; scrut = new this.Foo(); if (scrut instanceof this.Foo) { true } else { false }
//│ = true

new Foo
//│ JS (unsanitized):
//│ new this.Foo()
//│ = Foo {}

new Foo()
//│ JS (unsanitized):
//│ new this.Foo()
//│ = Foo {}

Foo
//│ JS (unsanitized):
//│ this.Foo
//│ = [class Foo]

:re
Foo()
//│ JS (unsanitized):
//│ this.Foo()
//│ ═══[RUNTIME ERROR] TypeError: Class constructor Foo cannot be invoked without 'new'


class Foo with { log("hi") }
log("ok")
//│ JS (unsanitized):
//│ this.Foo = class Foo {
//│   constructor() {
//│     globalThis.log("hi")
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ this.log("ok")
//│ > ok

fun test() =
  class Foo with { log("hi") }
  log("ok")
  Foo
//│ JS (unsanitized):
//│ function test() {
//│   let tmp;
//│   class Foo {
//│     constructor() {
//│       globalThis.log("hi")
//│     }
//│     toString() { return "Foo"; }
//│   }
//│   tmp = globalThis.log("ok");
//│   return Foo;
//│ }
//│ null

let t = test()
//│ JS (unsanitized):
//│ let tmp; tmp = this.test(); this.t = tmp; null
//│ > ok
//│ t = [class Foo]

new t
//│ JS (unsanitized):
//│ new this.t()
//│ > hi
//│ = Foo {}

new t()
//│ JS (unsanitized):
//│ new this.t()
//│ > hi
//│ = Foo {}


class Foo with
  val x = 1
  let y = x + 1
  fun z() = y + x
//│ JS (unsanitized):
//│ this.Foo = class Foo {
//│   #y;
//│   constructor() {
//│     let tmp;
//│     this.x = 1;
//│     tmp = this.x + 1;
//│     this.#y = tmp;
//│   }
//│   z() {
//│     return this.#y + this.x;
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ null


class Foo with
  val x1 = 1
  val x2 = 2
  let y1 = 3
  let y2 = 4
  fun z1() = 5
  fun z2() = 6
  log("hello")
//│ JS (unsanitized):
//│ this.Foo = class Foo {
//│   #y1;
//│   #y2;
//│   constructor() {
//│     this.x1 = 1;
//│     this.x2 = 2;
//│     this.#y1 = 3;
//│     this.#y2 = 4;
//│     globalThis.log("hello")
//│   }
//│   z1() {
//│     return 5;
//│   } 
//│   z2() {
//│     return 6;
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ null


class Foo with
  val x = 1
  fun foo(y) = x + y
  fun bar(z) = foo(z) + 1
//│ JS (unsanitized):
//│ this.Foo = class Foo {
//│   constructor() {
//│     this.x = 1;
//│   }
//│   foo(y) {
//│     return this.x + y;
//│   } 
//│   bar(z) {
//│     let tmp;
//│     tmp = this.foo(z);
//│     return tmp + 1;
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ null

let a = new Foo
log(a.x)
log(a.foo(1))
log(a.bar(1))
//│ JS (unsanitized):
//│ let tmp, tmp1, tmp2, tmp3, tmp4;
//│ tmp = new this.Foo();
//│ this.a = tmp;
//│ tmp1 = this.log(this.a.x);
//│ tmp2 = this.a.foo(1) ?? null;
//│ tmp3 = this.log(tmp2);
//│ tmp4 = this.a.bar(1) ?? null;
//│ this.log(tmp4)
//│ > 1
//│ > 2
//│ > 3
//│ a = Foo { x: 1 }





// ——— TODO ———


// FIXME reject duplicated member names
class Foo with
  val x = 1
  let x = 2
//│ JS (unsanitized):
//│ this.Foo = class Foo {
//│   #x;
//│   constructor() {
//│     this.x = 1;
//│     this.#x = 2;
//│   }
//│   toString() { return "Foo"; }
//│ };
//│ null


:fixme
class Foo with val x = 1
//│ ╔══[PARSE ERROR] Expected block after type declaration body; found 'val' keyword instead
//│ ║  l.209: 	class Foo with val x = 1
//│ ╙──       	               ^^^
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.209: 	class Foo with val x = 1
//│ ╙──       	                     ^
//│ ╔══[ERROR] Illegal juxtaposition right-hand side.
//│ ║  l.209: 	class Foo with val x = 1
//│ ╙──       	                   ^
//│ JS (unsanitized):
//│ /* error */


