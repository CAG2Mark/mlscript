:js

:import PredefJS.mls
//│ Imported 1 member(s)

:global
:sjs


class Foo
//│ JS:
//│ this.Foo = class Foo { constructor() {  } }; undefined

new Foo
//│ JS:
//│ new this.Foo()
//│ = Foo {}

new Foo()
//│ JS:
//│ new this.Foo()
//│ = Foo {}

Foo
//│ JS:
//│ this.Foo
//│ = [class Foo]

Foo()
//│ JS:
//│ new this.Foo()
//│ = Foo {}


class Foo with { log("hi") }
log("ok")
//│ JS:
//│ this.Foo = class Foo { constructor() { log("hi") } }; log("ok")
//│ > ok

fun test() =
  class Foo with { log("hi") }
  log("ok")
  Foo
//│ JS:
//│ function test() {
//│   let tmp;
//│   class Foo {
//│     constructor() {
//│       log("hi")
//│     }
//│   };
//│   tmp = log("ok");
//│   return Foo
//│ };
//│ undefined

let t = test()
//│ JS:
//│ let tmp; tmp = this.test(); this.t = tmp; undefined
//│ > ok
//│ t = [class Foo]

new t
//│ JS:
//│ new this.t()
//│ > hi
//│ = Foo {}

new t()
//│ JS:
//│ new this.t()
//│ > hi
//│ = Foo {}


class Foo with
  val x = 1
  let y = x + 1
  fun z() = y + x
//│ JS:
//│ this.Foo = class Foo {
//│   #y;
//│   constructor() {
//│     let tmp;
//│     this.x = 1;
//│     tmp = this.x + 1;
//│     this.#y = tmp;
//│   }
//│   z() {
//│     return this.#y + this.x
//│   }
//│ };
//│ undefined


class Foo with
  val x1 = 1
  val x2 = 2
  let y1 = 3
  let y2 = 4
  fun z1() = 5
  fun z2() = 6
  log("hello")
//│ JS:
//│ this.Foo = class Foo {
//│   #y1;
//│   #y2;
//│   constructor() {
//│     this.x1 = 1;
//│     this.x2 = 2;
//│     this.#y1 = 3;
//│     this.#y2 = 4;
//│     log("hello")
//│   }
//│   z1() {
//│     return 5
//│   } 
//│   z2() {
//│     return 6
//│   }
//│ };
//│ undefined


class Foo with
  val x = 1
  fun foo(y) = x + y
  fun bar(z) = foo(z) + 1
//│ JS:
//│ this.Foo = class Foo {
//│   constructor() {
//│     this.x = 1;
//│   }
//│   foo(y) {
//│     return this.x + y
//│   } 
//│   bar(z) {
//│     let tmp;
//│     tmp = this.foo(z);
//│     return tmp + 1
//│   }
//│ };
//│ undefined

let a = new Foo
log(a.x)
log(a.foo(1))
log(a.bar(1))
//│ JS:
//│ let tmp, tmp1, tmp2, tmp3, tmp4;
//│ tmp = new this.Foo();
//│ this.a = tmp;
//│ tmp1 = log(this.a.x);
//│ tmp2 = this.a.foo(1);
//│ tmp3 = log(tmp2);
//│ tmp4 = this.a.bar(1);
//│ log(tmp4)
//│ > 1
//│ > 2
//│ > 3
//│ a = Foo { x: 1 }





// ——— TODO ———


// FIXME reject duplicated member names
class Foo with
  val x = 1
  let x = 2
//│ JS:
//│ this.Foo = class Foo { #x; constructor() { this.x = 1; this.#x = 2; } }; undefined


:fixme
class Foo with val x = 1
//│ ╔══[PARSE ERROR] Expected block after type declaration body; found 'val' keyword instead
//│ ║  l.180: 	class Foo with val x = 1
//│ ╙──       	               ^^^
//│ ╔══[PARSE ERROR] Expected end of input; found identifier instead
//│ ║  l.180: 	class Foo with val x = 1
//│ ╙──       	                   ^
//│ JS:
//│ /* error */


