:js

:import PredefJS.mls
//│ Imported 2 member(s)


module Example with
  val a = 1
  fun f(x) = [x, a]

Example.f(2)
//│ = [ 2, 1 ]

let oops = Example.f
//│ oops = [Function: f]


// * JavaScript nonsense
oops(2)
//│ = [ 2, undefined ]

oops.call(Example, 2)
//│ = [ 2, 1 ]


// * We could use that syntax as a shorthand:
// * TODO need to support varargs...
fun (.) call(receiver, f)(arg) = f.call(receiver, arg)


// * Notice how it parses with the correct precedence:
:pt
:sjs
Example . oops(2)
//│ Parsed tree:
//│ App:
//│   lhs = App:
//│     lhs = Ident of "."
//│     rhs = Tup of Ls of 
//│       Ident of "Example"
//│       Ident of "oops"
//│   rhs = Tup of Ls of 
//│     IntLit of 2
//│ JS:
//│ let tmp; tmp = this.call(this.Example, this.oops); tmp(2)
//│ = [ 2, 1 ]

Example. oops(2)
//│ = [ 2, 1 ]

// * This one is a normal method call; there is no `oops` in `Example`
:e
:re
Example .oops(2)
//│ ╔══[ERROR] Module 'Example' does not contain member 'oops'
//│ ║  l.54: 	Example .oops(2)
//│ ╙──      	        ^^^^^
//│ ═══[RUNTIME ERROR] TypeError: this.Example.oops is not a function


id(Example) . oops(2)
//│ = [ 2, 1 ]


class Example2(val a) with
  val a = 1
  fun f(inc) = Example2(a + inc)

let oops2 = Example2(0).f
//│ oops2 = [Function: f]

(new Example2(1)) . oops2(2) . oops2(2)
//│ = Example2 { a: 1 }

:todo
new Example2(1)
  . oops2(2)
//│ /!!!\ Uncaught error: scala.MatchError: OpBlock(List((Ident(.),App(Ident(oops2),Tup(List(IntLit(2))))))) (of class hkmc2.syntax.Tree$OpBlock)

:todo
new Example2(1)
  . oops2(2)
  . oops2(2)
//│ /!!!\ Uncaught error: scala.MatchError: OpBlock(List((Ident(.),App(Ident(oops2),Tup(List(IntLit(2))))), (Ident(.),App(Ident(oops2),Tup(List(IntLit(2))))))) (of class hkmc2.syntax.Tree$OpBlock)


// * Alternative syntax – precedence is now inappropriate
fun (.>) call(receiver, f)(arg) = f.call(receiver, arg)

:pt
:sjs
Example .> oops(2)
//│ Parsed tree:
//│ App:
//│   lhs = Ident of ".>"
//│   rhs = Tup of Ls of 
//│     Ident of "Example"
//│     App:
//│       lhs = Ident of "oops"
//│       rhs = Tup of Ls of 
//│         IntLit of 2
//│ JS:
//│ let tmp; tmp = this.oops(2); this.call(this.Example, tmp)
//│ = [Function (anonymous)]


// * Another alternative syntax
fun (|>.) call(receiver, f)(arg) = f.call(receiver, arg)

Example |>. oops(2)
//│ = [ 2, 1 ]

(new Example2(1)) |>. oops2(2) |>. oops2(2)
//│ = Example2 { a: 1 }


