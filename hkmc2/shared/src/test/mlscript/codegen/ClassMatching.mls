:js

:import PredefJS.mls
//│ Imported 1 member(s)


class Some[out A](value: A)

module None


let s = Some(0)
//│ s = Some { value: 0 }

if s is
  Some(x) then x
//│ = 0

if s is
  Some(x) then x
  None then 1
//│ = 0

if s is
  Some then s.value
//│ = 0


:sjs
x => if x is Some(x) then x
//│ JS:
//│ (x2) => {
//│   let param02, x3, tmp4;
//│   if (x2 instanceof this.Some) {
//│     param02 = x2.value;
//│     x3 = param02;
//│     tmp4 = x3;
//│   }
//│   return tmp4
//│ }
//│ = [Function (anonymous)]


// TODO produce simpler code (see: useless bindings)
:sjs
fun f(x) = if x is
  Some(0) then 42
  None then "ok"
  else log("oops")
//│ JS:
//│ function f(x2) {
//│   let param02, tmp4, tmp5, tmp6;
//│   if (x2 instanceof this.Some) {
//│     param02 = x2.value;
//│     if (param02 === 0) {
//│       tmp4 = 42;
//│     } else {
//│       tmp6 = log("oops");
//│       tmp4 = tmp6;
//│     }
//│   } else {
//│     if (x2 === this.None) {
//│       tmp4 = "ok";
//│     } else {
//│       tmp5 = log("oops");
//│       tmp4 = tmp5;
//│     }
//│   }
//│   return tmp4
//│ };
//│ undefined

f(Some(0))
//│ = 42

f(Some(1))
//│ > oops

f(None)
//│ = 'ok'

f(0)
//│ > oops


class Pair[out A, out B](fst: A, snd: B)


:sjs
fun f(x) = if x is
  Some(u) then u
  Pair(a, b) then a + b
//│ JS:
//│ function f(x2) {
//│   let param02, param1, a, b, param03, u, tmp6;
//│   if (x2 instanceof this.Some) {
//│     param03 = x2.value;
//│     u = param03;
//│     tmp6 = u;
//│   } else {
//│     if (x2 instanceof this.Pair) {
//│       param02 = x2.fst;
//│       param1 = x2.snd;
//│       a = param02;
//│       b = param1;
//│       tmp6 = a + b;
//│     }
//│   }
//│   return tmp6
//│ };
//│ undefined

f(Some(123))
//│ = 123

f(Pair(10, 5))
//│ = 15


// UCS term not in tail position
:sjs
fun f(x) = log of if x is
  Some(0) then "0"
  None then "ok"
  else "oops"
//│ JS:
//│ function f(x2) {
//│   let param02, tmp8;
//│   if (x2 instanceof this.Some) {
//│     param02 = x2.value;
//│     if (param02 === 0) {
//│       tmp8 = "0";
//│     } else {
//│       tmp8 = "oops";
//│     }
//│   } else {
//│     if (x2 === this.None) {
//│       tmp8 = "ok";
//│     } else {
//│       tmp8 = "oops";
//│     }
//│   }
//│   return log(tmp8)
//│ };
//│ undefined

f(Some(0))
//│ > 0

f(Some(1))
//│ > oops

f(None)
//│ > ok

f(0)
//│ > oops



