:js
:sjs


class Some[out A](value: A)
//│ JS:
//│ this.Some = class Some { constructor() { undefined } }; undefined


:todo
let Some(x) = Some(42)
//│ /!!!\ Uncaught error: scala.MatchError: Let(App(Ident(Some),Tup(List(Ident(x)))),Some(App(Ident(Some),Tup(List(IntLit(42))))),None) (of class hkmc2.syntax.Tree$Let)


// :de
// :elt
:todo
x => if x is
  Some(0) then 0
  else log("oops")
//│ /!!!\ Uncaught error: scala.MatchError: If(Cons(Branch(Ref(x@25),Class(class:Some,Some(List($param0@27)),false),Cons(Branch(Ref($param0@27),LitPat(IntLit(0)),Else(Lit(IntLit(0)))),Nil)),Else(App(Ref(.log),Tup(List(Fld(‹›,Lit(StrLit(oops)),None))))))) (of class hkmc2.semantics.Term$If)


