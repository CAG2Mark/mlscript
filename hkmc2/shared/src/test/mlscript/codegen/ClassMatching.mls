:js

:import PredefJS.mls
//│ Imported 1 member(s)


class Some[out A](value: A)

module None


// FIXME duplication of scrutinee
:sjs
if Some(0) is Some(x) then x
//│ JS:
//│ let scrut, param0, x, tmp, tmp1;
//│ tmp = ((value) => {
//│   return new Some(value)
//│ })(0);
//│ scrut = tmp;
//│ scrut = ((value) => {
//│   return new Some(value)
//│ })(0);
//│ if (scrut instanceof this.Some) {
//│   param0 = scrut.value;
//│   x = param0;
//│   tmp1 = x;
//│ } else {
//│   throw new Error("match error")
//│ }
//│ tmp1
//│ = 0


let s = Some(0)
//│ s = Some { value: 0 }

:sjs
if s is
  Some(x) then x
//│ JS:
//│ let scrut1, param01, x1, tmp3;
//│ scrut1 = this.s;
//│ scrut1 = this.s;
//│ if (scrut1 instanceof this.Some) {
//│   param01 = scrut1.value;
//│   x1 = param01;
//│   tmp3 = x1;
//│ } else {
//│   throw new Error("match error")
//│ }
//│ tmp3
//│ = 0

if s is
  Some(x) then x
  None then 1
//│ = 0

:re
if s is
  Some(1) then 0
  None then 1
//│ ═══[RUNTIME ERROR] Error: match error

if s is
  Some then s.value
//│ = 0


:sjs
x => if x is Some(x) then x
//│ JS:
//│ (x3) => {
//│   let param04, x4, tmp7;
//│   if (x3 instanceof this.Some) {
//│     param04 = x3.value;
//│     x4 = param04;
//│     tmp7 = x4;
//│   } else {
//│     throw new Error("match error")
//│   }
//│   return tmp7
//│ }
//│ = [Function (anonymous)]


// TODO produce simpler code (see: useless bindings)
:sjs
fun f(x) = if x is
  Some(0) then 42
  None then "ok"
  else log("oops")
//│ JS:
//│ function f(x3) {
//│   let param04, tmp7, tmp8, tmp9;
//│   if (x3 instanceof this.Some) {
//│     param04 = x3.value;
//│     if (param04 === 0) {
//│       tmp7 = 42;
//│     } else {
//│       tmp9 = log("oops");
//│       tmp7 = tmp9;
//│     }
//│   } else {
//│     if (x3 === this.None) {
//│       tmp7 = "ok";
//│     } else {
//│       tmp8 = log("oops");
//│       tmp7 = tmp8;
//│     }
//│   }
//│   return tmp7
//│ };
//│ undefined

f(Some(0))
//│ = 42

f(Some(1))
//│ > oops

f(None)
//│ = 'ok'

f(0)
//│ > oops


class Pair[out A, out B](fst: A, snd: B)


:sjs
fun f(x) = if x is
  Some(u) then u
  Pair(a, b) then a + b
//│ JS:
//│ function f(x3) {
//│   let param04, param1, a, b, param05, u, tmp9;
//│   if (x3 instanceof this.Some) {
//│     param05 = x3.value;
//│     u = param05;
//│     tmp9 = u;
//│   } else {
//│     if (x3 instanceof this.Pair) {
//│       param04 = x3.fst;
//│       param1 = x3.snd;
//│       a = param04;
//│       b = param1;
//│       tmp9 = a + b;
//│     } else {
//│       throw new Error("match error")
//│     }
//│   }
//│   return tmp9
//│ };
//│ undefined

f(Some(123))
//│ = 123

f(Pair(10, 5))
//│ = 15


// UCS term not in tail position
:sjs
fun f(x) = log of if x is
  Some(0) then "0"
  None then "ok"
  else "oops"
//│ JS:
//│ function f(x3) {
//│   let param04, tmp11;
//│   if (x3 instanceof this.Some) {
//│     param04 = x3.value;
//│     if (param04 === 0) {
//│       tmp11 = "0";
//│     } else {
//│       tmp11 = "oops";
//│     }
//│   } else {
//│     if (x3 === this.None) {
//│       tmp11 = "ok";
//│     } else {
//│       tmp11 = "oops";
//│     }
//│   }
//│   return log(tmp11)
//│ };
//│ undefined

f(Some(0))
//│ > 0

f(Some(1))
//│ > oops

f(None)
//│ > ok

f(0)
//│ > oops



