:js

:import PredefJS.mls
//│ Imported 2 member(s)


:sjs
class Outer(a, b) with
  class Inner(c) with
    fun i1(d) = [b, c, d]
    log(a)
    log(c)
    log(i1(a))
  fun o1(c) = Inner(c)
  fun o2(c, d) = Inner(c).i1(d)
  val i = Inner(a)
  log(i.c)
  log(i.i1(1))
//│ JS:
//│ this.Outer = function Outer(...args) { return new Outer.class(...args); };
//│ this.Outer.class = class Outer {
//│   constructor(a, b) {
//│     this.a = a;
//│     this.b = b;
//│     let tmp, selRes, tmp1, tmp2, tmp3;
//│     
//│     const this$Outer = this;
//│     this.Inner = function Inner(...args1) { return new Inner.class(...args1); };
//│     this.Inner.class = class Inner {
//│       constructor(c) {
//│         this.c = c;
//│         let tmp4, tmp5, tmp6;
//│         tmp4 = globalThis.log(this$Outer.a);
//│         tmp5 = globalThis.log(this.c);
//│         tmp6 = this.i1(this$Outer.a);
//│         globalThis.log(tmp6)
//│       }
//│       i1(...args) {
//│         globalThis.Predef.checkArgs("i1", 1, true, args.length);
//│         let d = args[0];
//│         return [
//│           this$Outer.b,
//│           this.c,
//│           d
//│         ];
//│       }
//│       toString() { return "Inner(" + this.c + ")"; }
//│     };
//│     tmp = this.Inner(this.a);
//│     this.i = tmp;
//│     selRes = this.i.c;
//│     if (selRes === undefined) {
//│       throw new globalThis.Error("Access to required field 'c' yielded 'undefined'");
//│     } else {
//│       tmp1 = selRes;
//│     }
//│     tmp2 = globalThis.log(tmp1);
//│     tmp3 = this.i.i1(1) ?? null;
//│     globalThis.log(tmp3)
//│   }
//│   o1(...args) {
//│     globalThis.Predef.checkArgs("o1", 1, true, args.length);
//│     let c = args[0];
//│     return this.Inner(c);
//│   } 
//│   o2(...args1) {
//│     globalThis.Predef.checkArgs("o2", 2, true, args1.length);
//│     let c1 = args1[0];
//│     let d = args1[1];
//│     let tmp;
//│     tmp = this.Inner(c1);
//│     return tmp.i1(d) ?? null;
//│   }
//│   toString() { return "Outer(" + this.a + ", " + this.b + ")"; }
//│ };
//│ null


val o = Outer(100, 200)
//│ > 100
//│ > 100
//│ > [ 200, 100, 100 ]
//│ > 100
//│ > [ 200, 100, 1 ]
//│ > Outer {
//│ >   a: 100,
//│ >   b: 200,
//│ >   Inner: [Function: Inner] { class: [class Inner] },
//│ >   i: Inner { c: 100 }
//│ o = }

o.o1(30)
//│ > 100
//│ > 30
//│ > [ 200, 30, 100 ]
//│ = Inner { c: 30 }

o.o2(30, 40)
//│ > 100
//│ > 30
//│ > [ 200, 30, 100 ]
//│ = [ 200, 30, 40 ]

o.i
//│ = Inner { c: 100 }


