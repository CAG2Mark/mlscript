:js

:global
:sjs


let x
//│ JS:
//│ null

x = 1
//│ JS:
//│ this.x = 1; null

x
//│ JS:
//│ this.x
//│ = 1

// TODO forbid redefining a let
x = 2
//│ JS:
//│ this.x = 2; null

x
//│ JS:
//│ this.x
//│ = 2


let y = 1
//│ JS:
//│ this.y = 1; null
//│ y = 1

:e
z = 1
//│ ╔══[ERROR] Name not found: z
//│ ║  l.37: 	z = 1
//│ ╙──      	^
//│ JS:
//│ /* error */


fun f() = 1
//│ JS:
//│ function f(...args) {
//│   globalThis.Predef.checkArgs("f", 0, true, args.length);
//│   return 1;
//│ }
//│ null

f
//│ JS:
//│ this.f
//│ = [Function: f]


let f
f(x) = x + 1
//│ JS:
//│ this.f = (...args) => {
//│   globalThis.Predef.checkArgs("", 1, true, args.length);
//│   let x = args[0];
//│   return x + 1;
//│ };
//│ null
//│ f = [Function (anonymous)]

f(1)
//│ JS:
//│ this.f(1) ?? null
//│ = 2


let foo
foo = 0
//│ JS:
//│ this.foo = 0; null
//│ foo = 0

:fixme
let foo
if true
then foo = 0
else foo = 1
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.85: 	then foo = 0
//│ ╙──      	         ^
//│ JS:
//│ let scrut; scrut = true; if (scrut) { this.foo } else { throw new this.Error("match error"); }
//│ = 0
//│ foo = 0

let foo
if true
then
  foo = 0
else
  foo = 1
//│ JS:
//│ let scrut; scrut = true; if (scrut) { this.foo = 0; null } else { this.foo = 1; null }
//│ foo = 0


fun f() =
  foo = 42
//│ JS:
//│ function f(...args) {
//│   globalThis.Predef.checkArgs("f", 0, true, args.length);
//│   globalThis.foo = 42;
//│   return null;
//│ }
//│ null

f()
//│ JS:
//│ this.f()

foo
//│ JS:
//│ this.foo
//│ = 42


:fixme
fun f() = foo = 0
//│ ╔══[PARSE ERROR] Expected end of input; found '=' keyword instead
//│ ║  l.127: 	fun f() = foo = 0
//│ ╙──       	              ^
//│ JS:
//│ function f(...args) {
//│   globalThis.Predef.checkArgs("f", 0, true, args.length);
//│   return globalThis.foo;
//│ }
//│ null


