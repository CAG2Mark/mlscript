:import ../prelude/List.mls
//│ Imported 4 member(s)

:import ../prelude/Option.mls
//│ Imported 3 member(s)

:global
:!typeCheck
:ucs desugared normalized

class Pair[A, B](x: A, y: B)

fun foo(xs) =
  if xs is
    "abc" :: "xyz" :: xs then 0
    "abc" :: "uvw" :: xs then 1
    Nil then 3
//│ Desugared:
//│ >  if
//│ >    xs@44 is Cons($param0@45, $param1@46) and $param0@45 is "abc" and $param1@46 is Cons($param0@47, $param1@48) and $param0@47 is "xyz" and
//│ >      let xs@50 = $param1@48#1
//│ >      else 0
//│ >    xs@44 is Cons($param0@45, $param1@46) and $param0@45 is "abc" and $param1@46 is Cons($param0@47, $param1@48) and $param0@47 is "uvw" and
//│ >      let xs@49 = $param1@48#0
//│ >      else 1
//│ >    xs@44 is Nil then 3
//│ Normalized:
//│ >  if
//│ >    xs@44 is Cons($param0@45, $param1@46) and $param0@45 is "abc" and $param1@46 is Cons($param0@47, $param1@48) and
//│ >      $param0@47 is "xyz" and
//│ >        let xs@50 = $param1@48#1
//│ >        else 0
//│ >      $param0@47 is "uvw" and
//│ >        let xs@49 = $param1@48#0
//│ >        else 1
//│ >    xs@44 is Nil then 3

fun sum(acc, xs) = 
  if xs is
    x :: xs then sum(acc + x, xs)
    Nil     then acc
//│ Desugared:
//│ >  if
//│ >    xs@54 is Cons($param0@55, $param1@56) and
//│ >      let x@57 = $param0@55#0
//│ >      let xs@58 = $param1@56#0
//│ >      else globalThis:blockNme.sum#0(.+#0(acc@53#1, x@57#0), xs@58#0)
//│ >    xs@54 is Nil then acc@53#0
//│ Normalized:
//│ >  if
//│ >    xs@54 is Cons($param0@55, $param1@56) and
//│ >      let x@57 = $param0@55#0
//│ >      let xs@58 = $param1@56#0
//│ >      else globalThis:blockNme.sum#0(.+#0(acc@53#1, x@57#0), xs@58#0)
//│ >    xs@54 is Nil then acc@53#0

:todo
// The normalization does not distinguish between bindings and their aliases.
// We may still need to substitute variables when merging branches or reuse
// bindings at the same location. 
fun test(xs) =
  if xs is
    Some(Cons("add", Cons(x, Cons(y, Nil)))) then x + y
    Some(Cons("mul", Cons(x, Cons(y, Nil)))) then x * y
    Some(Cons("sum", xs)) then sum(0, xs)
    Some(Nil) then "nothing"
    None then "nothing"
//│ Desugared:
//│ >  if
//│ >    xs@63 is Some($param0@64) and $param0@64 is Cons($param0@65, $param1@66) and $param0@65 is "add" and $param1@66 is Cons($param0@69, $param1@70) and
//│ >      let x@76 = $param0@69#1
//│ >      $param1@70 is Cons($param0@72, $param1@73) and
//│ >        let y@77 = $param0@72#1
//│ >        $param1@73 is Nil then .+#1(x@76#0, y@77#0)
//│ >    xs@63 is Some($param0@64) and $param0@64 is Cons($param0@65, $param1@66) and $param0@65 is "mul" and $param1@66 is Cons($param0@69, $param1@70) and
//│ >      let x@71 = $param0@69#0
//│ >      $param1@70 is Cons($param0@72, $param1@73) and
//│ >        let y@74 = $param0@72#0
//│ >        $param1@73 is Nil then .*#0(x@71#0, y@74#0)
//│ >    xs@63 is Some($param0@64) and $param0@64 is Cons($param0@65, $param1@66) and $param0@65 is "sum" and
//│ >      let xs@67 = $param1@66#0
//│ >      else globalThis:blockNme.sum#1(0, xs@67#0)
//│ >    xs@63 is Some($param0@64) $param0@64 is Nil then "nothing"
//│ >    xs@63 is None then "nothing"
//│ Normalized:
//│ >  if
//│ >    xs@63 is Some($param0@64) and
//│ >      $param0@64 is Cons($param0@65, $param1@66) and
//│ >        $param0@65 is "add" and $param1@66 is Cons($param0@69, $param1@70) and
//│ >          let x@76 = $param0@69#1
//│ >          $param1@70 is Cons($param0@72, $param1@73) and
//│ >            let y@77 = $param0@72#1
//│ >            $param1@73 is Nil then .+#1(x@76#0, y@77#0)
//│ >        $param0@65 is "mul" and $param1@66 is Cons($param0@69, $param1@70) and
//│ >          let x@71 = $param0@69#0
//│ >          $param1@70 is Cons($param0@72, $param1@73) and
//│ >            let y@74 = $param0@72#0
//│ >            $param1@73 is Nil then .*#0(x@71#0, y@74#0)
//│ >        $param0@65 is "sum" and
//│ >          let xs@67 = $param1@66#0
//│ >          else globalThis:blockNme.sum#1(0, xs@67#0)
//│ >      $param0@64 is Nil then "nothing"
//│ >    xs@63 is None then "nothing"
