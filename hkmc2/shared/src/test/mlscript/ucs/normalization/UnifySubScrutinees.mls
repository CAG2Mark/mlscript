:import ../prelude/List.mls
//│ Imported 26 members

:import ../prelude/Option.mls
//│ Imported 29 members

:global
:noTypeCheck
:ucs desugared normalized

class Pair[A, B](x: A, y: B)

fun foo(xs) =
  if xs is
    "abc" :: "xyz" :: xs then 0
    "abc" :: "uvw" :: xs then 1
    Nil then 3
//│ Desugared:
//│ if
//│   xs@32 is Cons(param0@33, param1@34) and param0@33 is "abc" and param1@34 is Cons(param0@35, param1@36) and param0@35 is "xyz" and
//│     let xs@38 = param1@36#1
//│     else 0
//│   xs@32 is Cons(param0@33, param1@34) and param0@33 is "abc" and param1@34 is Cons(param0@35, param1@36) and param0@35 is "uvw" and
//│     let xs@37 = param1@36#0
//│     else 1
//│   xs@32 is Nil then 3
//│ Normalized:
//│ if
//│   xs@32 is Cons(param0@33, param1@34) and param0@33 is "abc" and param1@34 is Cons(param0@35, param1@36) and
//│     param0@35 is "xyz" and
//│       let xs@38 = param1@36#1
//│       else 0
//│     param0@35 is "uvw" and
//│       let xs@37 = param1@36#0
//│       else 1
//│   xs@32 is Nil then 3

fun sum(acc, xs) = 
  if xs is
    x :: xs then sum(acc + x, xs)
    Nil     then acc
//│ Desugared:
//│ if
//│   xs@42 is Cons(param0@43, param1@44) and
//│     let x@45 = param0@43#0
//│     let xs@46 = param1@44#0
//│     else sum#0(+#0(acc@41#1, x@45#0), xs@46#0)
//│   xs@42 is Nil then acc@41#0
//│ Normalized:
//│ if
//│   xs@42 is Cons(param0@43, param1@44) and
//│     let x@45 = param0@43#0
//│     let xs@46 = param1@44#0
//│     else sum#0(+#0(acc@41#1, x@45#0), xs@46#0)
//│   xs@42 is Nil then acc@41#0

:todo
// The normalization does not distinguish between bindings and their aliases.
// We may still need to substitute variables when merging branches or reuse
// bindings at the same location. 
fun test(xs) =
  if xs is
    Some(Cons("add", Cons(x, Cons(y, Nil)))) then x + y
    Some(Cons("mul", Cons(x, Cons(y, Nil)))) then x * y
    Some(Cons("sum", xs)) then sum(0, xs)
    Some(Nil) then "nothing"
    None then "nothing"
//│ Desugared:
//│ if
//│   xs@51 is Some(param0@52) and param0@52 is Cons(param0@53, param1@54) and param0@53 is "add" and param1@54 is Cons(param0@57, param1@58) and
//│     let x@64 = param0@57#1
//│     param1@58 is Cons(param0@60, param1@61) and
//│       let y@65 = param0@60#1
//│       param1@61 is Nil then +#1(x@64#0, y@65#0)
//│   xs@51 is Some(param0@52) and param0@52 is Cons(param0@53, param1@54) and param0@53 is "mul" and param1@54 is Cons(param0@57, param1@58) and
//│     let x@59 = param0@57#0
//│     param1@58 is Cons(param0@60, param1@61) and
//│       let y@62 = param0@60#0
//│       param1@61 is Nil then *#0(x@59#0, y@62#0)
//│   xs@51 is Some(param0@52) and param0@52 is Cons(param0@53, param1@54) and param0@53 is "sum" and
//│     let xs@55 = param1@54#0
//│     else sum#1(0, xs@55#0)
//│   xs@51 is Some(param0@52) param0@52 is Nil then "nothing"
//│   xs@51 is None then "nothing"
//│ Normalized:
//│ if
//│   xs@51 is Some(param0@52) and
//│     param0@52 is Cons(param0@53, param1@54) and
//│       param0@53 is "add" and param1@54 is Cons(param0@57, param1@58) and
//│         let x@64 = param0@57#1
//│         param1@58 is Cons(param0@60, param1@61) and
//│           let y@65 = param0@60#1
//│           param1@61 is Nil then +#1(x@64#0, y@65#0)
//│       param0@53 is "mul" and param1@54 is Cons(param0@57, param1@58) and
//│         let x@59 = param0@57#0
//│         param1@58 is Cons(param0@60, param1@61) and
//│           let y@62 = param0@60#0
//│           param1@61 is Nil then *#0(x@59#0, y@62#0)
//│       param0@53 is "sum" and
//│         let xs@55 = param1@54#0
//│         else sum#1(0, xs@55#0)
//│     param0@52 is Nil then "nothing"
//│   xs@51 is None then "nothing"
