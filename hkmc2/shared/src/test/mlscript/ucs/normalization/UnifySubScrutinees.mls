:import ../prelude/List.mls
//│ Imported 4 member(s)

:import ../prelude/Option.mls
//│ Imported 3 member(s)

:global
:!typeCheck
:ucs desugared normalized

class Pair[A, B](x: A, y: B)

fun foo(xs) =
  if xs is
    "abc" :: "xyz" :: xs then 0
    "abc" :: "uvw" :: xs then 1
    Nil then 3
//│ Desugared:
//│ >  if
//│ >    xs@34 is Cons($param0@35, $param1@36) and $param0@35 is "abc" and $param1@36 is Cons($param0@37, $param1@38) and $param0@37 is "xyz" and
//│ >      let xs@40 = $param1@38#1
//│ >      else 0
//│ >    xs@34 is Cons($param0@35, $param1@36) and $param0@35 is "abc" and $param1@36 is Cons($param0@37, $param1@38) and $param0@37 is "uvw" and
//│ >      let xs@39 = $param1@38#0
//│ >      else 1
//│ >    xs@34 is Nil then 3
//│ Normalized:
//│ >  if
//│ >    xs@34 is Cons($param0@35, $param1@36) and $param0@35 is "abc" and $param1@36 is Cons($param0@37, $param1@38) and
//│ >      $param0@37 is "xyz" and
//│ >        let xs@40 = $param1@38#1
//│ >        else 0
//│ >      $param0@37 is "uvw" and
//│ >        let xs@39 = $param1@38#0
//│ >        else 1
//│ >    xs@34 is Nil then 3

fun sum(acc, xs) = 
  if xs is
    x :: xs then sum(acc + x, xs)
    Nil     then acc
//│ Desugared:
//│ >  if
//│ >    xs@44 is Cons($param0@45, $param1@46) and
//│ >      let x@47 = $param0@45#0
//│ >      let xs@48 = $param1@46#0
//│ >      else globalThis:blockNme.sum#0(.+#0(acc@43#1, x@47#0), xs@48#0)
//│ >    xs@44 is Nil then acc@43#0
//│ Normalized:
//│ >  if
//│ >    xs@44 is Cons($param0@45, $param1@46) and
//│ >      let x@47 = $param0@45#0
//│ >      let xs@48 = $param1@46#0
//│ >      else globalThis:blockNme.sum#0(.+#0(acc@43#1, x@47#0), xs@48#0)
//│ >    xs@44 is Nil then acc@43#0

:todo
// The normalization does not distinguish between bindings and their aliases.
// We may still need to substitute variables when merging branches or reuse
// bindings at the same location. 
fun test(xs) =
  if xs is
    Some(Cons("add", Cons(x, Cons(y, Nil)))) then x + y
    Some(Cons("mul", Cons(x, Cons(y, Nil)))) then x * y
    Some(Cons("sum", xs)) then sum(0, xs)
    Some(Nil) then "nothing"
    None then "nothing"
//│ Desugared:
//│ >  if
//│ >    xs@53 is Some($param0@54) and $param0@54 is Cons($param0@55, $param1@56) and $param0@55 is "add" and $param1@56 is Cons($param0@59, $param1@60) and
//│ >      let x@66 = $param0@59#1
//│ >      $param1@60 is Cons($param0@62, $param1@63) and
//│ >        let y@67 = $param0@62#1
//│ >        $param1@63 is Nil then .+#1(x@66#0, y@67#0)
//│ >    xs@53 is Some($param0@54) and $param0@54 is Cons($param0@55, $param1@56) and $param0@55 is "mul" and $param1@56 is Cons($param0@59, $param1@60) and
//│ >      let x@61 = $param0@59#0
//│ >      $param1@60 is Cons($param0@62, $param1@63) and
//│ >        let y@64 = $param0@62#0
//│ >        $param1@63 is Nil then .*#0(x@61#0, y@64#0)
//│ >    xs@53 is Some($param0@54) and $param0@54 is Cons($param0@55, $param1@56) and $param0@55 is "sum" and
//│ >      let xs@57 = $param1@56#0
//│ >      else globalThis:blockNme.sum#1(0, xs@57#0)
//│ >    xs@53 is Some($param0@54) $param0@54 is Nil then "nothing"
//│ >    xs@53 is None then "nothing"
//│ Normalized:
//│ >  if
//│ >    xs@53 is Some($param0@54) and
//│ >      $param0@54 is Cons($param0@55, $param1@56) and
//│ >        $param0@55 is "add" and $param1@56 is Cons($param0@59, $param1@60) and
//│ >          let x@66 = $param0@59#1
//│ >          $param1@60 is Cons($param0@62, $param1@63) and
//│ >            let y@67 = $param0@62#1
//│ >            $param1@63 is Nil then .+#1(x@66#0, y@67#0)
//│ >        $param0@55 is "mul" and $param1@56 is Cons($param0@59, $param1@60) and
//│ >          let x@61 = $param0@59#0
//│ >          $param1@60 is Cons($param0@62, $param1@63) and
//│ >            let y@64 = $param0@62#0
//│ >            $param1@63 is Nil then .*#0(x@61#0, y@64#0)
//│ >        $param0@55 is "sum" and
//│ >          let xs@57 = $param1@56#0
//│ >          else globalThis:blockNme.sum#1(0, xs@57#0)
//│ >      $param0@54 is Nil then "nothing"
//│ >    xs@53 is None then "nothing"
