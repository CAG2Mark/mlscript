:import ../prelude/List.mls
//│ Imported 4 member(s)

:import ../prelude/Option.mls
//│ Imported 3 member(s)

:global
:ucs desugared normalized

class Pair[A, B](x: A, y: B)

fun foo(xs) =
  if xs is
    "abc" :: "xyz" :: xs then 0
    "abc" :: "uvw" :: xs then 1
    Nil then 3
//│ Desugared:
//│ >  if
//│ >    xs@38 is Cons($param0@39, $param1@40) and $param0@39 is "abc" and $param1@40 is Cons($param0@41, $param1@42) and $param0@41 is "xyz" and
//│ >      let xs@44 = $param1@42#1
//│ >      else 0
//│ >    xs@38 is Cons($param0@39, $param1@40) and $param0@39 is "abc" and $param1@40 is Cons($param0@41, $param1@42) and $param0@41 is "uvw" and
//│ >      let xs@43 = $param1@42#0
//│ >      else 1
//│ >    xs@38 is Nil then 3
//│ Normalized:
//│ >  if
//│ >    xs@38 is Cons($param0@39, $param1@40) and $param0@39 is "abc" and $param1@40 is Cons($param0@41, $param1@42) and
//│ >      $param0@41 is "xyz" and
//│ >        let xs@44 = $param1@42#1
//│ >        else 0
//│ >      $param0@41 is "uvw" and
//│ >        let xs@43 = $param1@42#0
//│ >        else 1
//│ >    xs@38 is Nil then 3

fun sum(acc, xs) = 
  if xs is
    x :: xs then sum(acc + x, xs)
    Nil     then acc
//│ Desugared:
//│ >  if
//│ >    xs@48 is Cons($param0@49, $param1@50) and
//│ >      let x@51 = $param0@49#0
//│ >      let xs@52 = $param1@50#0
//│ >      else globalThis:block#3#666.sum‹member:sum›(globalThis:import#Prelude#666.+‹member:+›(acc@47#666, x@51#666), xs@52#666)
//│ >    xs@48 is Nil then acc@47#666
//│ Normalized:
//│ >  if
//│ >    xs@48 is Cons($param0@49, $param1@50) and
//│ >      let x@51 = $param0@49#0
//│ >      let xs@52 = $param1@50#0
//│ >      else globalThis:block#3#666.sum‹member:sum›(globalThis:import#Prelude#666.+‹member:+›(acc@47#666, x@51#666), xs@52#666)
//│ >    xs@48 is Nil then acc@47#666

:todo
// The normalization does not distinguish between bindings and their aliases.
// We may still need to substitute variables when merging branches or reuse
// bindings at the same location. 
fun test(xs) =
  if xs is
    Some(Cons("add", Cons(x, Cons(y, Nil)))) then x + y
    Some(Cons("mul", Cons(x, Cons(y, Nil)))) then x * y
    Some(Cons("sum", xs)) then sum(0, xs)
    Some(Nil) then "nothing"
    None then "nothing"
//│ Desugared:
//│ >  if
//│ >    xs@57 is Some($param0@58) and $param0@58 is Cons($param0@59, $param1@60) and $param0@59 is "add" and $param1@60 is Cons($param0@63, $param1@64) and
//│ >      let x@70 = $param0@63#1
//│ >      $param1@64 is Cons($param0@66, $param1@67) and
//│ >        let y@71 = $param0@66#1
//│ >        $param1@67 is Nil then globalThis:import#Prelude#666.+‹member:+›(x@70#666, y@71#666)
//│ >    xs@57 is Some($param0@58) and $param0@58 is Cons($param0@59, $param1@60) and $param0@59 is "mul" and $param1@60 is Cons($param0@63, $param1@64) and
//│ >      let x@65 = $param0@63#0
//│ >      $param1@64 is Cons($param0@66, $param1@67) and
//│ >        let y@68 = $param0@66#0
//│ >        $param1@67 is Nil then globalThis:import#Prelude#666.*‹member:*›(x@65#666, y@68#666)
//│ >    xs@57 is Some($param0@58) and $param0@58 is Cons($param0@59, $param1@60) and $param0@59 is "sum" and
//│ >      let xs@61 = $param1@60#0
//│ >      else globalThis:block#3#666.sum‹member:sum›(0, xs@61#666)
//│ >    xs@57 is Some($param0@58) $param0@58 is Nil then "nothing"
//│ >    xs@57 is None then "nothing"
//│ Normalized:
//│ >  if
//│ >    xs@57 is Some($param0@58) and
//│ >      $param0@58 is Cons($param0@59, $param1@60) and
//│ >        $param0@59 is "add" and $param1@60 is Cons($param0@63, $param1@64) and
//│ >          let x@70 = $param0@63#1
//│ >          $param1@64 is Cons($param0@66, $param1@67) and
//│ >            let y@71 = $param0@66#1
//│ >            $param1@67 is Nil then globalThis:import#Prelude#666.+‹member:+›(x@70#666, y@71#666)
//│ >        $param0@59 is "mul" and $param1@60 is Cons($param0@63, $param1@64) and
//│ >          let x@65 = $param0@63#0
//│ >          $param1@64 is Cons($param0@66, $param1@67) and
//│ >            let y@68 = $param0@66#0
//│ >            $param1@67 is Nil then globalThis:import#Prelude#666.*‹member:*›(x@65#666, y@68#666)
//│ >        $param0@59 is "sum" and
//│ >          let xs@61 = $param1@60#0
//│ >          else globalThis:block#3#666.sum‹member:sum›(0, xs@61#666)
//│ >      $param0@58 is Nil then "nothing"
//│ >    xs@57 is None then "nothing"
