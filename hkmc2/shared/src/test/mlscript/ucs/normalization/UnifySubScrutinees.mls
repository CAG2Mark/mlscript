:import ../prelude/List.mls
//│ Imported 4 member(s)

:import ../prelude/Option.mls
//│ Imported 3 member(s)

:global
:!typeCheck
:ucs desugared normalized

class Pair[A, B](x: A, y: B)

fun foo(xs) =
  if xs is
    "abc" :: "xyz" :: xs then 0
    "abc" :: "uvw" :: xs then 1
    Nil then 3
//│ Desugared:
//│ >  if
//│ >    xs@42 is Cons($param0@43, $param1@44) and $param0@43 is "abc" and $param1@44 is Cons($param0@45, $param1@46) and $param0@45 is "xyz" and
//│ >      let xs@48 = $param1@46#1
//│ >      else 0
//│ >    xs@42 is Cons($param0@43, $param1@44) and $param0@43 is "abc" and $param1@44 is Cons($param0@45, $param1@46) and $param0@45 is "uvw" and
//│ >      let xs@47 = $param1@46#0
//│ >      else 1
//│ >    xs@42 is Nil then 3
//│ Normalized:
//│ >  if
//│ >    xs@42 is Cons($param0@43, $param1@44) and $param0@43 is "abc" and $param1@44 is Cons($param0@45, $param1@46) and
//│ >      $param0@45 is "xyz" and
//│ >        let xs@48 = $param1@46#1
//│ >        else 0
//│ >      $param0@45 is "uvw" and
//│ >        let xs@47 = $param1@46#0
//│ >        else 1
//│ >    xs@42 is Nil then 3

fun sum(acc, xs) = 
  if xs is
    x :: xs then sum(acc + x, xs)
    Nil     then acc
//│ Desugared:
//│ >  if
//│ >    xs@52 is Cons($param0@53, $param1@54) and
//│ >      let x@55 = $param0@53#0
//│ >      let xs@56 = $param1@54#0
//│ >      else globalThis:block#2.sum#0(.+#0(acc@51#1, x@55#0), xs@56#0)
//│ >    xs@52 is Nil then acc@51#0
//│ Normalized:
//│ >  if
//│ >    xs@52 is Cons($param0@53, $param1@54) and
//│ >      let x@55 = $param0@53#0
//│ >      let xs@56 = $param1@54#0
//│ >      else globalThis:block#2.sum#0(.+#0(acc@51#1, x@55#0), xs@56#0)
//│ >    xs@52 is Nil then acc@51#0

:todo
// The normalization does not distinguish between bindings and their aliases.
// We may still need to substitute variables when merging branches or reuse
// bindings at the same location. 
fun test(xs) =
  if xs is
    Some(Cons("add", Cons(x, Cons(y, Nil)))) then x + y
    Some(Cons("mul", Cons(x, Cons(y, Nil)))) then x * y
    Some(Cons("sum", xs)) then sum(0, xs)
    Some(Nil) then "nothing"
    None then "nothing"
//│ Desugared:
//│ >  if
//│ >    xs@61 is Some($param0@62) and $param0@62 is Cons($param0@63, $param1@64) and $param0@63 is "add" and $param1@64 is Cons($param0@67, $param1@68) and
//│ >      let x@74 = $param0@67#1
//│ >      $param1@68 is Cons($param0@70, $param1@71) and
//│ >        let y@75 = $param0@70#1
//│ >        $param1@71 is Nil then .+#1(x@74#0, y@75#0)
//│ >    xs@61 is Some($param0@62) and $param0@62 is Cons($param0@63, $param1@64) and $param0@63 is "mul" and $param1@64 is Cons($param0@67, $param1@68) and
//│ >      let x@69 = $param0@67#0
//│ >      $param1@68 is Cons($param0@70, $param1@71) and
//│ >        let y@72 = $param0@70#0
//│ >        $param1@71 is Nil then .*#0(x@69#0, y@72#0)
//│ >    xs@61 is Some($param0@62) and $param0@62 is Cons($param0@63, $param1@64) and $param0@63 is "sum" and
//│ >      let xs@65 = $param1@64#0
//│ >      else globalThis:block#2.sum#1(0, xs@65#0)
//│ >    xs@61 is Some($param0@62) $param0@62 is Nil then "nothing"
//│ >    xs@61 is None then "nothing"
//│ Normalized:
//│ >  if
//│ >    xs@61 is Some($param0@62) and
//│ >      $param0@62 is Cons($param0@63, $param1@64) and
//│ >        $param0@63 is "add" and $param1@64 is Cons($param0@67, $param1@68) and
//│ >          let x@74 = $param0@67#1
//│ >          $param1@68 is Cons($param0@70, $param1@71) and
//│ >            let y@75 = $param0@70#1
//│ >            $param1@71 is Nil then .+#1(x@74#0, y@75#0)
//│ >        $param0@63 is "mul" and $param1@64 is Cons($param0@67, $param1@68) and
//│ >          let x@69 = $param0@67#0
//│ >          $param1@68 is Cons($param0@70, $param1@71) and
//│ >            let y@72 = $param0@70#0
//│ >            $param1@71 is Nil then .*#0(x@69#0, y@72#0)
//│ >        $param0@63 is "sum" and
//│ >          let xs@65 = $param1@64#0
//│ >          else globalThis:block#2.sum#1(0, xs@65#0)
//│ >      $param0@62 is Nil then "nothing"
//│ >    xs@61 is None then "nothing"
