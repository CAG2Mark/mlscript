:import ../prelude/List.mls
//│ Imported 4 member(s)

:import ../prelude/Option.mls
//│ Imported 3 member(s)

:global
:ucs desugared normalized

class Pair[A, B](x: A, y: B)

fun foo(xs) =
  if xs is
    "abc" :: "xyz" :: xs then 0
    "abc" :: "uvw" :: xs then 1
    Nil then 3
//│ Desugared:
//│ >  if
//│ >    xs@37 is Cons($param0@38, $param1@39) and $param0@38 is "abc" and $param1@39 is Cons($param0@40, $param1@41) and $param0@40 is "xyz" and
//│ >      let xs@43 = $param1@41#1
//│ >      else 0
//│ >    xs@37 is Cons($param0@38, $param1@39) and $param0@38 is "abc" and $param1@39 is Cons($param0@40, $param1@41) and $param0@40 is "uvw" and
//│ >      let xs@42 = $param1@41#0
//│ >      else 1
//│ >    xs@37 is Nil then 3
//│ Normalized:
//│ >  if
//│ >    xs@37 is Cons($param0@38, $param1@39) and $param0@38 is "abc" and $param1@39 is Cons($param0@40, $param1@41) and
//│ >      $param0@40 is "xyz" and
//│ >        let xs@43 = $param1@41#1
//│ >        else 0
//│ >      $param0@40 is "uvw" and
//│ >        let xs@42 = $param1@41#0
//│ >        else 1
//│ >    xs@37 is Nil then 3

fun sum(acc, xs) = 
  if xs is
    x :: xs then sum(acc + x, xs)
    Nil     then acc
//│ Desugared:
//│ >  if
//│ >    xs@47 is Cons($param0@48, $param1@49) and
//│ >      let x@50 = $param0@48#0
//│ >      let xs@51 = $param1@49#0
//│ >      else globalThis:block#2.this#666.sum‹member:sum›(globalThis:import#Predef#666.+‹member:+›(acc@46#666, x@50#666), xs@51#666)
//│ >    xs@47 is Nil then acc@46#666
//│ Normalized:
//│ >  if
//│ >    xs@47 is Cons($param0@48, $param1@49) and
//│ >      let x@50 = $param0@48#0
//│ >      let xs@51 = $param1@49#0
//│ >      else globalThis:block#2.this#666.sum‹member:sum›(globalThis:import#Predef#666.+‹member:+›(acc@46#666, x@50#666), xs@51#666)
//│ >    xs@47 is Nil then acc@46#666

:todo
// The normalization does not distinguish between bindings and their aliases.
// We may still need to substitute variables when merging branches or reuse
// bindings at the same location. 
fun test(xs) =
  if xs is
    Some(Cons("add", Cons(x, Cons(y, Nil)))) then x + y
    Some(Cons("mul", Cons(x, Cons(y, Nil)))) then x * y
    Some(Cons("sum", xs)) then sum(0, xs)
    Some(Nil) then "nothing"
    None then "nothing"
//│ Desugared:
//│ >  if
//│ >    xs@56 is Some($param0@57) and $param0@57 is Cons($param0@58, $param1@59) and $param0@58 is "add" and $param1@59 is Cons($param0@62, $param1@63) and
//│ >      let x@69 = $param0@62#1
//│ >      $param1@63 is Cons($param0@65, $param1@66) and
//│ >        let y@70 = $param0@65#1
//│ >        $param1@66 is Nil then globalThis:import#Predef#666.+‹member:+›(x@69#666, y@70#666)
//│ >    xs@56 is Some($param0@57) and $param0@57 is Cons($param0@58, $param1@59) and $param0@58 is "mul" and $param1@59 is Cons($param0@62, $param1@63) and
//│ >      let x@64 = $param0@62#0
//│ >      $param1@63 is Cons($param0@65, $param1@66) and
//│ >        let y@67 = $param0@65#0
//│ >        $param1@66 is Nil then globalThis:import#Predef#666.*‹member:*›(x@64#666, y@67#666)
//│ >    xs@56 is Some($param0@57) and $param0@57 is Cons($param0@58, $param1@59) and $param0@58 is "sum" and
//│ >      let xs@60 = $param1@59#0
//│ >      else globalThis:block#2.this#666.sum‹member:sum›(0, xs@60#666)
//│ >    xs@56 is Some($param0@57) $param0@57 is Nil then "nothing"
//│ >    xs@56 is None then "nothing"
//│ Normalized:
//│ >  if
//│ >    xs@56 is Some($param0@57) and
//│ >      $param0@57 is Cons($param0@58, $param1@59) and
//│ >        $param0@58 is "add" and $param1@59 is Cons($param0@62, $param1@63) and
//│ >          let x@69 = $param0@62#1
//│ >          $param1@63 is Cons($param0@65, $param1@66) and
//│ >            let y@70 = $param0@65#1
//│ >            $param1@66 is Nil then globalThis:import#Predef#666.+‹member:+›(x@69#666, y@70#666)
//│ >        $param0@58 is "mul" and $param1@59 is Cons($param0@62, $param1@63) and
//│ >          let x@64 = $param0@62#0
//│ >          $param1@63 is Cons($param0@65, $param1@66) and
//│ >            let y@67 = $param0@65#0
//│ >            $param1@66 is Nil then globalThis:import#Predef#666.*‹member:*›(x@64#666, y@67#666)
//│ >        $param0@58 is "sum" and
//│ >          let xs@60 = $param1@59#0
//│ >          else globalThis:block#2.this#666.sum‹member:sum›(0, xs@60#666)
//│ >      $param0@57 is Nil then "nothing"
//│ >    xs@56 is None then "nothing"
