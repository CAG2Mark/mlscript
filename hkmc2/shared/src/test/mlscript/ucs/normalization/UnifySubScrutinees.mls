:import ../prelude/List.mls
//│ Imported 4 member(s)

:import ../prelude/Option.mls
//│ Imported 3 member(s)

:global
:ucs desugared normalized

class Pair[A, B](x: A, y: B)

fun foo(xs) =
  if xs is
    "abc" :: "xyz" :: xs then 0
    "abc" :: "uvw" :: xs then 1
    Nil then 3
//│ Desugared:
//│ >  if
//│ >    xs@20 is Cons($param0@21, $param1@22) and $param0@21 is "abc" and $param1@22 is Cons($param0@23, $param1@24) and $param0@23 is "xyz" and
//│ >      let xs@26 = $param1@24#1
//│ >      else 0
//│ >    xs@20 is Cons($param0@21, $param1@22) and $param0@21 is "abc" and $param1@22 is Cons($param0@23, $param1@24) and $param0@23 is "uvw" and
//│ >      let xs@25 = $param1@24#0
//│ >      else 1
//│ >    xs@20 is Nil then 3
//│ Normalized:
//│ >  if
//│ >    xs@20 is Cons($param0@21, $param1@22) and $param0@21 is "abc" and $param1@22 is Cons($param0@23, $param1@24) and
//│ >      $param0@23 is "xyz" and
//│ >        let xs@26 = $param1@24#1
//│ >        else 0
//│ >      $param0@23 is "uvw" and
//│ >        let xs@25 = $param1@24#0
//│ >        else 1
//│ >    xs@20 is Nil then 3

fun sum(acc, xs) = 
  if xs is
    x :: xs then sum(acc + x, xs)
    Nil     then acc
//│ Desugared:
//│ >  if
//│ >    xs@30 is Cons($param0@31, $param1@32) and
//│ >      let x@33 = $param0@31#0
//│ >      let xs@34 = $param1@32#0
//│ >      else globalThis:block#3#666.sum‹member:sum›(builtin:+#87(acc@29#666, x@33#666), xs@34#666)
//│ >    xs@30 is Nil then acc@29#666
//│ Normalized:
//│ >  if
//│ >    xs@30 is Cons($param0@31, $param1@32) and
//│ >      let x@33 = $param0@31#0
//│ >      let xs@34 = $param1@32#0
//│ >      else globalThis:block#3#666.sum‹member:sum›(builtin:+#87(acc@29#666, x@33#666), xs@34#666)
//│ >    xs@30 is Nil then acc@29#666

:todo
// The normalization does not distinguish between bindings and their aliases.
// We may still need to substitute variables when merging branches or reuse
// bindings at the same location. 
fun test(xs) =
  if xs is
    Some(Cons("add", Cons(x, Cons(y, Nil)))) then x + y
    Some(Cons("mul", Cons(x, Cons(y, Nil)))) then x * y
    Some(Cons("sum", xs)) then sum(0, xs)
    Some(Nil) then "nothing"
    None then "nothing"
//│ Desugared:
//│ >  if
//│ >    xs@39 is Some($param0@40) and $param0@40 is Cons($param0@41, $param1@42) and $param0@41 is "add" and $param1@42 is Cons($param0@45, $param1@46) and
//│ >      let x@52 = $param0@45#1
//│ >      $param1@46 is Cons($param0@48, $param1@49) and
//│ >        let y@53 = $param0@48#1
//│ >        $param1@49 is Nil then builtin:+#88(x@52#666, y@53#666)
//│ >    xs@39 is Some($param0@40) and $param0@40 is Cons($param0@41, $param1@42) and $param0@41 is "mul" and $param1@42 is Cons($param0@45, $param1@46) and
//│ >      let x@47 = $param0@45#0
//│ >      $param1@46 is Cons($param0@48, $param1@49) and
//│ >        let y@50 = $param0@48#0
//│ >        $param1@49 is Nil then builtin:*#26(x@47#666, y@50#666)
//│ >    xs@39 is Some($param0@40) and $param0@40 is Cons($param0@41, $param1@42) and $param0@41 is "sum" and
//│ >      let xs@43 = $param1@42#0
//│ >      else globalThis:block#3#666.sum‹member:sum›(0, xs@43#666)
//│ >    xs@39 is Some($param0@40) $param0@40 is Nil then "nothing"
//│ >    xs@39 is None then "nothing"
//│ Normalized:
//│ >  if
//│ >    xs@39 is Some($param0@40) and
//│ >      $param0@40 is Cons($param0@41, $param1@42) and
//│ >        $param0@41 is "add" and $param1@42 is Cons($param0@45, $param1@46) and
//│ >          let x@52 = $param0@45#1
//│ >          $param1@46 is Cons($param0@48, $param1@49) and
//│ >            let y@53 = $param0@48#1
//│ >            $param1@49 is Nil then builtin:+#88(x@52#666, y@53#666)
//│ >        $param0@41 is "mul" and $param1@42 is Cons($param0@45, $param1@46) and
//│ >          let x@47 = $param0@45#0
//│ >          $param1@46 is Cons($param0@48, $param1@49) and
//│ >            let y@50 = $param0@48#0
//│ >            $param1@49 is Nil then builtin:*#26(x@47#666, y@50#666)
//│ >        $param0@41 is "sum" and
//│ >          let xs@43 = $param1@42#0
//│ >          else globalThis:block#3#666.sum‹member:sum›(0, xs@43#666)
//│ >      $param0@40 is Nil then "nothing"
//│ >    xs@39 is None then "nothing"
