:global
:ucs desugared

fun test(x, p) = if x is
  Int and p(x) then "foo"
  0 then "bar"
  else "qax"
//│ Desugared:
//│ >  if
//│ >    x@24 is Int and
//│ >      let $scrut@27 = p@25#0(x@24#3)
//│ >      $scrut@27 is true then "foo"
//│ >    x@24 is 0 then "bar"
//│ >    else "qax"

fun test(x, p) = if x is
  Str and p(x) then "foo"
  "lol" then "bar"
  else "qax"
//│ Desugared:
//│ >  if
//│ >    x@30 is Str and
//│ >      let $scrut@33 = p@31#0(x@30#3)
//│ >      $scrut@33 is true then "foo"
//│ >    x@30 is "lol" then "bar"
//│ >    else "qax"

test(0, _ => true)

:todo // handle overlapping branches
fun test(x, p) = if x is
  Num and p(x) then "great"
  2.71828 then "E"
  3.14159 then "PI"
  else "other"
//│ Desugared:
//│ >  if
//│ >    x@39 is Num and
//│ >      let $scrut@42 = p@40#0(x@39#4)
//│ >      $scrut@42 is true then "great"
//│ >    x@39 is 2.71828 then "E"
//│ >    x@39 is 3.14159 then "PI"
//│ >    else "other"

fun test(x, p) = if x is
  Bool and p(x) then "great"
  true then "false"
  false then "true"
//│ Desugared:
//│ >  if
//│ >    x@45 is Bool and
//│ >      let $scrut@48 = p@46#0(x@45#4)
//│ >      $scrut@48 is true then "great"
//│ >    x@45 is true then "false"
//│ >    x@45 is false then "true"

fun test(x, p) = if x is
  Object and p(x) then "great"
  Bool and p(x) then "great, again"
  true then "false"
  false then "true"
//│ Desugared:
//│ >  if
//│ >    let Object@55 = x@51#5
//│ >    let $scrut@57 = p@52#1(x@51#6)
//│ >    $scrut@57 is true then "great"
//│ >    x@51 is Bool and
//│ >      let $scrut@54 = p@52#0(x@51#4)
//│ >      $scrut@54 is true then "great, again"
//│ >    x@51 is true then "false"
//│ >    x@51 is false then "true"
