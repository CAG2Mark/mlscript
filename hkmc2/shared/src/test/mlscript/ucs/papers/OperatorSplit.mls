

fun foo: Any -> Bool
fun (|>) pipe(x, f) = f(x)
fun abs(x) = if x < 0 then -x else x

:pt
:elt
fun example(args) =
  if foo(args)
    < 0 then "invalid"
    == 0 then "null"
    |> abs
      > 100 then "large"
      < 10 then "small"
      else "medium"
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   head = App:
//│     lhs = Ident of "example"
//│     rhs = Tup of Ls of 
//│       Ident of "args"
//│   rhs = S of Block of Ls of 
//│     IfLike:
//│       kw = keyword 'if'
//│       split = App:
//│         lhs = App:
//│           lhs = Ident of "foo"
//│           rhs = Tup of Ls of 
//│             Ident of "args"
//│         rhs = OpBlock of Ls of 
//│           Tuple2:
//│             _1 = Ident of "<"
//│             _2 = InfixApp:
//│               lhs = IntLit of 0
//│               kw = keyword 'then'
//│               rhs = StrLit of "invalid"
//│           Tuple2:
//│             _1 = Ident of "=="
//│             _2 = InfixApp:
//│               lhs = IntLit of 0
//│               kw = keyword 'then'
//│               rhs = StrLit of "null"
//│           Tuple2:
//│             _1 = Ident of "|>"
//│             _2 = App:
//│               lhs = Ident of "abs"
//│               rhs = OpBlock of Ls of 
//│                 Tuple2:
//│                   _1 = Ident of ">"
//│                   _2 = InfixApp:
//│                     lhs = IntLit of 100
//│                     kw = keyword 'then'
//│                     rhs = StrLit of "large"
//│                 Tuple2:
//│                   _1 = Ident of "<"
//│                   _2 = InfixApp:
//│                     lhs = IntLit of 10
//│                     kw = keyword 'then'
//│                     rhs = StrLit of "small"
//│                 Tuple2:
//│                   _1 = Empty
//│                   _2 = Modified:
//│                     modifier = keyword 'else'
//│                     modLoc = N
//│                     body = StrLit of "medium"
//│ Elaborated tree:
//│ Blk:
//│   stats = Ls of 
//│     TermDefinition:
//│       owner = S of globalThis:block#2
//│       k = Fun
//│       sym = member:example
//│       params = Ls of 
//│         ParamList:
//│           flags = ParamListFlags of false
//│           params = Ls of 
//│             Param:
//│               flags = ()
//│               sym = args@22
//│               sign = N
//│       sign = N
//│       body = S of IfLike:
//│         kw = keyword 'if'
//│         desugared = Let:
//│           sym = $scrut@24
//│           term = App:
//│             lhs = Sel:
//│               prefix = Ref of globalThis:block#1
//│               nme = Ident of "foo"
//│             rhs = Tup of Ls of 
//│               Fld:
//│                 flags = ()
//│                 value = Ref of args@22
//│                 asc = N
//│           tail = Let: \
//│           sym = $scrut@34
//│           term = App:
//│             lhs = Ref of builtin:<
//│             rhs = Tup of Ls of 
//│               Fld:
//│                 flags = ()
//│                 value = Ref of $scrut@24
//│                 asc = N
//│               Fld:
//│                 flags = ()
//│                 value = Lit of IntLit of 0
//│                 asc = N
//│           tail = Cons: \
//│           head = Branch:
//│             scrutinee = Ref of $scrut@34
//│             pattern = Lit of BoolLit of true
//│             continuation = Else of Lit of StrLit of "invalid"
//│           tail = Let: \
//│           sym = $scrut@32
//│           term = App:
//│             lhs = Ref of builtin:==
//│             rhs = Tup of Ls of 
//│               Fld:
//│                 flags = ()
//│                 value = Ref of $scrut@24
//│                 asc = N
//│               Fld:
//│                 flags = ()
//│                 value = Lit of IntLit of 0
//│                 asc = N
//│           tail = Cons: \
//│           head = Branch:
//│             scrutinee = Ref of $scrut@32
//│             pattern = Lit of BoolLit of true
//│             continuation = Else of Lit of StrLit of "null"
//│           tail = Let: \
//│           sym = $scrut@26
//│           term = App:
//│             lhs = Sel:
//│               prefix = Ref of globalThis:block#1
//│               nme = Ident of "pipe"
//│             rhs = Tup of Ls of 
//│               Fld:
//│                 flags = ()
//│                 value = Ref of $scrut@24
//│                 asc = N
//│               Fld:
//│                 flags = ()
//│                 value = Sel:
//│                   prefix = Ref of globalThis:block#1
//│                   nme = Ident of "abs"
//│                 asc = N
//│           tail = Let: \
//│           sym = $scrut@30
//│           term = App:
//│             lhs = Ref of builtin:>
//│             rhs = Tup of Ls of 
//│               Fld:
//│                 flags = ()
//│                 value = Ref of $scrut@26
//│                 asc = N
//│               Fld:
//│                 flags = ()
//│                 value = Lit of IntLit of 100
//│                 asc = N
//│           tail = Cons: \
//│           head = Branch:
//│             scrutinee = Ref of $scrut@30
//│             pattern = Lit of BoolLit of true
//│             continuation = Else of Lit of StrLit of "large"
//│           tail = Let: \
//│           sym = $scrut@28
//│           term = App:
//│             lhs = Ref of builtin:<
//│             rhs = Tup of Ls of 
//│               Fld:
//│                 flags = ()
//│                 value = Ref of $scrut@26
//│                 asc = N
//│               Fld:
//│                 flags = ()
//│                 value = Lit of IntLit of 10
//│                 asc = N
//│           tail = Cons: \
//│           head = Branch:
//│             scrutinee = Ref of $scrut@28
//│             pattern = Lit of BoolLit of true
//│             continuation = Else of Lit of StrLit of "small"
//│           tail = Else of Lit of StrLit of "medium"
//│       resSym = ‹result of member:example›@35
//│       flags = ()
//│   res = Lit of UnitLit of true


