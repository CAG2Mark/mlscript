:global
:noTypeCheck

class Card[T](color: T)

class Suit
module Heart extends Suit
module Diamond extends Suit
module Spade extends Suit
module Club extends Suit

fun suit(x) = if x is Card(a) then a

let card = Card(Heart)
suit of card

:ucs desugared normalized
fun foo(x) = if x is
  Card(Heart) then 0
  Card(Diamond) then 1
  Card(Spade) then 2
  Card(Club) then 3
  else 4
//│ Desugared:
//│ if
//│   x@31 is Card(param0@32) param0@32 is Heart then 0
//│   x@31 is Card(param0@32) param0@32 is Diamond then 1
//│   x@31 is Card(param0@32) param0@32 is Spade then 2
//│   x@31 is Card(param0@32) param0@32 is Club then 3
//│   else 4
//│ Normalized:
//│ if
//│   x@31 is Card(param0@32) and
//│     param0@32 is Heart then 0
//│     param0@32 is Diamond then 1
//│     param0@32 is Spade then 2
//│     param0@32 is Club then 3
//│     else 4
//│   else 4
