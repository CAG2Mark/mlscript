:js

// DualOptions.mls
// ===============
// Matching two options in any possible order.


abstract class Option[T]
class Some[T](value: T) extends Option[T]
module None extends Option[nothing]
class Pair[A, B](x: A, y: B)


fun add_1(x, y) =
  if
    x is Some(xv) and y is Some(yv) then xv + yv
    x is Some(xv) and y is None     then xv
    x is None     and y is Some(yv) then yv
    x is None     and y is None     then 0

add_1(None, None)
//│ = 0

add_1(Some(5), None)
//│ = 5

add_1(None, Some(9))
//│ = 9

add_1(Some(5), Some(9))
//│ = 14

fun add_2(x, y) =
  if x is
    Some(xv) and y is
      Some(yv) then xv + yv
      None     then xv
    None and y is
      Some(yv) then yv
      None     then 0

add_2(None, None)
//│ = 0

add_2(Some(5), None)
//│ = 5

add_2(None, Some(9))
//│ = 9

add_2(Some(5), Some(9))
//│ = 14


fun add_3(x, y) =
  if Pair(x, y) is
    Pair(Some(xv), Some(yv)) then xv + yv
    Pair(Some(xv), None)     then xv
    Pair(None,     Some(yv)) then yv
    Pair(None,     None)     then 0

add_3(None, None)
//│ = 0

add_3(Some(5), None)
//│ = 5

add_3(None, Some(9))
//│ = 9

add_3(Some(5), Some(9))
//│ = 14


:fixme
fun add_4(x, y) =
  if
    x
      is
        Some(xv) and
          y
            is
              Some(yv) then xv + yv
            is
              None     then xv
        None and
          y
            is
              Some(yv) then yv
            is
              None     then 0
//│ /!!!\ Uncaught error: scala.NotImplementedError: List() (of class Nil$)


:fixme
add_4(None, None)
//│ ╔══[ERROR] Name not found: add_4
//│ ║  l.96: 	add_4(None, None)
//│ ╙──      	^^^^^

:fixme
add_4(Some(5), None)
//│ ╔══[ERROR] Name not found: add_4
//│ ║  l.102: 	add_4(Some(5), None)
//│ ╙──       	^^^^^

:fixme
add_4(None, Some(9))
//│ ╔══[ERROR] Name not found: add_4
//│ ║  l.108: 	add_4(None, Some(9))
//│ ╙──       	^^^^^

:fixme
add_4(Some(5), Some(9))
//│ ╔══[ERROR] Name not found: add_4
//│ ║  l.114: 	add_4(Some(5), Some(9))
//│ ╙──       	^^^^^


fun add_5(x, y) =
  if
    x is Some(xv) and y is Some(yv) then xv + yv
    y is None     and x is Some(xv) then xv
    x is None     and y is Some(yv) then yv
    y is None     and x is None     then 0


add_5(None, None)
//│ = 0

add_5(Some(5), None)
//│ = 5

add_5(None, Some(9))
//│ = 9

add_5(Some(5), Some(9))
//│ = 14


fun add_6(x, y) =
  if [x, y] is
    [Some(xv), Some(yv)] then xv + yv
    [Some(xv), None]     then xv
    [None,     Some(yv)] then yv
    [None,     None]     then 0

add_6(None, None)
//│ = 0

add_6(Some(5), None)
//│ = 5

add_6(None, Some(9))
//│ = 9

add_6(Some(5), Some(9))
//│ = 14




fun add_6(p, x, y) =
  if
    x is Some(xv) and y is Some(yv) then xv + yv
    y is None     and p(x) and x is Some(xv) then 42
    y is None     and x is Some(xv) then xv
    x is None     and y is Some(yv) then yv
    y is None     and x is None     then 0


add_6((x) => true, None, None)
//│ = 0

add_6((x) => true, Some(5), None)
//│ = 42

add_6((x) => true, None, Some(9))
//│ = 9

add_6((x) => true, Some(5), Some(9))
//│ = 14


fun add_7(p, x, y) =
  if
    x is Some(xv) and y is Some(yv) then xv + yv
    // y is None    and p(x) and x is Some(xv) then 42
    y is None     and x is Some(xv) then xv
    y is Some(yv) and p(yv) and x is None then 36
    y is Some(yv) and x is None then yv
    y is None     and x is None     then 0


add_7((x) => x > 0, None, None)
//│ = 0

add_7((x) => x > 0, Some(5), None)
//│ = 5

add_7((x) => x > 0, None, Some(9))
//│ = 36

add_7((x) => x > 0, None, Some(-9))
//│ = -9

add_7((x) => x > 0, Some(5), Some(9))
//│ = 14


fun add_8(p, x, y) =
  if
    x is Some(xv) and y is Some(yv) then xv + yv
    y is None    and p(x) and x is Some(xv) then 42
    y is None     and x is Some(xv) then xv
    y is Some(yv) and p(yv) and x is None then 36
    y is Some(yv) and x is None then yv
    y is None     and x is None     then 0


add_8((x) => x > 0, None, None)
//│ = 0

add_8((x) => true, Some(9), None)
//│ = 42

add_8((x) => x > 0, Some(5), None)
//│ = 5

add_8((x) => x > 0, None, Some(9))
//│ = 36

add_8((x) => x > 0, None, Some(-9))
//│ = -9

add_8((x) => x > 0, Some(5), Some(9))
//│ = 14

