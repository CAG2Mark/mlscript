

// :de
// type List = Nil | Cons

:ctx
type List = Nil | Cons
module Nil
class (::) Cons(head: Int, tail: List)
//│ Env:
//│   :: -> SelElem(RefElem(globalThis:block#0.this),Cons,Some(member:Cons))
//│   Cons -> SelElem(RefElem(globalThis:block#0.this),Cons,Some(member:Cons))
//│   List -> SelElem(RefElem(globalThis:block#0.this),List,Some(member:List))
//│   Nil -> SelElem(RefElem(globalThis:block#0.this),Nil,Some(member:Nil))

Cons(1, Nil)

1 :: 2

fun map(f, xs) = if xs is
  Nil then Nil
  x :: xs' then f(x) :: map(f, xs')


