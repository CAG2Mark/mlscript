:js

// We test the support for simple tuple patterns in this file.
// Splice tuple patterns will be implement in the future.

fun sum(x, y) = x + y
sum(1, 2)
//│ = 3

:fixme
fun sum([x, y]) = x + y
sum([1, 2])
//│ /!!!\ Uncaught error: scala.MatchError: Tup(List(Ident(x), Ident(y))) (of class hkmc2.syntax.Tree$Tup)

:ucs desugared
fun sum(pair) =
  if pair is [x, y] then x + y
sum([1, 2])
//│ Desugared:
//│ >  if pair@20 is [$elem0@21, $elem1@22] and
//│ >    let x@23 = $elem0@21#0
//│ >    let y@24 = $elem1@22#0
//│ >    else builtin:+#0(x@23#666, y@24#666)
//│ = 3

:ucs desugared
fun test(thing) =
  if thing is [] then 0
//│ Desugared:
//│ >  if thing@31 is [] then 0

:re
test("")
//│ ═══[RUNTIME ERROR] Error: match error

:re
test(12)
//│ ═══[RUNTIME ERROR] Error: match error

:ucs desugared
class Point(x: Int, y: Int)
fun discarded_cases(thing) =
  if thing is
    [x, y] then x + y
    Point(x, y) then x + y
//│ Desugared:
//│ >  if
//│ >    thing@40 is [$elem0@46, $elem1@47] and
//│ >      let x@48 = $elem0@46#0
//│ >      let y@49 = $elem1@47#0
//│ >      else builtin:+#1(x@48#666, y@49#666)
//│ >    thing@40 is Point($param0@41, $param1@42) and
//│ >      let x@43 = $param0@41#0
//│ >      let y@44 = $param1@42#0
//│ >      else builtin:+#0(x@43#666, y@44#666)

:e
:todo
discarded_cases(Point(0, 0))
//│ = 0

// A workaround is to move the tuple pattern to the last case.
:ucs desugared
fun working_cases(thing) =
  if thing is
    Point(x, y) then x + y
    [x, y] then x + y
//│ Desugared:
//│ >  if
//│ >    thing@61 is Point($param0@67, $param1@68) and
//│ >      let x@69 = $param0@67#0
//│ >      let y@70 = $param1@68#0
//│ >      else builtin:+#1(x@69#666, y@70#666)
//│ >    thing@61 is [$elem0@62, $elem1@63] and
//│ >      let x@64 = $elem0@62#0
//│ >      let y@65 = $elem1@63#0
//│ >      else builtin:+#0(x@64#666, y@65#666)

working_cases(Point(0, 0))
//│ = 0

// However, the `Object` type forbids tuples to be used.
:todo
working_cases([0, 0])
//│ = 0


fun not_working(x) =
  if x is
    [a, b, c] then
      a + b + c
    else
      0

not_working([1, 2, 3])
//│ = 6

not_working([1, 2])
//│ = 0
