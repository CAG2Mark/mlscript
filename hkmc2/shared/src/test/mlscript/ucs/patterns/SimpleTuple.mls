// We test the support for simple tuple patterns in this file.
// Splice tuple patterns will be implement in the future.

fun sum(x, y) = x + y
sum(1, 2)

:fixme
fun sum([x, y]) = x + y
sum([1, 2])
//│ /!!!\ Uncaught error: scala.MatchError: Tup(List(Ident(x), Ident(y))) (of class hkmc2.syntax.Tree$Tup)

:ucs desugared
fun sum''(pair) =
  if pair is [x, y] then x + y
sum''([1, 2])
//│ Desugared:
//│ >  if pair@18 is [$elem0@19, $elem1@20] and
//│ >    let x@21 = $elem0@19#0
//│ >    let y@22 = $elem1@20#0
//│ >    else builtin:+#0(x@21#666, y@22#666)

:ucs desugared
fun test(thing) =
  if thing is [] then 0
test("")
test(12)
//│ Desugared:
//│ >  if thing@27 is [] then 0

:ucs desugared
class Point(x: Int, y: Int)
fun discarded_cases(thing) =
  if thing is
    [x, y] then x + y
    Point(x, y) then x + y
//│ Desugared:
//│ >  if
//│ >    thing@32 is [$elem0@38, $elem1@39] and
//│ >      let x@40 = $elem0@38#0
//│ >      let y@41 = $elem1@39#0
//│ >      else builtin:+#1(x@40#666, y@41#666)
//│ >    thing@32 is Point($param0@33, $param1@34) and
//│ >      let x@35 = $param0@33#0
//│ >      let y@36 = $param1@34#0
//│ >      else builtin:+#0(x@35#666, y@36#666)

:e
:todo
discarded_cases(Point(0, 0))

// A workaround is to move the tuple pattern to the last case.
:ucs desugared
fun working_cases(thing) =
  if thing is
    Point(x, y) then x + y
    [x, y] then x + y
//│ Desugared:
//│ >  if
//│ >    thing@48 is Point($param0@54, $param1@55) and
//│ >      let x@56 = $param0@54#0
//│ >      let y@57 = $param1@55#0
//│ >      else builtin:+#1(x@56#666, y@57#666)
//│ >    thing@48 is [$elem0@49, $elem1@50] and
//│ >      let x@51 = $elem0@49#0
//│ >      let y@52 = $elem1@50#0
//│ >      else builtin:+#0(x@51#666, y@52#666)

working_cases(Point(0, 0))

// However, the `Object` type forbids tuples to be used.
:todo
working_cases([0, 0])


fun not_working(x) =
  if x is
    [a, b, c] then
      a + b + c
    else
      0

not_working([1, 2, 3])

:todo
not_working([1, 2])
