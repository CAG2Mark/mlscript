

declare class Any
declare class Object
declare class Int
declare class Num
declare class Str
declare class Bool
declare class Nothing
declare class Error(msg)

declare module String

// declare module Math // TODO: list members
declare val Math // so we can, eg, `open { pow }` in the meantime

declare val console
declare val process
declare val fs


fun (;): [A] -> ((), A) -> A

fun (+): (Int, Int) -> Int
fun (-): (Int, Int) -> Int
fun (*): (Int, Int) -> Int
fun (/): (Int, Int) -> Num
fun (<): (Int, Int) -> Bool
fun (>): (Int, Int) -> Bool
fun (<=): (Int, Int) -> Bool
fun (>=): (Int, Int) -> Bool
fun (&&): (Bool, Bool) -> Bool
fun (||): (Bool, Bool) -> Bool

fun (+.): (Num, Num) -> Num
fun (-.): (Num, Num) -> Num
fun (*.): (Num, Num) -> Num
fun (/.): (Num, Num) -> Num

// [CY:] poly is not supported here
fun (==): (Any, Any) -> Bool
fun (===): (Any, Any) -> Bool

fun log: (Any) -> ()

fun error: Nothing

fun concat: (Str, Str) -> Str


