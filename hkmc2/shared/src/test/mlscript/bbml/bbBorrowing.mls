:bbml
//│ Type: ⊤

//│ Type: ⊤

class Reg[Rg, Br]
//│ Type: ⊤

fun letreg: [E, Res] -> ([Rg] -> Reg[Rg, E] ->{E | Rg} Res) ->{E} Res
//│ Type: ⊤

fun use: [Rg, Br] -> Reg[Rg, Br] ->{Rg} Int
//│ Type: ⊤


class MutVec[A, Rg, Br]
//│ Type: ⊤

fun mkVec: [A, Rg, Br] -> Reg[Rg, Br] -> MutVec[A, Rg, Br]
//│ Type: ⊤

fun clear: [A, Rg, Br] -> MutVec[A, Rg, Br] ->{Rg} Int
//│ Type: ⊤

class Iter[A, Rg]
//│ Type: ⊤

fun iterate: [A, Rg, Br, Res] -> MutVec[A, Rg, Br] -> ([L] -> Iter[A, Br | L] ->{Br | L} Res) ->{Br} Res
//│ Type: ⊤

fun integers: [Rg, Br, Res] -> Reg[Rg, Br] ->{Rg} (Iter[Int, Br] ->{Br} Res) ->{Br} Res
//│ Type: ⊤


fun next: [A, Br] -> Iter[A, Br] ->{Br} A
//│ Type: ⊤

letreg(r => r)
//│ Type: Reg[?, E24_1]
//│ Where:
//│   E24_1 <: ⊥

letreg of r =>
  let b = mkVec(r)
  clear(b)
  iterate(b) of it =>
    next(it)
    123
  clear(b)
  r
//│ Type: Reg[?, E29_1]
//│ Where:
//│   E29_1 <: ⊥


// * Non-lexical borrowing pattern encoded with a thunk
letreg of r =>
  let b = mkVec(r)
  clear(b)
  let k = iterate(b) of it =>
    next(it)
    123
    if next(it) > 0 then () => 0 else () => clear(b)
  k()
//│ Type: Int

:e
letreg of r =>
  let b = mkVec(r)
  clear(b)
  let k = iterate(b) of it =>
    next(it)
    123
    () => next(it)
  k()
//│ ╔══[ERROR] Type error in block
//│ ║  l.68: 	letreg of r =>
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.69: 	  let b = mkVec(r)
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.70: 	  clear(b)
//│ ║        	^^^^^^^^^^
//│ ║  l.71: 	  let k = iterate(b) of it =>
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.72: 	    next(it)
//│ ║        	^^^^^^^^^^^^
//│ ║  l.73: 	    123
//│ ║        	^^^^^^^
//│ ║  l.74: 	    () => next(it)
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.75: 	  k()
//│ ║        	^^^^^
//│ ╟── because: cannot constrain  E74_1  <:  ⊥
//│ ╟── because: cannot constrain  E74_1  <:  ¬()
//│ ╟── because: cannot constrain  ¬⊥ ∧ ¬Rg97_1  <:  ¬()
//│ ╟── because: cannot constrain    <:  Rg97_1
//│ ╙── because: cannot constrain    <:  ¬()
//│ Type: ⊥

:e
letreg of r =>
  let b = mkVec(r)
  clear(b)
  iterate(b) of it =>
    next(it)
    clear(b)
    123
  clear(b)
  r
//│ ╔══[ERROR] Type error in block
//│ ║  l.101: 	letreg of r =>
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.102: 	  let b = mkVec(r)
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.103: 	  clear(b)
//│ ║         	^^^^^^^^^^
//│ ║  l.104: 	  iterate(b) of it =>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.105: 	    next(it)
//│ ║         	^^^^^^^^^^^^
//│ ║  l.106: 	    clear(b)
//│ ║         	^^^^^^^^^^^^
//│ ║  l.107: 	    123
//│ ║         	^^^^^^^
//│ ║  l.108: 	  clear(b)
//│ ║         	^^^^^^^^^^
//│ ║  l.109: 	  r
//│ ║         	^^^
//│ ╟── because: cannot constrain  E98_1  <:  ⊥
//│ ╟── because: cannot constrain  E98_1  <:  ¬()
//│ ╟── because: cannot constrain  ¬⊥ ∧ Rg118_1  <:  ¬()
//│ ╟── because: cannot constrain  Rg118_1  <:  ¬()
//│ ╙── because: cannot constrain    <:  ¬()
//│ Type: Reg[?, E98_1]
//│ Where:
//│   ⊤ <: E98_1
//│   E98_1 <: ⊥


letreg of r =>
  use(r)
  integers(r) of it =>
    next(it)
  use(r)
  r
//│ Type: Reg[?, E124_1]
//│ Where:
//│   E124_1 <: ⊥

:e
letreg of r =>
  use(r)
  integers(r) of it =>
    use(r)
    next(it)
  use(r)
  r
//│ ╔══[ERROR] Type error in block
//│ ║  l.151: 	letreg of r =>
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.152: 	  use(r)
//│ ║         	^^^^^^^^
//│ ║  l.153: 	  integers(r) of it =>
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.154: 	    use(r)
//│ ║         	^^^^^^^^^^
//│ ║  l.155: 	    next(it)
//│ ║         	^^^^^^^^^^^^
//│ ║  l.156: 	  use(r)
//│ ║         	^^^^^^^^
//│ ║  l.157: 	  r
//│ ║         	^^^
//│ ╟── because: cannot constrain  E138_1  <:  ⊥
//│ ╟── because: cannot constrain  E138_1  <:  ¬()
//│ ╟── because: cannot constrain  ¬⊥ ∧ Rg150_1  <:  ¬()
//│ ╟── because: cannot constrain  Rg150_1  <:  ¬()
//│ ╙── because: cannot constrain    <:  ¬()
//│ Type: Reg[?, E138_1]
//│ Where:
//│   ⊤ <: E138_1
//│   E138_1 <: ⊥

letreg of r0 =>
  letreg of r1 =>
    integers(r1) of it =>
      use(r0)
      next(it)
    use(r1)
    r1
//│ Type: Reg[?, in E175_1]
//│ Where:
//│   E175_1 <: ⊥


// * Can leak the iterator
fun iterate_unsafe: [A, Rg, Br, Res] -> MutVec[A, Rg, Br] -> (Iter[A, Br] ->{Br} Res) ->{Br} Res
//│ Type: ⊤
// * Eg:
letreg of r =>
  let b = mkVec(r)
  clear(b)
  let k = iterate_unsafe(b) of it =>
    next(it)
    123
    () => next(it)
  clear(b)
  k()
//│ Type: ⊥


