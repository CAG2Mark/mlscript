:global
:bbml


region x in 42
//│ Elab: { region x in 42‹›‹› }‹›
//│ Type: Int

region x in x
//│ Elab: { region x in x@2#0‹› }‹›
//│ Type: Region[in α3_2 out α3_2]


region x in
  x.ref 42
//│ Elab: { region x in (x@2#0).ref 42‹›‹›‹› }‹›
//│ Type: Ref[in Int out Int, in ⊥ out ⊥]

:e
let t = region x in x in t.ref 42
//│ Elab: { { let t@2 = region x in x@3#0‹›; (t@2#0).ref 42‹›‹› }‹› }‹›
//│ ╔══[ERROR] Cannot solve ⊤ ∧ ¬⊥
//│ ╙──
//│ ╔══[ERROR] Cannot solve ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: Ref[in Int out Int, in ⊥ out ⊤]


region x in
  let r = x.ref 42 in r := 0
//│ Elab: { region x in { let r@3 = (x@2#0).ref 42‹›‹›; r@3#0 := 0‹›‹› }‹›‹› }‹›
//│ Type: Int

:e
let t = region x in
  x.ref 42
in t := 0
//│ Elab: { { let t@2 = region x in (x@3#0).ref 42‹›‹›‹›; t@2#0 := 0‹›‹› }‹› }‹›
//│ ╔══[ERROR] Cannot solve ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: Int


region x in
  let r = x.ref 42 in !r
//│ Elab: { region x in { let r@3 = (x@2#0).ref 42‹›‹›; !Ref(r@3)‹› }‹›‹› }‹›
//│ Type: Int

:e
let t = region x in
  x.ref 42
in !t
//│ Elab: { { let t@2 = region x in (x@3#0).ref 42‹›‹›‹›; !Ref(t@2)‹› }‹› }‹›
//│ ╔══[ERROR] Cannot solve ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: Int

region x in
  let r = x.ref 42 in let t = r := 0 in !r
//│ Elab: { region x in { let r@3 = (x@2#0).ref 42‹›‹›; { let t@4 = r@3#0 := 0‹›‹›; !Ref(r@3)‹› }‹› }‹›‹› }‹›
//│ Type: Int

:e
fun rid: [A] -> A -> A
fun rid(x) =
  let t = (region y in 42) in x
//│ Elab: { fun rid: forall A@3: FunTy(Tup(List(Fld(‹›,Ref(A@3),None))),Ref(A@3),None)‹›; fun rid(x@4): forall A@8: FunTy(Tup(List(Fld(‹›,Ref(A@8),None))),Ref(A@8),None)‹› = { let t@5 = region y in 42‹›‹›; x@4#0 }‹›; }‹›
//│ ╔══[ERROR] Cannot constrain skolem α0_2147483647
//│ ╙──
//│ Type: ⊤

:e
region x in
  [A] => x.ref 42
//│ Elab: { region x in forall A@3: RegRef(Ref(x@2),Lit(IntLit(42)))‹›‹› }‹›
//│ ╔══[ERROR] Cannot constrain skolem α38_2
//│ ╙──
//│ Type: forall α39_3: Ref[in Int out Int, in ⊥ out ⊥]


:e
let t =
  region x in
    y => x.ref y
  in t(42)
//│ Elab: { { let t@2 = region x in λy@4. (x@3#0).ref y@4#0‹›‹›‹›; t@2#0(42‹›)‹›‹› }‹› }‹›
//│ ╔══[ERROR] Cannot constrain skolem α42_2
//│ ╙──
//│ Type: Ref[in α43_2 out α43_2, in ⊥ out ⊥]
//│ Where:
//│   Int <: α43_2

fun foo: [A] -> Int ->{A | Alloc} Int
fun foo(x) =
  region y in x + 1
//│ Elab: { fun foo: forall A@3: FunTy(Tup(List(Fld(‹›,Ref(class:Int),None))),Ref(class:Int),Some(CompType(Ref(A@3),Ref(Alloc@1),true)))‹›; fun foo(x@4): forall A@8: FunTy(Tup(List(Fld(‹›,Ref(class:Int),None))),Ref(class:Int),Some(CompType(Ref(A@8),Ref(Alloc@1),true)))‹› = region y in +#0(x@4#0, 1‹›)‹›‹›‹›; }‹›
//│ Type: ⊤

