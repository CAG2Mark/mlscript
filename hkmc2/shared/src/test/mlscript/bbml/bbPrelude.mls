// :bbml


class Any
class Nothing

class Bool
class Int
class Num

class CodeBase[T, C, S]
class Region[T]
class Ref[T, S](reg: Region[T], value: S)

class Str(length: Int, concat: Str -> Str)

class Error(msg: Str)

declare module Predef

fun run: [T] -> CodeBase[out T, out Nothing, out Any] -> T
fun log: Str -> Any
fun error: Nothing

fun (+): (Int, Int) -> Int
fun (-): (Int, Int) -> Int
fun (*): (Int, Int) -> Int
fun (/): (Int, Int) -> Num
fun (+.): (Num, Num) -> Num
fun (-.): (Num, Num) -> Num
fun (*.): (Num, Num) -> Num
fun (/.): (Num, Num) -> Num

fun (<): (Int, Int) -> Bool
fun (>): (Int, Int) -> Bool
fun (<=): (Int, Int) -> Bool
fun (>=): (Int, Int) -> Bool
fun (==): [T] -> (T, T) -> Bool
fun (!=): [T] -> (T, T) -> Bool

fun (&&): (Bool, Bool) -> Bool
fun (||): (Bool, Bool) -> Bool

