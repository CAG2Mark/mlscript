:global
:bbml


fun add: (Int, Int) -> Int
fun add(x, y) = x + y
//│ Type: ⊤

:e
fun foo: Int -> Int
fun foo: Int -> Int
//│ ╔══[ERROR] Duplicate definition of foo
//│ ╙── aready defined here
//│ Type: ⊤

:e
fun id(x) = x
fun id(y) = y
//│ ╔══[ERROR] Duplicate definition of id
//│ ║  l.18: 	fun id(y) = y
//│ ║        	      ^^^
//│ ╙── aready defined here
//│ Type: ⊤

:e
fun bar: Str -> Str
fun bar(x) = let t = x + 1 in "aaa"
//│ ╔══[ERROR] Type error in term x@3#0 with expected type Int
//│ ╙── because: cannot constrain  Str  <:  Int
//│ Type: ⊤

:e
fun baz: Int -> Int
fun baz(x) = "bbb"
//│ ╔══[ERROR] Type error in term λx@3. "bbb" with expected type (Int) ->{⊥} Int
//│ ╙── because: cannot constrain  Str  <:  Int
//│ Type: ⊤

add(1, 2)
//│ Type: Int

add(1, 2): Int
//│ Type: Int


:e
add(0, 0): Str
//│ ╔══[ERROR] Type error in term add#2(0, 0) with expected type Str
//│ ╙── because: cannot constrain  Int  <:  Str
//│ Type: Str

:e
fun errAdd(x: Int) = x + "1"
//│ ╔══[ERROR] Type error in term "1" with expected type Int
//│ ╙── because: cannot constrain  Str  <:  Int
//│ Type: ⊤

fun high: ([A] -> A -> A) -> Int
fun high(f) = f(42)
//│ Type: ⊤

high
//│ Type: (forall α7_2: (α7_2) ->{⊥} α7_2) ->{⊥} Int


high((x => x): [A] -> A -> A)
//│ Type: Int

high(x => x)
//│ Type: Int

:e
high(x => x + 1)
//│ ╔══[ERROR] Type error in term x@3#0 with expected type Int
//│ ╙── because: cannot constrain  <α>7_2  <:  Int
//│ ╔══[ERROR] Type error in term λx@3. +#3(x@3#0, 1) with expected type (<α>7_2) ->{⊥} <α>7_2
//│ ╙── because: cannot constrain  Int  <:  <α>7_2
//│ Type: Int

(let a = 0 in x => x): [A] -> A -> A
//│ Type: forall α9_2: (α9_2) ->{⊥} α9_2

(if false then x => x else y => y): [A] -> A -> A
//│ Type: forall α10_2: (α10_2) ->{⊥} α10_2

fun baz: Int -> (([A] -> A -> A), Int) -> Int
fun baz(z) =
  (((f, x) => f(x)): (([A] -> A -> A), Int) -> Int)
//│ Type: ⊤

:fixme // toLoc
:e
baz: Int -> (([A] -> A -> A), Int) -> Int
//│ ╔══[ERROR] General type is not allowed here.
//│ ╙──
//│ ╔══[ERROR] General type is not allowed here.
//│ ╙──
//│ Type: (Int) ->{⊥} (forall α16_2: (α16_2) ->{⊥} α16_2, Int) ->{⊥} Int


baz(42)
//│ Type: (forall α12_2: (α12_2) ->{⊥} α12_2, Int) ->{⊥} Int

:fixme // toLoc
:e
baz(42): (([A] -> A -> A), Int) -> Int
//│ ╔══[ERROR] General type is not allowed here.
//│ ╙──
//│ ╔══[ERROR] General type is not allowed here.
//│ ╙──
//│ Type: (forall α17_2: (α17_2) ->{⊥} α17_2, Int) ->{⊥} Int


fun id: [A] -> A -> A
fun id(x) = x
//│ Type: ⊤

id: [A] -> A -> A
//│ Type: forall α20_2: (α20_2) ->{⊥} α20_2


(id: [A] -> A -> A): [A] -> A -> A
//│ Type: forall α22_2: (α22_2) ->{⊥} α22_2

42: Int | Num
//│ Type: Int ∨ Num

42: [A] -> Int
//│ Type: forall α26_2: Int


42: [A] -> Int | Num
//│ Type: forall α27_2: Int ∨ Num

fun foo: Int -> Int
foo
//│ Type: (Int) ->{⊥} Int

foo
//│ Type: (Int) ->{⊥} Int
