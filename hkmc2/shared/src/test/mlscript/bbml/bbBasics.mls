:global
:bbml


123
//│ Elab: { 123‹› }‹›
//│ Type: Int

3.14
//│ Elab: { 3.14‹› }‹›
//│ Type: Num

false
//│ Elab: { false‹› }‹›
//│ Type: Bool

"bbml"
//│ Elab: { "bbml"‹› }‹›
//│ Type: Str

()
//│ Elab: { }‹›
//│ Type: ⊤

fun id(x) = x
//│ Elab: { fun id(x@2) = x@2#0; }‹›
//│ Type: ⊤

fun inc(x) = x + 1
//│ Elab: { fun inc(x@2) = +#0(x@2#0, 1‹›)‹›‹›; }‹›
//│ Type: ⊤

fun mul(x, y) = x * y
//│ Elab: { fun mul(x@2, y@3) = *#0(x@2#0, y@3#0)‹›‹›; }‹›
//│ Type: ⊤

x => x
//│ Elab: { λx@2. x@2#0‹› }‹›
//│ Type: (α8_0) ->{⊥} α8_0

+
//│ Elab: { +#1 }‹›
//│ Type: (Int, Int) ->{⊥} Int

(x, y) => x + y
//│ Elab: { λx@2, y@3. +#2(x@2#0, y@3#0)‹›‹›‹› }‹›
//│ Type: (α9_0, α10_0) ->{(((⊥) ∨ (⊥)) ∨ (⊥)) ∨ (⊥)} Int
//│ Where:
//│   α9_0 <: ¬((⊤) ∧ (¬((⊥) ∨ (Int))))
//│   α10_0 <: ¬((⊤) ∧ (¬((⊥) ∨ (Int))))

((x, y) => x + y)(40, 2)
//│ Elab: { λx@3, y@4. +#3(x@3#0, y@4#0)‹›‹›‹›(40‹›, 2‹›)‹›‹› }‹›
//│ Type: Int

:e
114 + "514"
//│ Elab: { +#4(114‹›, "514"‹›)‹›‹› }‹›
//│ ╔══[ERROR] Cannot solve Str ∧ ¬⊥
//│ ╙──
//│ Type: Int


inc(42)
//│ Elab: { inc#0(42‹›)‹›‹› }‹›
//│ Type: α14_0
//│ Where:
//│   (Int) ∧ (¬(⊥)) <: α14_0

let x = 42 in x
//│ Elab: { { let x@2 = 42‹›; x@2#0 }‹› }‹›
//│ Type: Int

let x = 1 in let y = 2 in x + y
//│ Elab: { { let x@2 = 1‹›; { let y@3 = 2‹›; +#5(x@2#0, y@3#0)‹›‹› }‹› }‹› }‹›
//│ Type: Int

:e
let x = 0 in x + "1"
//│ Elab: { { let x@2 = 0‹›; +#6(x@2#0, "1"‹›)‹›‹› }‹› }‹›
//│ ╔══[ERROR] Cannot solve Str ∧ ¬⊥
//│ ╙──
//│ Type: Int

class Foo(x: Int)
//│ Elab: { class Foo(x@2: class:Int#15) { }‹›; }‹›
//│ Type: ⊤

:e
new Nothingness(0)
//│ ╔══[ERROR] Class Nothingness not found.
//│ ║  l.90: 	new Nothingness(0)
//│ ╙──      	               ^^^
//│ Elab: { <error>‹› }‹›
//│ Type: ⊥

:e
new 42
//│ ╔══[ERROR] Illegal new expression.
//│ ╙──
//│ Elab: { <error>‹› }‹›
//│ Type: ⊥


new Foo(42)
//│ Elab: { new class:Foo(Lit(IntLit(42)))‹› }‹›
//│ Type: Foo


class Point(x: Num, y: Num, z: Num)
//│ Elab: { class Point(x@2: class:Num#13, y@3: class:Num#14, z@4: class:Num#15) { }‹›; }‹›
//│ Type: ⊤


new Point(0.0, 0.0, 0.0)
//│ Elab: { new class:Point(Lit(DecLit(0.0)), Lit(DecLit(0.0)), Lit(DecLit(0.0)))‹› }‹›
//│ Type: Point

:e
new Foo("1!5!")
//│ Elab: { new class:Foo(Lit(StrLit(1!5!)))‹› }‹›
//│ ╔══[ERROR] Cannot solve Str ∧ ¬⊥
//│ ╙──
//│ Type: Foo


class Some[A](value: A)
//│ Elab: { class Some[out A@2](value@3: A@2#0) { }‹›; }‹›
//│ Type: ⊤

new Some(true)
//│ Elab: { new class:Some(Lit(BoolLit(true)))‹› }‹›
//│ Type: Some[in α15_0 out α16_0]
//│ Where:
//│   (Bool) ∧ (¬(⊥)) <: α16_0

new Some(42)
//│ Elab: { new class:Some(Lit(IntLit(42)))‹› }‹›
//│ Type: Some[in α17_0 out α18_0]
//│ Where:
//│   (Int) ∧ (¬(⊥)) <: α18_0

let p = new Point(1.0, 0.0, 0.0) in p.Point#x
//│ Elab: { { let p@2 = new class:Point(Lit(DecLit(1.0)), Lit(DecLit(0.0)), Lit(DecLit(0.0)))‹›; p@2#0.class:Point#0#x‹› }‹› }‹›
//│ Type: Num

let t = new Some(true) in t.Some#value
//│ Elab: { { let t@2 = new class:Some(Lit(BoolLit(true)))‹›; t@2#0.class:Some#0#value‹› }‹› }‹›
//│ Type: α22_0
//│ Where:
//│   ((⊤) ∧ (¬(⊥))) ∧ (α20_0) <: α22_0
//│   (Bool) ∧ (¬(⊥)) <: α20_0

:fixme
:e
42.Some#value
//│ /!!!\ Uncaught error: scala.NotImplementedError: Lexing


class Printer[T](f: T -> Str)
//│ Elab: { class Printer[in T@2](f@3: (T@2#0)‹› -> class:Str#0‹›) { }‹›; }‹›
//│ Type: ⊤

fun foofoo(x) =
  let t = x + 1 in "foo"
//│ Elab: { fun foofoo(x@2) = { let t@3 = +#7(x@2#0, 1‹›)‹›‹›; "foo"‹› }‹›; }‹›
//│ Type: ⊤

new Printer(foofoo)
//│ Elab: { new class:Printer(Ref(foofoo))‹› }‹›
//│ Type: Printer[in α25_0 out α26_0]
//│ Where:
//│   α25_0 <: ¬((⊤) ∧ (¬((⊥) ∨ (Int))))

let ip = new Printer(foofoo) in ip.Printer#f(42)
//│ Elab: { { let ip@2 = new class:Printer(Ref(foofoo))‹›; ip@2#0.class:Printer#0#f‹›(42‹›)‹›‹› }‹› }‹›
//│ Type: Str

:e
let ip = new Printer(foofoo) in ip.Printer#f("42")
//│ Elab: { { let ip@2 = new class:Printer(Ref(foofoo))‹›; ip@2#0.class:Printer#1#f‹›("42"‹›)‹›‹› }‹› }‹›
//│ ╔══[ERROR] Cannot solve Str ∧ ¬⊥
//│ ╙──
//│ Type: Str

class TFun[T](f: T -> T)
//│ Elab: { class TFun[in out T@2](f@3: (T@2#0)‹› -> T@2#1‹›) { }‹›; }‹›
//│ Type: ⊤

fun inc(x) = x + 1
//│ Elab: { fun inc(x@2) = +#8(x@2#0, 1‹›)‹›‹›; }‹›
//│ Type: ⊤

new TFun(inc)
//│ Elab: { new class:TFun(Ref(inc))‹› }‹›
//│ Type: TFun[in α37_0 out α38_0]
//│ Where:
//│   α37_0 <: ¬((⊤) ∧ (¬((⊥) ∨ (Int))))
//│   (Int) ∧ (¬(⊥)) <: α38_0

let tf = new TFun(inc) in tf.TFun#f(1)
//│ Elab: { { let tf@2 = new class:TFun(Ref(inc))‹›; tf@2#0.class:TFun#0#f‹›(1‹›)‹›‹› }‹› }‹›
//│ Type: α42_0
//│ Where:
//│   ((⊤) ∧ (¬(⊥))) ∧ (α40_0) <: α42_0
//│   (Int) ∧ (¬(⊥)) <: α40_0

:e
let tf = new TFun(inc) in tf.TFun#f("1")
//│ Elab: { { let tf@2 = new class:TFun(Ref(inc))‹›; tf@2#0.class:TFun#1#f‹›("1"‹›)‹›‹› }‹› }‹›
//│ ╔══[ERROR] Cannot solve Str ∧ ¬⊥
//│ ╙──
//│ Type: α46_0
//│ Where:
//│   ((⊤) ∧ (¬(⊥))) ∧ (α44_0) <: α46_0
//│   (Int) ∧ (¬(⊥)) <: α44_0

class Pair[A, B](fst: A, snd: B)
//│ Elab: { class Pair[out A@2, out B@3](fst@4: A@2#0, snd@5: B@3#0) { }‹›; }‹›
//│ Type: ⊤

(new Pair(42, true)).Pair#fst
//│ Elab: { new class:Pair(Lit(IntLit(42)), Lit(BoolLit(true)))‹›.class:Pair#0#fst‹› }‹›
//│ Type: α52_0
//│ Where:
//│   ((⊤) ∧ (¬(⊥))) ∧ (α48_0) <: α52_0
//│   (Int) ∧ (¬(⊥)) <: α48_0

(new Pair(42, true)).Pair#snd
//│ Elab: { new class:Pair(Lit(IntLit(42)), Lit(BoolLit(true)))‹›.class:Pair#1#snd‹› }‹›
//│ Type: α62_0
//│ Where:
//│   ((⊤) ∧ (¬(⊥))) ∧ (α58_0) <: α62_0
//│   (Bool) ∧ (¬(⊥)) <: α58_0


if 1 < 2 then 1 else 0
//│ Elab: { if Cons(Boolean(App(Ref(<),Tup(List(Fld(‹›,Lit(IntLit(1)),None), Fld(‹›,Lit(IntLit(2)),None)))),Else(Lit(IntLit(1)))),Else(Lit(IntLit(0))))‹› }‹›
//│ Type: (Int) ∨ (Int)

if false then 1 else "1"
//│ Elab: { if Cons(Boolean(Lit(BoolLit(false)),Else(Lit(IntLit(1)))),Else(Lit(StrLit(1))))‹› }‹›
//│ Type: (Int) ∨ (Str)


if 1 is Int then 1 else 0
//│ Elab: { if Cons(Match(Lit(IntLit(1)),Cons(PatternBranch(Class(class:Int,None,true),Else(Lit(IntLit(1)))),NoSplit)),Else(Lit(IntLit(0))))‹› }‹›
//│ Type: (Int) ∨ (Int)

fun test(x) =
  if x is Int then x + 1 else 0
test
//│ Elab: { fun test(x@2) = if Cons(Match(Ref(x@2),Cons(PatternBranch(Class(class:Int,None,true),Else(App(Ref(+),Tup(List(Fld(‹›,Ref(x@2),None), Fld(‹›,Lit(IntLit(1)),None)))))),NoSplit)),Else(Lit(IntLit(0))))‹›; test#0 }‹›
//│ Type: α65_0
//│ Where:
//│   ((((⊤) ∧ (¬(⊥))) ∧ (α64_0)) ->{⊥} ((Int) ∧ (¬(⊥))) ∨ ((Int) ∧ (¬(⊥)))) ∧ (¬(⊥)) <: α65_0
//│   α64_0 <: ¬((Int) ∧ (¬((⊥) ∨ (Int))))

test(1)
//│ Elab: { test#1(1‹›)‹›‹› }‹›
//│ Type: α68_0
//│ Where:
//│   (Int) ∧ (¬(⊥)) <: α68_0

test("1")
//│ Elab: { test#2("1"‹›)‹›‹› }‹›
//│ Type: α70_0
//│ Where:
//│   (Int) ∧ (¬(⊥)) <: α70_0


fun fact(n) =
  if n > 1 then n * fact(n - 1) else 1
//│ Elab: { fun fact(n@2) = if Cons(Boolean(App(Ref(>),Tup(List(Fld(‹›,Ref(n@2),None), Fld(‹›,Lit(IntLit(1)),None)))),Else(App(Ref(*),Tup(List(Fld(‹›,Ref(n@2),None), Fld(‹›,App(Ref(fact),Tup(List(Fld(‹›,App(Ref(-),Tup(List(Fld(‹›,Ref(n@2),None), Fld(‹›,Lit(IntLit(1)),None)))),None)))),None)))))),Else(Lit(IntLit(1))))‹›; }‹›
//│ Type: ⊤

fact
//│ Elab: { fact#1 }‹›
//│ Type: α72_0
//│ Where:
//│   ((((⊤) ∧ (¬(⊥))) ∧ (α71_0)) ->{(⊥) ∨ (((⊤) ∧ (¬(⊥))) ∧ (α73_0))} ((Int) ∧ (¬(⊥))) ∨ ((Int) ∧ (¬(⊥)))) ∧ (¬(⊥)) <: α72_0
//│   (Int) ∧ (¬(⊥)) <: α71_0
//│   α71_0 <: ¬((⊤) ∧ (¬((⊥) ∨ (Int))))
//│   α72_0 <: ¬((⊤) ∧ (¬(((Int) ∧ (¬(⊥))) ->{((⊤) ∧ (¬(⊥))) ∧ (α73_0)} ((⊤) ∧ (¬(⊥))) ∧ (α74_0))))
//│   (Int) ∧ (¬(⊥)) <: α74_0
//│   α74_0 <: ¬((⊤) ∧ (¬((⊥) ∨ (Int))))

fact(1)
//│ Elab: { fact#2(1‹›)‹›‹› }‹›
//│ Type: α76_0
//│ Where:
//│   (Int) ∧ (¬(⊥)) <: α76_0


fun fact2 = case
  0 then 1
  n then n * fact(n - 1)
//│ Elab: { fun fact2 = λn@2. if Cons(Boolean(App(Ref(==),Tup(List(Fld(‹›,Ref(n@2),None), Fld(‹›,Lit(IntLit(0)),None)))),Else(Lit(IntLit(1)))),Else(App(Ref(*),Tup(List(Fld(‹›,Ref(n@2),None), Fld(‹›,App(Ref(fact),Tup(List(Fld(‹›,App(Ref(-),Tup(List(Fld(‹›,Ref(n@2),None), Fld(‹›,Lit(IntLit(1)),None)))),None)))),None))))))‹›‹›; }‹›
//│ Type: ⊤

fact2
//│ Elab: { fact2#0 }‹›
//│ Type: α78_0
//│ Where:
//│   ((((⊤) ∧ (¬(⊥))) ∧ (α77_0)) ->{(⊥) ∨ (((⊤) ∧ (¬(⊥))) ∧ (α80_0))} ((Int) ∧ (¬(⊥))) ∨ ((Int) ∧ (¬(⊥)))) ∧ (¬(⊥)) <: α78_0
//│   α77_0 <: ¬((⊤) ∧ (¬((⊥) ∨ (Int))))
//│   ((⊤) ∧ (¬(⊥))) ∧ (α73_0) <: α80_0
//│   α73_0 <: ¬((⊤) ∧ (¬(⊥)))

fact2(0)
//│ Elab: { fact2#1(0‹›)‹›‹› }‹›
//│ Type: α83_0
//│ Where:
//│   (Int) ∧ (¬(⊥)) <: α83_0
