:global
:bbml


123
//│ Elab: { 123‹› }‹›
//│ Type: Int

3.14
//│ Elab: { 3.14‹› }‹›
//│ Type: Num

false
//│ Elab: { false‹› }‹›
//│ Type: Bool

"bbml"
//│ Elab: { "bbml"‹› }‹›
//│ Type: Str

()
//│ Elab: { }‹›
//│ Type: ⊤

fun id(x) = x
//│ Elab: { fun id(x@1) = x@1#0; }‹›
//│ Type: ⊤

fun inc(x) = x + 1
inc(42)
//│ Elab: { fun inc(x@1) = +#0(x@1#0, 1‹›)‹›‹›; inc#0(42‹›)‹›‹› }‹›
//│ Type: α4
//│ Where:
//│   ⊤ ∧ ¬⊥ ∧ α2 <: α4
//│   Int ∧ ¬⊥ <: α2

fun mul(x, y) = x * y
//│ Elab: { fun mul(x@1, y@2) = *#0(x@1#0, y@2#0)‹›‹›; }‹›
//│ Type: ⊤

x => x
//│ Elab: { λx. x@1#0‹› }‹›
//│ Type: (α0) ->{⊥} α0

+
//│ Elab: { +#1 }‹›
//│ Type: (Int, Int) ->{⊥} Int

(x, y) => x + y
//│ Elab: { λx, y. +#2(x@1#0, y@2#0)‹›‹›‹› }‹›
//│ Type: (α0, α1) ->{⊥} α3
//│ Where:
//│   α0 <: ¬⊤ ∧ ¬⊥ ∨ Int
//│   α1 <: ¬⊤ ∧ ¬⊥ ∨ Int
//│   Int ∧ ¬⊥ <: α3

((x, y) => x + y)(40, 2)
//│ Elab: { λx, y. +#3(x@2#0, y@3#0)‹›‹›‹›(40‹›, 2‹›)‹›‹› }‹›
//│ Type: α5
//│ Where:
//│   ⊤ ∧ ¬⊥ ∧ α3 <: α5
//│   Int ∧ ¬⊥ <: α3

:e
114 + "514"
//│ Elab: { +#4(114‹›, "514"‹›)‹›‹› }‹›
//│ ╔══[ERROR] Can not solve Str <: ⊥
//│ ╙──
//│ Type: α1
//│ Where:
//│   Int ∧ ¬⊥ <: α1


let x = 42 in x
//│ Elab: { { let x@1 = 42‹›; x@1#0 }‹› }‹›
//│ Type: Int

let x = 1 in let y = 2 in x + y
//│ Elab: { { let x@1 = 1‹›; { let y@2 = 2‹›; +#5(x@1#0, y@2#0)‹›‹› }‹› }‹› }‹›
//│ Type: α1
//│ Where:
//│   Int ∧ ¬⊥ <: α1

:e
let x = 0 in x + "1"
//│ Elab: { { let x@1 = 0‹›; +#6(x@1#0, "1"‹›)‹›‹› }‹› }‹›
//│ ╔══[ERROR] Can not solve Str <: ⊥
//│ ╙──
//│ Type: α1
//│ Where:
//│   Int ∧ ¬⊥ <: α1

class Foo(x: Int)
//│ Elab: { class Foo(x@1: class:Int#11) { }‹›; }‹›
//│ Type: ⊤

:fixme
let foo = new Foo(42)
//│ ╔══[PARSE ERROR] Expected expression after 'let' binding equals sign; found 'new' keyword instead
//│ ║  l.95: 	let foo = new Foo(42)
//│ ╙──      	          ^^^
//│ ╔══[PARSE ERROR] Expected end of input; found identifier instead
//│ ║  l.95: 	let foo = new Foo(42)
//│ ╙──      	              ^^^
//│ Elab: { <error>‹› }‹›
//│ /!!!\ Uncaught error: scala.MatchError: Error (of class hkmc2.semantics.Term$$anon$1)
