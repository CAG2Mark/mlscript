:bbml
//│ Type: ⊤

fun f(y) =
  let local = ((x => y(x) + 1): [A] -> A -> Int) in y
//│ Type: ⊤

// * the parameter type of y is extruded.
f
//│ Type: forall y3_2: y3_2 -> y3_2
//│ Where:
//│   y3_2 <: ⊤ -> Int

fun foo: [A] -> A -> Int
fun foo(x) = 0
//│ Type: ⊤

foo
//│ Type: (⊤) ->{⊥} Int

f(foo)
//│ Type: ⊤ -> Int

fun g: ([A] -> A -> Int) -> ([A] -> A -> Int)
fun g(y) =
  let local = ((x => y(x) + 1): ([A] -> A -> Int)) in y
//│ Type: ⊤

g
//│ Type: (forall A21_2: (⊥) ->{⊥} Int) ->{⊥} forall A22_2: (⊤) ->{⊥} Int

g(foo)
//│ Type: (⊤) ->{⊥} Int

:e
y `=> (let t = run(x `=> x `+ y) in y)
//│ ╔══[ERROR] Type error in quoted term with expected type CodeBase[out T32_3, ⊥, ?]
//│ ║  l.36: 	y `=> (let t = run(x `=> x `+ y) in y)
//│ ║        	                   ^^^^^^^^^^^^
//│ ╟── because: cannot constrain  CodeBase[out x33_5 -> α40_5, out α42_4, ?]  <:  CodeBase[out T32_3, ⊥, ?]
//│ ╟── because: cannot constrain  D( α42_4 )  <:  ⊥
//│ ╟── because: cannot constrain  α42_4  <:  ¬()
//│ ╟── because: cannot constrain  (¬⊥ ∧ ¬x43_4) ∧ <y>31_3  <:  ¬()
//│ ╟── because: cannot constrain  <y>31_3  <:  x43_4
//│ ╙── because: cannot constrain  <y>31_3  <:  ¬()
//│ Type: CodeBase[out y30_3 -> y30_3, ⊥, ?]
//│ Where:
//│   y30_3 <: Int

class C[A](m: A, n: A -> Int)
//│ Type: ⊤


fun f: [A] -> ([B] -> (C[out B] & A) -> B) -> A -> Int
f
//│ Type: forall A49_2: (forall B50_3: (C[out B50_3] ∧ A49_2) ->{⊥} B50_3) ->{⊥} (A49_2) ->{⊥} Int

fun g: [D] -> C[in Int out D] -> D
g
//│ Type: forall D51_2: (C[in Int out D51_2]) ->{⊥} D51_2


f(g)
//│ Type: (¬C[?] ∨ C[in Int out ⊥]) ->{⊥} Int

fun foo: C[in Int out Nothing]
foo
//│ Type: C[in Int out ⊥]

fun bar: C[in Int out Int]
bar
//│ Type: C[Int]

f(g)(foo)
//│ Type: Int

:fixme // ???
f(g)(bar)
//│ ╔══[ERROR] Type error in selection with expected type A64_1
//│ ║  l.78: 	f(g)(bar)
//│ ║        	     ^^^
//│ ╟── because: cannot constrain  C[Int]  <:  A64_1
//│ ╟── because: cannot constrain  C[in D( Int ) out D( Int )]  <:  A64_1
//│ ╟── because: cannot constrain  C[in D( Int ) out D( Int )]  <:  ¬C[in D() out ¬⊥ ∧ B67_1] ∨ C[in D( Int ) out ¬⊥ ∧ D68_1]
//│ ╟── because: cannot constrain  (D( Int )) ∧ (D( B67_1 ))  <:  ¬⊥ ∧ D68_1
//│ ╟── because: cannot constrain  Int && B67_1  <:  D68_1
//│ ╟── because: cannot constrain  Int && B67_1  <:  B69_1
//│ ╟── because: cannot constrain  Int && B67_1  <:  B69_1
//│ ╟── because: cannot constrain  Int && B67_1  <:  ¬()
//│ ╟── because: cannot constrain  B67_1  <:  ¬(Int)
//│ ╙── because: cannot constrain    <:  ¬(Int)
//│ Type: Int
