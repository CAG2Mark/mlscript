:global
:bbml


`42
//│ Elab: { code"42‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out ⊥, in ⊥ out ⊤]

`false
//│ Elab: { code"false‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out ⊥, in ⊥ out ⊤]

`"rua"
//│ Elab: { code""rua"‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out ⊥, in ⊥ out ⊤]

`3.14
//│ Elab: { code"3.14‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out ⊥, in ⊥ out ⊤]


x `=> x
//│ Elab: { code"λx@1. ${x@1#0}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α2_1, in ⊥ out ⊤]

x `=> `42
//│ Elab: { code"λx@1. ${code"42‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α5_1, in ⊥ out ⊤]

:e
x `=> 42
//│ Elab: { code"λx@1. ${42‹›}‹›‹›"‹› }‹›
//│ ╔══[ERROR] Cannot solve Int ∧ ¬⊥
//│ ╙──
//│ Type: CodeBase[in ⊥ out α8_1, in ⊥ out ⊤]


f `=> x `=> f`(x)
//│ Elab: { code"λf@1. ${code"λx@2. ${code"${f@1#0}‹›(${x@2#0}‹›)‹›‹›"‹›}‹›‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α16_1, in ⊥ out ⊤]


x `=> y `=> x `+ y
//│ Elab: { code"λx@1. ${code"λy@2. ${code"+#0(${x@1#0}‹›, ${y@2#0}‹›)‹›‹›"‹›}‹›‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α24_1, in ⊥ out ⊤]


(x, y) `=> x `+ y
//│ Elab: { code"λx@1, y@2. ${code"+#1(${x@1#0}‹›, ${y@2#0}‹›)‹›‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α30_1, in ⊥ out ⊤]

(x, y, z) `=> x `+ y `+ z
//│ Elab: { code"λx@1, y@2, z@3. ${code"+#2(${code"+#3(${x@1#0}‹›, ${y@2#0}‹›)‹›‹›"‹›}‹›, ${z@3#0}‹›)‹›‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α39_1, in ⊥ out ⊤]

f `=> x `=> y `=> f`(x, y)
//│ Elab: { code"λf@1. ${code"λx@2. ${code"λy@3. ${code"${f@1#0}‹›(${x@2#0}‹›, ${y@3#0}‹›)‹›‹›"‹›}‹›‹›"‹›}‹›‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α51_1, in ⊥ out ⊤]

`let x = `42 `in x
//│ Elab: { code"{ let x@1 = ${code"42‹›"‹›}‹›; ${x@1#0}‹› }‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α55_1, in ⊥ out ⊤]

:e
`let x = 42 `in x
//│ Elab: { code"{ let x@1 = ${42‹›}‹›; ${x@1#0}‹› }‹›"‹› }‹›
//│ ╔══[ERROR] Cannot solve Int ∧ ¬⊥
//│ ╙──
//│ Type: CodeBase[in ⊥ out α59_1, in ⊥ out ⊤]

:e
`let x = `0 `in 1
//│ Elab: { code"{ let x@1 = ${code"0‹›"‹›}‹›; ${1‹›}‹› }‹›"‹› }‹›
//│ ╔══[ERROR] Cannot solve Int ∧ ¬⊥
//│ ╙──
//│ Type: CodeBase[in ⊥ out α63_1, in ⊥ out ⊤]


`if `true then `true else `false
//│ Elab: { code"if Cons(Boolean(Unquoted(Quoted(Lit(BoolLit(true)))),Else(Unquoted(Quoted(Lit(BoolLit(true)))))),Else(Unquoted(Quoted(Lit(BoolLit(false))))))‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α64_1 ∨ α65_1 ∨ α66_1, in ⊥ out ⊤]
