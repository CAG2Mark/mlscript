:global
:bbml


`42
//│ Elab: { code"42‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out Int, in ⊥ out ⊥, in ⊥ out ⊤]

`false
//│ Elab: { code"false‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out Bool, in ⊥ out ⊥, in ⊥ out ⊤]

`"rua"
//│ Elab: { code""rua"‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out Str, in ⊥ out ⊥, in ⊥ out ⊤]

`3.14
//│ Elab: { code"3.14‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out Num, in ⊥ out ⊥, in ⊥ out ⊤]


x `=> x
//│ Elab: { code"λx@2. ${x@2#0}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α1_3 ->{⊥} α1_3, in ⊥ out ⊥, in ⊥ out ⊤]

x `=> `42
//│ Elab: { code"λx@2. ${code"42‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out ⊤ ->{⊥} Int, in ⊥ out ⊥, in ⊥ out ⊤]

:e
x `=> 42
//│ Elab: { code"λx@2. ${42‹›}‹›‹›"‹› }‹›
//│ ╔══[ERROR] Cannot solve (Int) ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: CodeBase[in ⊥ out ⊤ ->{⊥} ⊥, in ⊥ out ⊥, in ⊥ out ⊤]


f `=> x `=> f`(x)
//│ Elab: { code"λf@2. ${code"λx@3. ${code"${f@2#0}‹›(${x@3#0}‹›)‹›‹›"‹›}‹›‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out ((((⊤) ∧ ⊤) ∧ α26_3) ->{(⊥) ∨ ⊥} (((⊤) ∧ ⊤) ∧ α27_3)) ->{⊥} ((((⊤) ∧ ⊤) ∧ α26_3) ->{(⊥) ∨ ⊥} (((⊤) ∧ ⊤) ∧ α27_3)), in ⊥ out ⊥, in ⊥ out ⊤]


x `=> y `=> x `+ y
//│ Elab: { code"λx@2. ${code"λy@3. ${code"+#0(${x@2#0}‹›, ${y@3#0}‹›)‹›‹›"‹›}‹›‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out Int ->{⊥} ((((⊤) ∧ ⊤) ∧ Int) ->{(⊥) ∨ ⊥} (((⊤) ∧ ⊤) ∧ Int)), in ⊥ out ⊥, in ⊥ out ⊤]


(x, y) `=> x `+ y
//│ Elab: { code"λx@2, y@3. ${code"+#1(${x@2#0}‹›, ${y@3#0}‹›)‹›‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out (Int, Int) ->{⊥} Int, in ⊥ out ⊥, in ⊥ out ⊤]

(x, y, z) `=> x `+ y `+ z
//│ Elab: { code"λx@2, y@3, z@4. ${code"+#2(${code"+#3(${x@2#0}‹›, ${y@3#0}‹›)‹›‹›"‹›}‹›, ${z@4#0}‹›)‹›‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out (Int, Int, Int) ->{⊥} Int, in ⊥ out ⊥, in ⊥ out ⊤]

f `=> x `=> y `=> f`(x, y)
//│ Elab: { code"λf@2. ${code"λx@3. ${code"λy@4. ${code"${f@2#0}‹›(${x@3#0}‹›, ${y@4#0}‹›)‹›‹›"‹›}‹›‹›"‹›}‹›‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out ((((⊤) ∧ ⊤) ∧ α98_3, ((⊤) ∧ ⊤) ∧ α100_3) ->{(⊥) ∨ ⊥} (((⊤) ∧ ⊤) ∧ α101_3)) ->{⊥} ((((⊤) ∧ ⊤) ∧ α98_3) ->{(⊥) ∨ ⊥} (((⊤) ∧ ⊤) ∧ ((((⊤) ∧ ⊤) ∧ α100_3) ->{(⊥) ∨ ⊥} (((⊤) ∧ ⊤) ∧ α101_3)))), in ⊥ out ⊥, in ⊥ out ⊤]

`let x = `42 `in x
//│ Elab: { code"{ let x@2 = ${code"42‹›"‹›}‹›; ${x@2#0}‹› }‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out Int, in ⊥ out ⊥, in ⊥ out ⊤]

:e
`let x = 42 `in x
//│ Elab: { code"{ let x@2 = ${42‹›}‹›; ${x@2#0}‹› }‹›"‹› }‹›
//│ ╔══[ERROR] Cannot solve (Int) ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: CodeBase[in ⊥ out ⊥, in ⊥ out ⊥, in ⊥ out ⊤]

:e
`let x = `0 `in 1
//│ Elab: { code"{ let x@2 = ${code"0‹›"‹›}‹›; ${1‹›}‹› }‹›"‹› }‹›
//│ ╔══[ERROR] Cannot solve (Int) ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: CodeBase[in ⊥ out ⊥, in ⊥ out ⊥, in ⊥ out ⊤]


`if `true then `true else `false
//│ Elab: { code"if Cons(Boolean(Unquoted(Quoted(Lit(BoolLit(true)))),Else(Unquoted(Quoted(Lit(BoolLit(true)))))),Else(Unquoted(Quoted(Lit(BoolLit(false))))))‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out Bool, in ⊥ out ⊥, in ⊥ out ⊤]


x `=> `if x `== `0.0 then `1.0 else x
//│ Elab: { code"λx@2. ${code"if Cons(Boolean(Unquoted(Quoted(App(Ref(==),Tup(List(Fld(‹›,Unquoted(Ref(x@2)),None), Fld(‹›,Unquoted(Quoted(Lit(DecLit(0.0)))),None)))))),Else(Unquoted(Quoted(Lit(DecLit(1.0)))))),Else(Unquoted(Ref(x@2))))‹›"‹›}‹›‹›"‹› }‹›
//│ Type: CodeBase[in ⊥ out α141_3 ->{⊥} ((α141_3) ∨ Num), in ⊥ out ⊥, in ⊥ out ⊤]

run(`1)
//│ Elab: { run#0(code"1‹›"‹›)‹›‹› }‹›
//│ Type: Int

:e
run(1)
//│ Elab: { run#1(1‹›)‹›‹› }‹›
//│ ╔══[ERROR] Cannot solve (Int) ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: ⊥

:e
x `=> run(x)
//│ Elab: { code"λx@2. ${run#2(x@2#0)‹›‹›}‹›‹›"‹› }‹›
//│ ╔══[ERROR] Cannot solve (⊤) ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: CodeBase[in ⊥ out CodeBase[in (⊥) ∨ ⊥ out ((⊤) ∧ ⊤) ∧ α163_3, in (⊥) ∨ ⊥ out (⊤) ∧ ⊤, in (⊥) ∨ ⊥ out (((⊤) ∧ ⊤) ∧ ⊤) ∨ ⊥] ->{⊥} α163_3, in ⊥ out α165_2, in ⊥ out ⊤]

:e
`let x = `42 `in run(x)
//│ Elab: { code"{ let x@2 = ${code"42‹›"‹›}‹›; ${run#3(x@2#0)‹›‹›}‹› }‹›"‹› }‹›
//│ ╔══[ERROR] Cannot solve (⊤) ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ ╔══[ERROR] Cannot solve (Int) ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: CodeBase[in ⊥ out ⊥, in ⊥ out ⊥, in ⊥ out ⊤]
