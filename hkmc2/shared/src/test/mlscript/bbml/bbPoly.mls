:bbml
//│ Type: ⊤

//│ Type: ⊤

42: [A] -> Int
//│ Type: Int

:e
42: [A] -> Str
//│ ╔══[ERROR] Type error in integer literal with expected type Str
//│ ║  l.10: 	42: [A] -> Str
//│ ║        	^^
//│ ╙── because: cannot constrain  Int  <:  Str
//│ Type: Str

fun id: [A] -> A -> A
fun id(x) = x
//│ Type: ⊤

id
//│ Type: forall A8_2: (A8_2) ->{⊥} A8_2

:e
(x => x + 1): [A] -> A -> A
//│ ╔══[ERROR] Type error in reference with expected type Int
//│ ║  l.25: 	(x => x + 1): [A] -> A -> A
//│ ║        	      ^
//│ ╙── because: cannot constrain  <A>11_2  <:  Int
//│ ╔══[ERROR] Type error in application with expected type <A>11_2
//│ ║  l.25: 	(x => x + 1): [A] -> A -> A
//│ ║        	      ^^^^^
//│ ╙── because: cannot constrain  Int  <:  <A>11_2
//│ Type: forall A10_2: (A10_2) ->{⊥} A10_2


(x => x): [A] -> A -> A
//│ Type: forall A12_2: (A12_2) ->{⊥} A12_2

id: [A] -> A -> A
//│ Type: forall A14_2: (A14_2) ->{⊥} A14_2

id: Int -> Int
//│ Type: (Int) ->{⊥} Int

fun myInc(inc: Int -> Int, x: Int) = inc(x)
//│ Type: ⊤

myInc(id, 0)
//│ Type: Int

let t = 42 in ((x => x): [A] -> A -> A)
//│ Type: forall A20_2: (A20_2) ->{⊥} A20_2


id(42)
//│ Type: Int

id("abc")
//│ Type: Str


class Pair[A, B](a: A, b: B)
//│ Type: ⊤

new Pair(42, true)
//│ Type: Pair[α24_1, α25_1]
//│ Where:
//│   Int <: α24_1
//│   Bool <: α25_1

fun swap: [A, B] -> Pair[out A, out B] -> Pair[out B, out A]
fun swap(p) = new Pair(p.Pair#b, p.Pair#a)
//│ Type: ⊤


swap
//│ Type: forall A28_2, B29_2: (Pair[out A28_2, out B29_2]) ->{⊥} Pair[out B29_2, out A28_2]

let t = new Pair(42, true) in swap(t)
//│ Type: Pair[out Bool, out Int]

let t = new Pair("114", "514") in swap(t)
//│ Type: Pair[out Str, out Str]

let id = ((x => x): [A] -> A -> A) in new Pair(id(42), id("42"))
//│ Type: Pair[α52_1, α53_1]
//│ Where:
//│   Int <: α52_1
//│   Str <: α53_1

fun foo: ([A] -> A -> A) -> Int
fun foo(x) = 42
//│ Type: ⊤

foo
//│ Type: (forall A57_2: (A57_2) ->{⊥} A57_2) ->{⊥} Int

foo(id)
//│ Type: Int

foo(x => x)
//│ Type: Int

class Foo(foo: [A] -> A -> A)
//│ Type: ⊤

new Foo(id)
//│ Type: Foo


new Foo(x => x)
//│ Type: Foo

let foo = new Foo(id) in foo.Foo#foo(42)
//│ Type: Int

class Bar[A](x: A, f: [B] -> B -> B)
//│ Type: ⊤


new Bar(0, id)
//│ Type: Bar[α71_1]
//│ Where:
//│   Int <: α71_1

let bar = new Bar(0, id) in bar.Bar#f(bar.Bar#x)
//│ Type: Int

class Some[A](value: A)
//│ Type: ⊤

new Some((x => x): [A] -> A -> A)
//│ Type: Some[α85_1]
//│ Where:
//│   x88_1 -> x88_1 <: α85_1

let s = new Some((x => x): [A] -> A -> A) in let t = s.Some#value(42) in s.Some#value(false)
//│ Type: Bool ∨ Int

fun gen: Int -> [A] -> A -> A
fun gen(x) =
  let t = x + 1 in ((y => y): [A] -> A -> A)
//│ Type: ⊤

gen
//│ Type: (Int) ->{⊥} forall A102_2: (A102_2) ->{⊥} A102_2


gen(42)
//│ Type: forall A102_2: (A102_2) ->{⊥} A102_2

// FIXME: toLoc
:fixme
:e
fun cnt: Some[out [A] -> A -> A] -> Int
fun cnt(x) = 42
//│ ╔══[ERROR] General type is not allowed here.
//│ ║  l.156: 	fun cnt: Some[out [A] -> A -> A] -> Int
//│ ╙──       	                         ^^^^^^
//│ ╔══[ERROR] General type is not allowed here.
//│ ║  l.156: 	fun cnt: Some[out [A] -> A -> A] -> Int
//│ ╙──       	                         ^^^^^^
//│ Type: ⊤

(x => x): [A] -> A -> A
//│ Type: forall A109_2: (A109_2) ->{⊥} A109_2
