:bbml
//│ Type: ⊤

//│ Type: ⊤

fun power: [C] -> CodeBase[out Num, out C, out Any] -> Int -> CodeBase[out Num, out C, out Any]
fun power(x) = case
  0 then `1.0
  n then x `*. power(x)(n - 1)
power
//│ Type: forall C4_2: (CodeBase[out Num, out C4_2, ?]) ->{⊥} (Int) ->{⊥} CodeBase[out Num, out C4_2, ?]


fun id: [A] -> A -> A
fun id(x) = x
//│ Type: ⊤


run(x `=> id(x) `* x)
//│ Type: Int -> Int


fun assertNotZero: [C] -> CodeBase[out Num, out C, out Any] -> CodeBase[out Num, out C, out Any]
fun assertNotZero(x) =
  `if (x `== `0.0) then `error else x
let checkedDiv = x `=> y `=> x `/. (assertNotZero(y))
run(checkedDiv)
//│ Type: Num -> (Num -> Num)



fun show: [T] -> CodeBase[out T, out Any, out Any] -> Str = s => "debug"
show
//│ Type: (CodeBase[?, ?, ?]) ->{⊥} Str



fun inc(dbg) =
  x `=> let c = x `+ `1 in let t = dbg(c) in c
inc
//│ Type: forall α86_2: (CodeBase[out Int, ?, ?] ->{α86_2} ⊤) ->{α86_2} CodeBase[out Int -> Int, ⊥, ?]

inc(c => log(show(c)))
//│ Type: CodeBase[out Int -> Int, ⊥, ?]


fun body: [T, C] -> (CodeBase[out Int, out T, out Any], CodeBase[out Int, out C, out Any]) -> Int -> CodeBase[out Int, out T | C, out Any]
fun body(x, y) = case
  0 then x
  1 then y
  n then body(y, x `+ y)(n - 1)
fun gib_naive(n) =
  (x, y) `=> body(x, y)(n)
let gn5 = run(gib_naive(5))
//│ Type: ⊤

fun bind(rhs, k) = `let x = rhs `in k(x)
bind
//│ Type: forall α154_2, α155_2, α159_2, α164_2, α167_2, α168_2: (CodeBase[out α154_2, out α155_2, ?], CodeBase[in α159_2 out α159_2 ∨ α154_2, ?, ⊥] ->{α164_2} CodeBase[out α167_2, out α168_2, ?]) ->{α164_2} CodeBase[out α167_2, out α155_2 ∨ α168_2, ?]

:e
fun body: [G] -> (CodeBase[out Int, out G, out Any], CodeBase[out Int, out G, out Any]) -> Int -> CodeBase[out Int, out G, out Any]
fun body(x, y) = case
  0 then x
  1 then y
  n then bind of x `+ y, (z => body(y, z)(n - 1)): [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out C, out Any]
//│ ╔══[ERROR] Type error in application with expected type CodeBase[out Int, out <G>178_2, ?]
//│ ║  l.66: 	  n then bind of x `+ y, (z => body(y, z)(n - 1)): [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out C, out Any]
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── because: cannot constrain  CodeBase[out α191_2, out α181_2 ∨ α194_2, ?]  <:  CodeBase[out Int, out <G>178_2, ?]
//│ ╟── because: cannot constrain  D( α181_2 || α194_2 )  <:  <G>178_2
//│ ╟── because: cannot constrain  α194_2  <:  ¬(~<G>178_2)
//│ ╟── because: cannot constrain  α193_2  <:  ¬(~<G>178_2)
//│ ╟── because: cannot constrain  α193_2  <:  ¬(~<G>178_2)
//│ ╙── because: cannot constrain    <:  ¬(~<G>178_2)
//│ Type: ⊤

fun bind: [G] -> (CodeBase[out Int, out G, out Any], [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out Int, out C | G, out Any]) -> CodeBase[out Int, out G, out Any]
fun bind(rhs, k) = `let x = rhs `in k(x)
bind
//│ Type: forall G213_2: (CodeBase[out Int, out G213_2, ?], forall C214_3: (CodeBase[out Int, out C214_3, ?]) ->{⊥} CodeBase[out Int, out C214_3 ∨ G213_2, ?]) ->{⊥} CodeBase[out Int, out G213_2, ?]


fun body: [G] -> (CodeBase[out Int, out G, out Any], CodeBase[out Int, out G, out Any]) -> Int -> CodeBase[out Int, out G, out Any]
fun body(x, y) = case
  0 then x
  1 then y
  n then bind of x `+ y, (z => body(y, z)(n - 1)): [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out Int, out C, out Any]
body
//│ Type: forall G225_2: (CodeBase[out Int, out G225_2, ?], CodeBase[out Int, out G225_2, ?]) ->{⊥} (Int) ->{⊥} CodeBase[out Int, out G225_2, ?]

fun gib(n) = (x, y) `=> body(x, y)(n)
let g5 = run(gib(5))
g5
//│ Type: (Int, Int) -> Int
