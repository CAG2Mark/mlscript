:global
:bbml


:fixme // parsing
fun f x = f
//│ Elab: { fun x = x#0; }‹›
//│ /!!!\ Uncaught error: scala.MatchError: Ref(x) (of class hkmc2.semantics.Term$Ref)

fun f(x) = f
f
//│ Elab: { fun f(x@2) = f#0; f#1 }‹›
//│ Type: α1_0
//│ Where:
//│   ((((⊤) ∧ (¬(⊥))) ∧ (α2_0)) ->{⊥} ((⊤) ∧ (¬(⊥))) ∧ (α1_0)) ∧ (¬(⊥)) <: α1_0

fun f(x) = f(x)
f
//│ Elab: { fun f(x@2) = f#0(x@2#0)‹›‹›; f#1 }‹›
//│ Type: α3_0
//│ Where:
//│   ((((⊤) ∧ (¬(⊥))) ∧ (α4_0)) ->{((⊤) ∧ (¬(⊥))) ∧ (α5_0)} ((⊤) ∧ (¬(⊥))) ∧ (α6_0)) ∧ (¬(⊥)) <: α3_0
//│   α3_0 <: ¬((⊤) ∧ (¬((((⊤) ∧ (¬(⊥))) ∧ (α4_0)) ->{((⊤) ∧ (¬(⊥))) ∧ (α5_0)} ((⊤) ∧ (¬(⊥))) ∧ (α6_0))))

:todo
fun f(x) = f(x.a)
//│ Elab: { fun f(x@2) = f#0(x@2#0.a‹›)‹›‹›; }‹›
//│ /!!!\ Uncaught error: scala.MatchError: Sel(Ref(x@2),Ident(a)) (of class hkmc2.semantics.Term$Sel)


class Foo[A](a: A)
//│ Elab: { class Foo[out A@2](a@3: A@2#0) { }‹›; }‹›
//│ Type: ⊤

:todo proper error
Foo(123)
//│ Elab: { class:Foo#0(123‹›)‹›‹› }‹›
//│ /!!!\ Uncaught error: scala.MatchError: Ref(class:Foo) (of class hkmc2.semantics.Term$Ref)

new Foo(123)
//│ Elab: { new class:Foo(Lit(IntLit(123)))‹› }‹›
//│ Type: Foo[in α9_0 out α10_0]
//│ Where:
//│   (Int) ∧ (¬(⊥)) <: α10_0

:todo proper error
fun f(x) = f(Foo.a(x))
//│ Elab: { fun f(x@2) = f#0(class:Foo#1.a‹›(x@2#0)‹›‹›)‹›‹›; }‹›
//│ /!!!\ Uncaught error: scala.MatchError: Sel(Ref(class:Foo),Ident(a)) (of class hkmc2.semantics.Term$Sel)

fun f(x) = f(x.Foo#a)
f
//│ Elab: { fun f(x@2) = f#0(x@2#0.class:Foo#2#a‹›)‹›‹›; f#1 }‹›
//│ Type: α13_0
//│ Where:
//│   ((((⊤) ∧ (¬(⊥))) ∧ (α14_0)) ->{((⊤) ∧ (¬(⊥))) ∧ (α17_0)} ((⊤) ∧ (¬(⊥))) ∧ (α18_0)) ∧ (¬(⊥)) <: α13_0
//│   ((⊤) ∧ (¬(⊥))) ∧ (α16_0) <: α14_0
//│   α16_0 <: ¬((⊤) ∧ (¬((⊥) ∨ (Foo[in ((⊤) ∧ (¬(⊥))) ∧ (α15_0) out ((⊤) ∧ (¬(⊥))) ∧ (α16_0)]))))
//│   α14_0 <: ¬((⊤) ∧ (¬((⊥) ∨ (Foo[in ((⊤) ∧ (¬(⊥))) ∧ (α15_0) out ((⊤) ∧ (¬(⊥))) ∧ (α16_0)]))))
//│   α13_0 <: ¬((⊤) ∧ (¬((((⊤) ∧ (¬(⊥))) ∧ (α16_0)) ->{((⊤) ∧ (¬(⊥))) ∧ (α17_0)} ((⊤) ∧ (¬(⊥))) ∧ (α18_0))))


