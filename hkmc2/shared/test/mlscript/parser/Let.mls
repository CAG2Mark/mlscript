:global
:p


:pe
let
//│ |let|
//│ ╔══[PARSE ERROR] Expected expression after let binding keyword 'let'; found end of input instead
//│ ║  l.6: 	let
//│ ╙──     	   ^
//│ AST: List(Empty)

:pe
let x
//│ |let| |x|
//│ ╔══[PARSE ERROR] Expected '=' keyword after let binding head; found end of input instead
//│ ║  l.14: 	let x
//│ ╙──      	     ^
//│ AST: List(Empty)

:pe
let x =
//│ |let| |x| |=|
//│ ╔══[PARSE ERROR] Expected expression after let binding equals sign; found end of input instead
//│ ║  l.22: 	let x =
//│ ╙──      	       ^
//│ AST: List(Empty)

let x = y
//│ |let| |x| |=| |y|
//│ AST: List(Let(Ident(x),Ident(y),None))

:pe
let x = y in
//│ |let| |x| |=| |y| |in|
//│ ╔══[PARSE ERROR] Expected expression after let binding `in` clause; found end of input instead
//│ ║  l.34: 	let x = y in
//│ ╙──      	            ^
//│ AST: List(Empty)

let x = y in z
//│ |let| |x| |=| |y| |in| |z|
//│ AST: List(Let(Ident(x),Ident(y),Some(Ident(z))))

:pe
let x = y class
//│ |let| |x| |=| |y| |class|
//│ ╔══[PARSE ERROR] Expected 'in' keyword or end of input after let binding right-hand side; found 'class' keyword instead
//│ ║  l.46: 	let x = y class
//│ ╙──      	          ^^^^^
//│ AST: List(Empty)



let x = y
foo
//│ |let| |x| |=| |y|↵|foo|
//│ AST: List(Let(Ident(x),Ident(y),None), Ident(foo))


:pe
let
  x
//│ |let|→|x|←|
//│ ╔══[PARSE ERROR] Expected '=' keyword after let binding head; found end of input instead
//│ ║  l.63: 	  x
//│ ╙──      	   ^
//│ AST: List(Empty)

let
  x = 1
//│ |let|→|x| |=| |1|←|
//│ AST: List(Let(Ident(x),IntLit(1),None))

:pe
let
  with
//│ |let|→|with|←|
//│ ╔══[PARSE ERROR] Expected expression after let binding keyword 'let'; found 'with' keyword instead
//│ ║  l.77: 	  with
//│ ╙──      	  ^^^^
//│ AST: List(Empty)


:fixme
let x = 1 in
  x
//│ |let| |x| |=| |1| |in|→|x|←|
//│ ╔══[PARSE ERROR] Expected expression after let binding `in` clause; found indented block instead
//│ ║  l.87: 	  x
//│ ╙──      	^^
//│ AST: List(Empty)



:pe
if
//│ |if|
//│ ╔══[PARSE ERROR] Expected 'val' keyword, 'let' keyword, 'type' keyword, 'class' keyword, 'trait' keyword, 'module' keyword, 'abstract' keyword, 'mut' keyword, 'virtual' keyword, 'override' keyword, 'declare' keyword, 'public' keyword, 'private' keyword, or expression after start of statement; found 'if' keyword instead
//│ ║  l.97: 	if
//│ ╙──      	^^
//│ AST: List(Empty)






