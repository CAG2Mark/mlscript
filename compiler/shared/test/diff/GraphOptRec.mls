:NewParser
:ParseOnly

:GOInterp
:GraphOpt
class True
class False
fun fib(n) = if n < 2 then n else fib(n-1) + fib(n-2)
fib(20)
//│ |#class| |True|↵|#class| |False|↵|#fun| |fib|(|n|)| |#=| |#if| |n| |<| |2| |#then| |n| |#else| |fib|(|n|-|1|)| |+| |fib|(|n|-|2|)|↵|fib|(|20|)|
//│ Parsed: {class True {}; class False {}; fun fib = (n,) => if (<(n,)(2,)) then n else +(fib(-(n,)(1,),),)(fib(-(n,)(2,),),); fib(20,)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, fib, None, [], Lam(Tup(_: Var(n)), If(IfThen(App(App(Var(<), Tup(_: Var(n))), Tup(_: IntLit(2))), Var(n), Some(App(App(Var(+), Tup(_: App(Var(fib), Tup(_: App(App(Var(-), Tup(_: Var(n))), Tup(_: IntLit(1))))))), Tup(_: App(Var(fib), Tup(_: App(App(Var(-), Tup(_: Var(n))), Tup(_: IntLit(2))))))))))), App(Var(fib), Tup(_: IntLit(20))))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, [])}, {
//│ Def(0, fib, [n%0], [{}], 
//│ [None], 1, 
//│ let x%0 = <(n%0,2)
//│   in let join j%0(x%6) = x%6
//│     in if x%0
//│       true => jump j%0(n%0)
//│       false => let x%1 = -(n%0,1)
//│         in let* (x%2) = fib(x%1)
//│           in let x%3 = -(n%0,2)
//│             in let* (x%4) = fib(x%3)
//│               in let x%5 = +(x%2,x%4)
//│                 in jump j%0(x%5)
//│ )
//│ },
//│ let* (x%7) = fib(20)
//│   in x%7)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, [])}, {
//│ Def(0, fib, [n%0], [{EDirect}], 
//│ [None], 1, 
//│ let x%0 = <(n%0,2)
//│   in if x%0
//│     true => n%0
//│     false => let x%1 = -(n%0,1)
//│       in let* (x%2) = fib(x%1)
//│         in let x%3 = -(n%0,2)
//│           in let* (x%4) = fib(x%3)
//│             in let x%5 = +(x%2,x%4)
//│               in x%5
//│ )
//│ },
//│ let* (x%7) = fib(20)
//│   in x%7)
//│ 
//│ Interpreted ------------------------------
//│ 6765
//│ 
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 6765

:GOInterp
:GraphOpt
class True
class False
fun odd(x) = if x == 0 then False else even(x-1)
fun even(x) = if x == 0 then True else odd(x-1)
fun foo() = odd(10)
foo()
//│ |#class| |True|↵|#class| |False|↵|#fun| |odd|(|x|)| |#=| |#if| |x| |==| |0| |#then| |False| |#else| |even|(|x|-|1|)|↵|#fun| |even|(|x|)| |#=| |#if| |x| |==| |0| |#then| |True| |#else| |odd|(|x|-|1|)|↵|#fun| |foo|(||)| |#=| |odd|(|10|)|↵|foo|(||)|
//│ Parsed: {class True {}; class False {}; fun odd = (x,) => if (==(x,)(0,)) then False else even(-(x,)(1,),); fun even = (x,) => if (==(x,)(0,)) then True else odd(-(x,)(1,),); fun foo = () => odd(10,); foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, odd, None, [], Lam(Tup(_: Var(x)), If(IfThen(App(App(Var(==), Tup(_: Var(x))), Tup(_: IntLit(0))), Var(False), Some(App(Var(even), Tup(_: App(App(Var(-), Tup(_: Var(x))), Tup(_: IntLit(1))))))))), NuFunDef(None, even, None, [], Lam(Tup(_: Var(x)), If(IfThen(App(App(Var(==), Tup(_: Var(x))), Tup(_: IntLit(0))), Var(True), Some(App(Var(odd), Tup(_: App(App(Var(-), Tup(_: Var(x))), Tup(_: IntLit(1))))))))), NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(odd), Tup(_: IntLit(10))))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, [])}, {
//│ Def(0, odd, [x%0], [{}], 
//│ [None], 1, 
//│ let x%1 = ==(x%0,0)
//│   in let join j%0(x%5) = x%5
//│     in if x%1
//│       true => let x%2 = False()
//│         in jump j%0(x%2)
//│       false => let x%3 = -(x%0,1)
//│         in let* (x%4) = even(x%3)
//│           in jump j%0(x%4)
//│ )
//│ Def(1, even, [x%6], [{}], 
//│ [None], 1, 
//│ let x%7 = ==(x%6,0)
//│   in let join j%1(x%11) = x%11
//│     in if x%7
//│       true => let x%8 = True()
//│         in jump j%1(x%8)
//│       false => let x%9 = -(x%6,1)
//│         in let* (x%10) = odd(x%9)
//│           in jump j%1(x%10)
//│ )
//│ Def(2, foo, [], [{}], 
//│ [None], 1, 
//│ let* (x%12) = odd(10)
//│   in x%12
//│ )
//│ },
//│ let* (x%13) = foo()
//│   in x%13)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, [])}, {
//│ Def(0, odd, [x%0], [{EDirect}], 
//│ [None], 1, 
//│ let x%1 = ==(x%0,0)
//│   in if x%1
//│     true => let x%2 = False()
//│       in x%2
//│     false => let x%3 = -(x%0,1)
//│       in let* (x%4) = even(x%3)
//│         in x%4
//│ )
//│ Def(1, even, [x%6], [{EDirect}], 
//│ [None], 1, 
//│ let x%7 = ==(x%6,0)
//│   in if x%7
//│     true => let x%8 = True()
//│       in x%8
//│     false => let x%9 = -(x%6,1)
//│       in let* (x%10) = odd(x%9)
//│         in x%10
//│ )
//│ Def(2, foo, [], [], 
//│ [None], 1, 
//│ let* (x%12) = odd(10)
//│   in x%12
//│ )
//│ },
//│ let* (x%13) = foo()
//│   in x%13)
//│ 
//│ Interpreted ------------------------------
//│ False()
//│ 
//│ 
//│ 
//│ Interpreted ------------------------------
//│ False()

:GOInterp
:GraphOpt
class True
class False
class A
class B(b)
fun not(x) =
  if x then False else True
fun foo(x) =
  if x then A
       else B(foo(not(x)))
fun main() = foo(False)
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |A|↵|#class| |B|(|b|)|↵|#fun| |not|(|x|)| |#=|→|#if| |x| |#then| |False| |#else| |True|←|↵|#fun| |foo|(|x|)| |#=|→|#if| |x| |#then| |A|→|#else| |B|(|foo|(|not|(|x|)|)|)|←|←|↵|#fun| |main|(||)| |#=| |foo|(|False|)|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class A {}; class B(b,) {}; fun not = (x,) => {if (x) then False else True}; fun foo = (x,) => {if (x) then A else B(foo(not(x,),),)}; fun main = () => foo(False,); main()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(b)), (), None, None, TypingUnit()), NuFunDef(None, not, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, main, None, [], Lam(Tup(), App(Var(foo), Tup(_: Var(False))))), App(Var(main), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, not, [x%0], [{}], 
//│ [None], 1, 
//│ let join j%0(x%3) = x%3
//│   in if x%0
//│     true => let x%1 = False()
//│       in jump j%0(x%1)
//│     false => let x%2 = True()
//│       in jump j%0(x%2)
//│ )
//│ Def(1, foo, [x%4], [{}], 
//│ [None], 1, 
//│ let join j%1(x%9) = x%9
//│   in if x%4
//│     true => let x%5 = A()
//│       in jump j%1(x%5)
//│     false => let* (x%6) = not(x%4)
//│       in let* (x%7) = foo(x%6)
//│         in let x%8 = B(x%7)
//│           in jump j%1(x%8)
//│ )
//│ Def(2, main, [], [{}], 
//│ [None], 1, 
//│ let x%10 = False()
//│   in let* (x%11) = foo(x%10)
//│     in x%11
//│ )
//│ },
//│ let* (x%12) = main()
//│   in x%12)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, not, [x%0], [{EDestruct，EDirect}], 
//│ [None], 1, 
//│ if x%0
//│   true => let x%1 = False()
//│     in x%1
//│   false => let x%2 = True()
//│     in x%2
//│ )
//│ Def(1, foo, [x%4], [{EDestruct，EDirect}], 
//│ [None], 1, 
//│ if x%4
//│   true => let x%5 = A()
//│     in x%5
//│   false => let* (x%6) = not(x%4)
//│     in let* (x%7) = foo(x%6)
//│       in let x%8 = B(x%7)
//│         in x%8
//│ )
//│ Def(2, main, [], [], 
//│ [None], 1, 
//│ let x%10 = False()
//│   in let* (x%11) = foo(x%10)
//│     in x%11
//│ )
//│ },
//│ let* (x%12) = main()
//│   in x%12)
//│ 
//│ Interpreted ------------------------------
//│ B(A())
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, not, [x%0], [{EDestruct，EDirect}], 
//│ [None], 1, 
//│ if x%0
//│   true => let x%1 = False()
//│     in x%1
//│   false => let x%2 = True()
//│     in x%2
//│ )
//│ Def(1, foo, [x%4], [{EDestruct，EDirect}], 
//│ [None], 1, 
//│ if x%4
//│   true => let x%5 = A()
//│     in x%5
//│   false => let* (x%6) = not(x%4)
//│     in let* (x%7) = foo(x%6)
//│       in let x%8 = B(x%7)
//│         in x%8
//│ )
//│ Def(2, main, [], [], 
//│ [Some(ICtor(B))], 1, 
//│ let x%10 = False()
//│   in let* (x%11) = foo$D%1(x%10)
//│     in x%11
//│ )
//│ Def(7, foo$D%1, [x%4], [{EDestruct，EDirect}], 
//│ [Some(ICtor(B))], 1, 
//│ let* (x%6) = not(x%4)
//│   in let* (x%7) = foo(x%6)
//│     in let x%8 = B(x%7)
//│       in x%8
//│ )
//│ },
//│ let* (x%12) = main()
//│   in x%12)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ B(A())

:GOInterp
:GraphOpt
class True
class False
class A()
class B(b)
fun aaa() =
  let m = 1
  let n = 2
  let p = 3
  let q = 4
  m + n - p + q
fun bbb() =
  let x = aaa()
  x * 100 + 4
fun not(x) =
  if x then False else True
fun foo(x) =
  if x then A
       else B(foo(not(x)))
fun main() =
  let x = foo(False)
  if x is
    A then aaa()
    B(b1) then bbb()
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |A|(||)|↵|#class| |B|(|b|)|↵|#fun| |aaa|(||)| |#=|→|#let| |m| |#=| |1|↵|#let| |n| |#=| |2|↵|#let| |p| |#=| |3|↵|#let| |q| |#=| |4|↵|m| |+| |n| |-| |p| |+| |q|←|↵|#fun| |bbb|(||)| |#=|→|#let| |x| |#=| |aaa|(||)|↵|x| |*| |100| |+| |4|←|↵|#fun| |not|(|x|)| |#=|→|#if| |x| |#then| |False| |#else| |True|←|↵|#fun| |foo|(|x|)| |#=|→|#if| |x| |#then| |A|→|#else| |B|(|foo|(|not|(|x|)|)|)|←|←|↵|#fun| |main|(||)| |#=|→|#let| |x| |#=| |foo|(|False|)|↵|#if| |x| |is|→|A| |#then| |aaa|(||)|↵|B|(|b1|)| |#then| |bbb|(||)|←|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class A() {}; class B(b,) {}; fun aaa = () => {let m = 1; let n = 2; let p = 3; let q = 4; +(-(+(m,)(n,),)(p,),)(q,)}; fun bbb = () => {let x = aaa(); +(*(x,)(100,),)(4,)}; fun not = (x,) => {if (x) then False else True}; fun foo = (x,) => {if (x) then A else B(foo(not(x,),),)}; fun main = () => {let x = foo(False,); if x is ‹(A) then aaa(); (B(b1,)) then bbb()›}; main()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(b)), (), None, None, TypingUnit()), NuFunDef(None, aaa, None, [], Lam(Tup(), Blk(...))), NuFunDef(None, bbb, None, [], Lam(Tup(), Blk(...))), NuFunDef(None, not, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, main, None, [], Lam(Tup(), Blk(...))), App(Var(main), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [{}], 
//│ [None], 1, 
//│ let x%0 = 1
//│   in let x%1 = 2
//│     in let x%2 = 3
//│       in let x%3 = 4
//│         in let x%4 = +(x%0,x%1)
//│           in let x%5 = -(x%4,x%2)
//│             in let x%6 = +(x%5,x%3)
//│               in x%6
//│ )
//│ Def(1, bbb, [], [{}], 
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(2, not, [x%10], [{}], 
//│ [None], 1, 
//│ let join j%0(x%13) = x%13
//│   in if x%10
//│     true => let x%11 = False()
//│       in jump j%0(x%11)
//│     false => let x%12 = True()
//│       in jump j%0(x%12)
//│ )
//│ Def(3, foo, [x%14], [{}], 
//│ [None], 1, 
//│ let join j%1(x%19) = x%19
//│   in if x%14
//│     true => let x%15 = A()
//│       in jump j%1(x%15)
//│     false => let* (x%16) = not(x%14)
//│       in let* (x%17) = foo(x%16)
//│         in let x%18 = B(x%17)
//│           in jump j%1(x%18)
//│ )
//│ Def(4, main, [], [{}], 
//│ [None], 1, 
//│ let x%20 = False()
//│   in let* (x%21) = foo(x%20)
//│     in let join j%2(x%25) = x%25
//│       in case x%21 of
//│         A => let* (x%22) = aaa()
//│           in jump j%2(x%22)
//│         B => let x%23 = x%21.b
//│           in let* (x%24) = bbb()
//│             in jump j%2(x%24)
//│ )
//│ },
//│ let* (x%26) = main()
//│   in x%26)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [], 
//│ [None], 1, 
//│ let x%4 = +(1,2)
//│   in let x%5 = -(x%4,3)
//│     in let x%6 = +(x%5,4)
//│       in x%6
//│ )
//│ Def(1, bbb, [], [], 
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(2, not, [x%10], [{EDestruct，EDirect}], 
//│ [None], 1, 
//│ if x%10
//│   true => let x%11 = False()
//│     in x%11
//│   false => let x%12 = True()
//│     in x%12
//│ )
//│ Def(3, foo, [x%14], [{EDestruct，EDirect}], 
//│ [None], 1, 
//│ if x%14
//│   true => let x%15 = A()
//│     in x%15
//│   false => let* (x%16) = not(x%14)
//│     in let* (x%17) = foo(x%16)
//│       in let x%18 = B(x%17)
//│         in x%18
//│ )
//│ Def(4, main, [], [], 
//│ [None], 1, 
//│ let x%20 = False()
//│   in let* (x%21) = foo(x%20)
//│     in case x%21 of
//│       A => let* (x%22) = aaa()
//│         in x%22
//│       B => let* (x%24) = bbb()
//│         in x%24
//│ )
//│ },
//│ let* (x%26) = main()
//│   in x%26)
//│ 
//│ Interpreted ------------------------------
//│ 404
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [], 
//│ [None], 1, 
//│ let x%4 = +(1,2)
//│   in let x%5 = -(x%4,3)
//│     in let x%6 = +(x%5,4)
//│       in x%6
//│ )
//│ Def(1, bbb, [], [], 
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(2, not, [x%10], [{EDestruct，EDirect}], 
//│ [None], 1, 
//│ if x%10
//│   true => let x%11 = False()
//│     in x%11
//│   false => let x%12 = True()
//│     in x%12
//│ )
//│ Def(3, foo, [x%14], [{EDestruct，EDirect}], 
//│ [None], 1, 
//│ if x%14
//│   true => let x%15 = A()
//│     in x%15
//│   false => let* (x%16) = not(x%14)
//│     in let* (x%17) = foo(x%16)
//│       in let x%18 = B(x%17)
//│         in x%18
//│ )
//│ Def(4, main, [], [], 
//│ [None], 1, 
//│ let x%20 = False()
//│   in let* (x%21) = foo$D%1(x%20)
//│     in case x%21 of
//│       A => let* (x%22) = aaa()
//│         in x%22
//│       B => let* (x%24) = bbb()
//│         in x%24
//│ )
//│ Def(10, foo$D%1, [x%14], [{EDestruct，EDirect}], 
//│ [Some(ICtor(B))], 1, 
//│ let* (x%16) = not(x%14)
//│   in let* (x%17) = foo(x%16)
//│     in let x%18 = B(x%17)
//│       in x%18
//│ )
//│ },
//│ let* (x%26) = main()
//│   in x%26)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 404


:GOInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun foo() = odd(S(S(S(O))))
foo()
//│ |#class| |True|↵|#class| |False|↵|#class| |S|(|s|)|↵|#class| |O|↵|#fun| |odd|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |False|↵|S|(|s|)| |#then| |even|(|s|)|←|←|↵|#fun| |even|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |True|↵|S|(|s|)| |#then| |odd|(|s|)|←|←|↵|#fun| |foo|(||)| |#=| |odd|(|S|(|S|(|S|(|O|)|)|)|)|↵|foo|(||)|
//│ Parsed: {class True {}; class False {}; class S(s,) {}; class O {}; fun odd = (x,) => {if x is ‹(O) then False; (S(s,)) then even(s,)›}; fun even = (x,) => {if x is ‹(O) then True; (S(s,)) then odd(s,)›}; fun foo = () => odd(S(S(S(O,),),),); foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, S, (), Tup(_: Var(s)), (), None, None, TypingUnit()), NuTypeDef(class, O, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, odd, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, even, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(odd), Tup(_: App(Var(S), Tup(_: App(Var(S), Tup(_: App(Var(S), Tup(_: Var(O))))))))))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{}], 
//│ [None], 1, 
//│ let join j%0(x%4) = x%4
//│   in case x%0 of
//│     O => let x%1 = False()
//│       in jump j%0(x%1)
//│     S => let x%2 = x%0.s
//│       in let* (x%3) = even(x%2)
//│         in jump j%0(x%3)
//│ )
//│ Def(1, even, [x%5], [{}], 
//│ [None], 1, 
//│ let join j%1(x%9) = x%9
//│   in case x%5 of
//│     O => let x%6 = True()
//│       in jump j%1(x%6)
//│     S => let x%7 = x%5.s
//│       in let* (x%8) = odd(x%7)
//│         in jump j%1(x%8)
//│ )
//│ Def(2, foo, [], [{}], 
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let x%13 = S(x%12)
//│         in let* (x%14) = odd(x%13)
//│           in x%14
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct，EDirect，ESelect(s)}], 
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct，EDirect，ESelect(s)}], 
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [], 
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let x%13 = S(x%12)
//│         in let* (x%14) = odd(x%13)
//│           in x%14
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct，EDirect，ESelect(s)}], 
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct，EDirect，ESelect(s)}], 
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [], 
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let* (x%14) = odd$D%1$S%0(x%12)
//│         in x%14
//│ )
//│ Def(8, odd$D%1$S%0, [x%0_s], [{EDestruct，EDirect，ESelect(s)}], 
//│ [None], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ True()

:GOInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun mk(n) = if n > 0 then S(mk(n - 1)) else O
fun foo() = odd(mk(10))
foo()
//│ |#class| |True|↵|#class| |False|↵|#class| |S|(|s|)|↵|#class| |O|↵|#fun| |odd|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |False|↵|S|(|s|)| |#then| |even|(|s|)|←|←|↵|#fun| |even|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |True|↵|S|(|s|)| |#then| |odd|(|s|)|←|←|↵|#fun| |mk|(|n|)| |#=| |#if| |n| |>| |0| |#then| |S|(|mk|(|n| |-| |1|)|)| |#else| |O|↵|#fun| |foo|(||)| |#=| |odd|(|mk|(|10|)|)|↵|foo|(||)|
//│ Parsed: {class True {}; class False {}; class S(s,) {}; class O {}; fun odd = (x,) => {if x is ‹(O) then False; (S(s,)) then even(s,)›}; fun even = (x,) => {if x is ‹(O) then True; (S(s,)) then odd(s,)›}; fun mk = (n,) => if (>(n,)(0,)) then S(mk(-(n,)(1,),),) else O; fun foo = () => odd(mk(10,),); foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, S, (), Tup(_: Var(s)), (), None, None, TypingUnit()), NuTypeDef(class, O, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, odd, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, even, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, mk, None, [], Lam(Tup(_: Var(n)), If(IfThen(App(App(Var(>), Tup(_: Var(n))), Tup(_: IntLit(0))), App(Var(S), Tup(_: App(Var(mk), Tup(_: App(App(Var(-), Tup(_: Var(n))), Tup(_: IntLit(1))))))), Some(Var(O))))), NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(odd), Tup(_: App(Var(mk), Tup(_: IntLit(10))))))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{}], 
//│ [None], 1, 
//│ let join j%0(x%4) = x%4
//│   in case x%0 of
//│     O => let x%1 = False()
//│       in jump j%0(x%1)
//│     S => let x%2 = x%0.s
//│       in let* (x%3) = even(x%2)
//│         in jump j%0(x%3)
//│ )
//│ Def(1, even, [x%5], [{}], 
//│ [None], 1, 
//│ let join j%1(x%9) = x%9
//│   in case x%5 of
//│     O => let x%6 = True()
//│       in jump j%1(x%6)
//│     S => let x%7 = x%5.s
//│       in let* (x%8) = odd(x%7)
//│         in jump j%1(x%8)
//│ )
//│ Def(2, mk, [n%0], [{}], 
//│ [None], 1, 
//│ let x%10 = >(n%0,0)
//│   in let join j%2(x%15) = x%15
//│     in if x%10
//│       true => let x%11 = -(n%0,1)
//│         in let* (x%12) = mk(x%11)
//│           in let x%13 = S(x%12)
//│             in jump j%2(x%13)
//│       false => let x%14 = O()
//│         in jump j%2(x%14)
//│ )
//│ Def(3, foo, [], [{}], 
//│ [None], 1, 
//│ let* (x%16) = mk(10)
//│   in let* (x%17) = odd(x%16)
//│     in x%17
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct，EDirect，ESelect(s)}], 
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct，EDirect，ESelect(s)}], 
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, mk, [n%0], [{EDirect}], 
//│ [None], 1, 
//│ let x%10 = >(n%0,0)
//│   in if x%10
//│     true => let x%11 = -(n%0,1)
//│       in let* (x%12) = mk(x%11)
//│         in let x%13 = S(x%12)
//│           in x%13
//│     false => let x%14 = O()
//│       in x%14
//│ )
//│ Def(3, foo, [], [], 
//│ [None], 1, 
//│ let* (x%16) = mk(10)
//│   in let* (x%17) = odd(x%16)
//│     in x%17
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Interpreted ------------------------------
//│ False()
//│ 
//│ 
//│ 
//│ Interpreted ------------------------------
//│ False()
