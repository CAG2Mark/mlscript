:NewParser
:ParseOnly

:GraphInterp
:GraphOpt
class True
class False
fun fib(n) = if n < 2 then n else fib(n-1) + fib(n-2)
fib(20)
//│ |#class| |True|↵|#class| |False|↵|#fun| |fib|(|n|)| |#=| |#if| |n| |<| |2| |#then| |n| |#else| |fib|(|n|-|1|)| |+| |fib|(|n|-|2|)|↵|fib|(|20|)|
//│ Parsed: {class True {}; class False {}; fun fib = (n,) => if (<(n,)(2,)) then n else +(fib(-(n,)(1,),),)(fib(-(n,)(2,),),); fib(20,)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, fib, None, [], Lam(Tup(_: Var(n)), If(IfThen(App(App(Var(<), Tup(_: Var(n))), Tup(_: IntLit(2))), Var(n), Some(App(App(Var(+), Tup(_: App(Var(fib), Tup(_: App(App(Var(-), Tup(_: Var(n))), Tup(_: IntLit(1))))))), Tup(_: App(Var(fib), Tup(_: App(App(Var(-), Tup(_: Var(n))), Tup(_: IntLit(2))))))))))), App(Var(fib), Tup(_: IntLit(20))))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, [])}, {
//│ Def(0, fib, [n%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = <(n%0,2)
//│   in if x%0
//│     true => jump j%0(n%0)
//│     false => let x%1 = -(n%0,1)
//│       in let* (x%2) = fib(x%1)
//│         in let x%3 = -(n%0,2)
//│           in let* (x%4) = fib(x%3)
//│             in let x%5 = +(x%2,x%4)
//│               in jump j%0(x%5)
//│ )
//│ Def(1, @join j%0, [x%6], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%6
//│ )
//│ },
//│ let* (x%7) = fib(20)
//│   in x%7)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, [])}, {
//│ Def(0, fib, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = <(n%0,2)
//│   in if x%0
//│     true => n%0
//│     false => let x%1 = -(n%0,1)
//│       in let* (x%2) = fib(x%1)
//│         in let x%3 = -(n%0,2)
//│           in let* (x%4) = fib(x%3)
//│             in let x%5 = +(x%2,x%4)
//│               in x%5
//│ )
//│ },
//│ let* (x%7) = fib(20)
//│   in x%7)
//│ 
//│ Interpreted ------------------------------
//│ 6765
//│ 
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 6765
//│ 
//│ 
//│ Fuel used: 1

:GraphInterp
:GraphOpt
class True
class False
fun odd(x) = if x == 0 then False else even(x-1)
fun even(x) = if x == 0 then True else odd(x-1)
fun foo() = odd(10)
foo()
//│ |#class| |True|↵|#class| |False|↵|#fun| |odd|(|x|)| |#=| |#if| |x| |==| |0| |#then| |False| |#else| |even|(|x|-|1|)|↵|#fun| |even|(|x|)| |#=| |#if| |x| |==| |0| |#then| |True| |#else| |odd|(|x|-|1|)|↵|#fun| |foo|(||)| |#=| |odd|(|10|)|↵|foo|(||)|
//│ Parsed: {class True {}; class False {}; fun odd = (x,) => if (==(x,)(0,)) then False else even(-(x,)(1,),); fun even = (x,) => if (==(x,)(0,)) then True else odd(-(x,)(1,),); fun foo = () => odd(10,); foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, odd, None, [], Lam(Tup(_: Var(x)), If(IfThen(App(App(Var(==), Tup(_: Var(x))), Tup(_: IntLit(0))), Var(False), Some(App(Var(even), Tup(_: App(App(Var(-), Tup(_: Var(x))), Tup(_: IntLit(1))))))))), NuFunDef(None, even, None, [], Lam(Tup(_: Var(x)), If(IfThen(App(App(Var(==), Tup(_: Var(x))), Tup(_: IntLit(0))), Var(True), Some(App(Var(odd), Tup(_: App(App(Var(-), Tup(_: Var(x))), Tup(_: IntLit(1))))))))), NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(odd), Tup(_: IntLit(10))))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, [])}, {
//│ Def(0, odd, [x%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%1 = ==(x%0,0)
//│   in if x%1
//│     true => let x%2 = False()
//│       in jump j%0(x%2)
//│     false => let x%3 = -(x%0,1)
//│       in let* (x%4) = even(x%3)
//│         in jump j%0(x%4)
//│ )
//│ Def(1, @join j%0, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%5
//│ )
//│ Def(2, even, [x%6], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%7 = ==(x%6,0)
//│   in if x%7
//│     true => let x%8 = True()
//│       in jump j%1(x%8)
//│     false => let x%9 = -(x%6,1)
//│       in let* (x%10) = odd(x%9)
//│         in jump j%1(x%10)
//│ )
//│ Def(3, @join j%1, [x%11], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%11
//│ )
//│ Def(4, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%12) = odd(10)
//│   in x%12
//│ )
//│ },
//│ let* (x%13) = foo()
//│   in x%13)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, [])}, {
//│ Def(0, odd, [x%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%1 = ==(x%0,0)
//│   in if x%1
//│     true => let x%2 = False()
//│       in x%2
//│     false => let x%3 = -(x%0,1)
//│       in let* (x%4) = even(x%3)
//│         in x%4
//│ )
//│ Def(2, even, [x%6], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%7 = ==(x%6,0)
//│   in if x%7
//│     true => let x%8 = True()
//│       in x%8
//│     false => let x%9 = -(x%6,1)
//│       in let* (x%10) = odd(x%9)
//│         in x%10
//│ )
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%12) = odd(10)
//│   in x%12
//│ )
//│ },
//│ let* (x%13) = foo()
//│   in x%13)
//│ 
//│ Interpreted ------------------------------
//│ False()
//│ 
//│ 
//│ 
//│ Interpreted ------------------------------
//│ False()
//│ 
//│ 
//│ Fuel used: 1

:GraphInterp
:GraphOpt
class True
class False
class A
class B(b)
fun not(x) =
  if x then False else True
fun foo(x) =
  if x then A
       else B(foo(not(x)))
fun main() = foo(False)
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |A|↵|#class| |B|(|b|)|↵|#fun| |not|(|x|)| |#=|→|#if| |x| |#then| |False| |#else| |True|←|↵|#fun| |foo|(|x|)| |#=|→|#if| |x| |#then| |A|→|#else| |B|(|foo|(|not|(|x|)|)|)|←|←|↵|#fun| |main|(||)| |#=| |foo|(|False|)|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class A {}; class B(b,) {}; fun not = (x,) => {if (x) then False else True}; fun foo = (x,) => {if (x) then A else B(foo(not(x,),),)}; fun main = () => foo(False,); main()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(b)), (), None, None, TypingUnit()), NuFunDef(None, not, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, main, None, [], Lam(Tup(), App(Var(foo), Tup(_: Var(False))))), App(Var(main), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, not, [x%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ if x%0
//│   true => let x%1 = False()
//│     in jump j%0(x%1)
//│   false => let x%2 = True()
//│     in jump j%0(x%2)
//│ )
//│ Def(1, @join j%0, [x%3], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%3
//│ )
//│ Def(2, foo, [x%4], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ if x%4
//│   true => let x%5 = A()
//│     in jump j%1(x%5)
//│   false => let* (x%6) = not(x%4)
//│     in let* (x%7) = foo(x%6)
//│       in let x%8 = B(x%7)
//│         in jump j%1(x%8)
//│ )
//│ Def(3, @join j%1, [x%9], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%9
//│ )
//│ Def(4, main, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = False()
//│   in let* (x%11) = foo(x%10)
//│     in x%11
//│ )
//│ },
//│ let* (x%12) = main()
//│   in x%12)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, not, [x%0], [{EDestruct,EDirect}],
//│ S: None,
//│ I: [[Some(ICtor(False))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ if x%0
//│   true => let x%1 = False()
//│     in x%1
//│   false => let x%2 = True()
//│     in x%2
//│ )
//│ Def(2, foo, [x%4], [{EDestruct,EDirect,EIndirectDestruct}],
//│ S: None,
//│ I: [[Some(ICtor(False))],[Some(IMix(ICtor(False),ICtor(True)))]],
//│ [Some(IMix(ICtor(A),ICtor(B)))], 1, 
//│ if x%4
//│   true => let x%5 = A()
//│     in x%5
//│   false => let* (x%6) = not(x%4)
//│     in let* (x%7) = foo(x%6)
//│       in let x%8 = B(x%7)
//│         in x%8
//│ )
//│ Def(4, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(A),ICtor(B)))], 1, 
//│ let x%10 = False()
//│   in let* (x%11) = foo(x%10)
//│     in x%11
//│ )
//│ },
//│ let* (x%12) = main()
//│   in x%12)
//│ 
//│ Interpreted ------------------------------
//│ B(A())
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(4, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(B)))], 1, 
//│ let x%10 = False()
//│   in let* (x%11) = foo$D%1(x%10)
//│     in x%11
//│ )
//│ Def(7, foo$D%1, [x%4], [{EDestruct,EDirect}],
//│ S: None,
//│ I: [[Some(ICtor(False))]],
//│ [Some(IMix(ICtor(B)))], 1, 
//│ if x%4
//│   true => let x%1 = False()
//│     in jump foo$D%1$M%0(x%1)
//│   false => let x%2 = True()
//│     in jump foo$D%1$M%0(x%2)
//│ )
//│ Def(12, @join foo$D%1$M%0, [x%6], [{EDestruct,EDirect,EIndirectDestruct}],
//│ S: None,
//│ I: [[Some(ICtor(False))],[Some(ICtor(True))]],
//│ [Some(IMix(ICtor(B)))], 1, 
//│ if x%6
//│   true => let x%5 = A()
//│     in let x%8 = B(x%5)
//│       in x%8
//│   false => let* (x%23) = foo$D%1(x%6)
//│     in let x%8 = B(x%23)
//│       in x%8
//│ )
//│ },
//│ let* (x%12) = main()
//│   in x%12)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(4, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(B))], 1, 
//│ let* (x%11) = foo$D%1$D%1()
//│   in x%11
//│ )
//│ Def(16, foo$D%1$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(B))], 1, 
//│ jump foo$D%1$M%0$D%0()
//│ )
//│ Def(18, foo$D%1$M%0$D%0, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(B))], 1, 
//│ let x%5 = A()
//│   in let x%8 = B(x%5)
//│     in x%8
//│ )
//│ },
//│ let* (x%12) = main()
//│   in x%12)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ B(A())
//│ 
//│ 
//│ Fuel used: 3

:GraphInterp
:GraphOpt
class True
class False
class A()
class B(b)
fun aaa() =
  let m = 1
  let n = 2
  let p = 3
  let q = 4
  m + n - p + q
fun bbb() =
  let x = aaa()
  x * 100 + 4
fun not(x) =
  if x then False else True
fun foo(x) =
  if x then A
       else B(foo(not(x)))
fun main() =
  let x = foo(False)
  if x is
    A then aaa()
    B(b1) then bbb()
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |A|(||)|↵|#class| |B|(|b|)|↵|#fun| |aaa|(||)| |#=|→|#let| |m| |#=| |1|↵|#let| |n| |#=| |2|↵|#let| |p| |#=| |3|↵|#let| |q| |#=| |4|↵|m| |+| |n| |-| |p| |+| |q|←|↵|#fun| |bbb|(||)| |#=|→|#let| |x| |#=| |aaa|(||)|↵|x| |*| |100| |+| |4|←|↵|#fun| |not|(|x|)| |#=|→|#if| |x| |#then| |False| |#else| |True|←|↵|#fun| |foo|(|x|)| |#=|→|#if| |x| |#then| |A|→|#else| |B|(|foo|(|not|(|x|)|)|)|←|←|↵|#fun| |main|(||)| |#=|→|#let| |x| |#=| |foo|(|False|)|↵|#if| |x| |is|→|A| |#then| |aaa|(||)|↵|B|(|b1|)| |#then| |bbb|(||)|←|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class A() {}; class B(b,) {}; fun aaa = () => {let m = 1; let n = 2; let p = 3; let q = 4; +(-(+(m,)(n,),)(p,),)(q,)}; fun bbb = () => {let x = aaa(); +(*(x,)(100,),)(4,)}; fun not = (x,) => {if (x) then False else True}; fun foo = (x,) => {if (x) then A else B(foo(not(x,),),)}; fun main = () => {let x = foo(False,); if x is ‹(A) then aaa(); (B(b1,)) then bbb()›}; main()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(b)), (), None, None, TypingUnit()), NuFunDef(None, aaa, None, [], Lam(Tup(), Blk(...))), NuFunDef(None, bbb, None, [], Lam(Tup(), Blk(...))), NuFunDef(None, not, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, main, None, [], Lam(Tup(), Blk(...))), App(Var(main), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = 1
//│   in let x%1 = 2
//│     in let x%2 = 3
//│       in let x%3 = 4
//│         in let x%4 = +(x%0,x%1)
//│           in let x%5 = -(x%4,x%2)
//│             in let x%6 = +(x%5,x%3)
//│               in x%6
//│ )
//│ Def(1, bbb, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(2, not, [x%10], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ if x%10
//│   true => let x%11 = False()
//│     in jump j%0(x%11)
//│   false => let x%12 = True()
//│     in jump j%0(x%12)
//│ )
//│ Def(3, @join j%0, [x%13], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%13
//│ )
//│ Def(4, foo, [x%14], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ if x%14
//│   true => let x%15 = A()
//│     in jump j%1(x%15)
//│   false => let* (x%16) = not(x%14)
//│     in let* (x%17) = foo(x%16)
//│       in let x%18 = B(x%17)
//│         in jump j%1(x%18)
//│ )
//│ Def(5, @join j%1, [x%19], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%19
//│ )
//│ Def(6, main, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%20 = False()
//│   in let* (x%21) = foo(x%20)
//│     in case x%21 of
//│       A => let* (x%22) = aaa()
//│         in jump j%2(x%22)
//│       B => let x%23 = x%21.b
//│         in let* (x%24) = bbb()
//│           in jump j%2(x%24)
//│ )
//│ Def(7, @join j%2, [x%25], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%25
//│ )
//│ },
//│ let* (x%26) = main()
//│   in x%26)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = +(1,2)
//│   in let x%5 = -(x%4,3)
//│     in let x%6 = +(x%5,4)
//│       in x%6
//│ )
//│ Def(1, bbb, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(2, not, [x%10], [{EDestruct,EDirect}],
//│ S: None,
//│ I: [[Some(ICtor(False))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ if x%10
//│   true => let x%11 = False()
//│     in x%11
//│   false => let x%12 = True()
//│     in x%12
//│ )
//│ Def(4, foo, [x%14], [{EDestruct,EDirect,EIndirectDestruct}],
//│ S: None,
//│ I: [[Some(ICtor(False))],[Some(IMix(ICtor(False),ICtor(True)))]],
//│ [Some(IMix(ICtor(A),ICtor(B)))], 1, 
//│ if x%14
//│   true => let x%15 = A()
//│     in x%15
//│   false => let* (x%16) = not(x%14)
//│     in let* (x%17) = foo(x%16)
//│       in let x%18 = B(x%17)
//│         in x%18
//│ )
//│ Def(6, main, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%20 = False()
//│   in let* (x%21) = foo(x%20)
//│     in case x%21 of
//│       A => let* (x%22) = aaa()
//│         in x%22
//│       B => let* (x%24) = bbb()
//│         in x%24
//│ )
//│ },
//│ let* (x%26) = main()
//│   in x%26)
//│ 
//│ Interpreted ------------------------------
//│ 404
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = +(1,2)
//│   in let x%5 = -(x%4,3)
//│     in let x%6 = +(x%5,4)
//│       in x%6
//│ )
//│ Def(1, bbb, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(6, main, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%20 = False()
//│   in let* (x%21) = foo$D%1(x%20)
//│     in case x%21 of
//│       A => let* (x%22) = aaa()
//│         in x%22
//│       B => let* (x%24) = bbb()
//│         in x%24
//│ )
//│ Def(13, foo$D%1, [x%14], [{EDestruct,EDirect}],
//│ S: None,
//│ I: [[Some(ICtor(False))]],
//│ [Some(IMix(ICtor(B)))], 1, 
//│ if x%14
//│   true => let x%11 = False()
//│     in jump foo$D%1$M%0(x%11)
//│   false => let x%12 = True()
//│     in jump foo$D%1$M%0(x%12)
//│ )
//│ Def(14, @join foo$D%1$M%0, [x%16], [{EDestruct,EDirect,EIndirectDestruct}],
//│ S: None,
//│ I: [[Some(ICtor(False))],[Some(ICtor(True))]],
//│ [Some(IMix(ICtor(B)))], 1, 
//│ if x%16
//│   true => let x%15 = A()
//│     in let x%18 = B(x%15)
//│       in x%18
//│   false => let* (x%37) = foo$D%1(x%16)
//│     in let x%18 = B(x%37)
//│       in x%18
//│ )
//│ },
//│ let* (x%26) = main()
//│   in x%26)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = +(1,2)
//│   in let x%5 = -(x%4,3)
//│     in let x%6 = +(x%5,4)
//│       in x%6
//│ )
//│ Def(1, bbb, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(6, main, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%21) = foo$D%1$D%1()
//│   in case x%21 of
//│     A => let* (x%22) = aaa()
//│       in x%22
//│     B => let* (x%24) = bbb()
//│       in x%24
//│ )
//│ Def(18, foo$D%1$M%0$D%0, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(B))], 1, 
//│ let x%15 = A()
//│   in let x%18 = B(x%15)
//│     in x%18
//│ )
//│ Def(22, foo$D%1$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(B))], 1, 
//│ jump foo$D%1$M%0$D%0()
//│ )
//│ },
//│ let* (x%26) = main()
//│   in x%26)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 404
//│ 
//│ 
//│ Fuel used: 3


:GraphInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun foo() = odd(S(S(S(O))))
foo()
//│ |#class| |True|↵|#class| |False|↵|#class| |S|(|s|)|↵|#class| |O|↵|#fun| |odd|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |False|↵|S|(|s|)| |#then| |even|(|s|)|←|←|↵|#fun| |even|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |True|↵|S|(|s|)| |#then| |odd|(|s|)|←|←|↵|#fun| |foo|(||)| |#=| |odd|(|S|(|S|(|S|(|O|)|)|)|)|↵|foo|(||)|
//│ Parsed: {class True {}; class False {}; class S(s,) {}; class O {}; fun odd = (x,) => {if x is ‹(O) then False; (S(s,)) then even(s,)›}; fun even = (x,) => {if x is ‹(O) then True; (S(s,)) then odd(s,)›}; fun foo = () => odd(S(S(S(O,),),),); foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, S, (), Tup(_: Var(s)), (), None, None, TypingUnit()), NuTypeDef(class, O, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, odd, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, even, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(odd), Tup(_: App(Var(S), Tup(_: App(Var(S), Tup(_: App(Var(S), Tup(_: Var(O))))))))))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in jump j%0(x%1)
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in jump j%0(x%3)
//│ )
//│ Def(1, @join j%0, [x%4], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%4
//│ )
//│ Def(2, even, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in jump j%1(x%6)
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in jump j%1(x%8)
//│ )
//│ Def(3, @join j%1, [x%9], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%9
//│ )
//│ Def(4, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let x%13 = S(x%12)
//│         in let* (x%14) = odd(x%13)
//│           in x%14
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let x%13 = S(x%12)
//│         in let* (x%14) = odd(x%13)
//│           in x%14
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%21 = x%7.s
//│         in let* (x%18) = odd$D%1$S%0(x%21)
//│           in x%18
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let* (x%14) = odd$D%1$S%0(x%12)
//│         in x%14
//│ )
//│ Def(9, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let* (x%14) = odd$D%1$S%0$C%0(x%12)
//│         in x%14
//│ )
//│ Def(9, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%26 = x%0_s.s
//│     in let* (x%24) = even$D%1$S%0(x%26)
//│       in x%24
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(13, odd$D%1$S%0$C%0, [x%0_s], [{ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%27 = x%0_s.s
//│   in let* (x%3) = even$D%1$S%0(x%27)
//│     in x%3
//│ )
//│ Def(15, even$D%1$S%0, [x%5_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5_s of
//│   S => let x%21 = x%5_s.s
//│     in let* (x%18) = odd$D%1$S%0(x%21)
//│       in x%18
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let* (x%14) = odd$D%1$S%0$C%0$S%0(x%11)
//│       in x%14
//│ )
//│ Def(9, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%26 = x%0_s.s
//│     in let* (x%24) = even$D%1$S%0(x%26)
//│       in x%24
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(15, even$D%1$S%0, [x%5_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5_s of
//│   S => let x%21 = x%5_s.s
//│     in let* (x%18) = odd$D%1$S%0(x%21)
//│       in x%18
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(16, odd$D%1$S%0$C%0$S%0, [x%0_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even$D%1$S%0(x%0_s_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let* (x%14) = odd$D%1$S%0$C%0$S%0$C%0(x%11)
//│       in x%14
//│ )
//│ Def(9, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%26 = x%0_s.s
//│     in case x%26 of
//│       S => let x%37 = x%26.s
//│         in let* (x%31) = even$D%1$S%0$D%0$S%0(x%37)
//│           in x%31
//│       O => let x%1 = False()
//│         in x%1
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(20, odd$D%1$S%0$C%0$S%0$C%0, [x%0_s_s], [{ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%36 = x%0_s_s.s
//│   in let* (x%3) = even$D%1$S%0$D%0$S%0(x%36)
//│     in x%3
//│ )
//│ Def(23, even$D%1$S%0$D%0$S%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%18) = odd$D%1$S%0(x%5_s_s)
//│   in x%18
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = O()
//│   in let* (x%14) = odd$D%1$S%0$C%0$S%0$C%0$S%0(x%10)
//│     in x%14
//│ )
//│ Def(9, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%26 = x%0_s.s
//│     in case x%26 of
//│       S => let x%37 = x%26.s
//│         in let* (x%31) = even$D%1$S%0$D%0$S%0(x%37)
//│           in x%31
//│       O => let x%1 = False()
//│         in x%1
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(23, even$D%1$S%0$D%0$S%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%18) = odd$D%1$S%0(x%5_s_s)
//│   in x%18
//│ )
//│ Def(24, odd$D%1$S%0$C%0$S%0$C%0$S%0, [x%0_s_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even$D%1$S%0$D%0$S%0(x%0_s_s_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = O()
//│   in let* (x%14) = odd$D%1$S%0$C%0$S%0$C%0$S%0$C%0(x%10)
//│     in x%14
//│ )
//│ Def(23, even$D%1$S%0$D%0$S%0, [x%5_s_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5_s_s of
//│   S => let x%42 = x%5_s_s.s
//│     in let* (x%40) = odd$D%1$S%0$D%0$S%0(x%42)
//│       in x%40
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(28, odd$D%1$S%0$C%0$S%0$C%0$S%0$C%0, [x%0_s_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even$D%1$S%0$D%0$S%0(x%0_s_s_s)
//│   in x%3
//│ )
//│ Def(30, odd$D%1$S%0$D%0$S%0, [x%0_s_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s_s of
//│   S => let x%37 = x%0_s_s.s
//│     in let* (x%31) = even$D%1$S%0$D%0$S%0(x%37)
//│       in x%31
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(True))], 1, 
//│ let x%6 = True()
//│   in x%6
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Fuel used: 8

:GraphInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun mk(n) = if n > 0 then S(mk(n - 1)) else O
fun foo() = odd(mk(10))
foo() 
//│ |#class| |True|↵|#class| |False|↵|#class| |S|(|s|)|↵|#class| |O|↵|#fun| |odd|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |False|↵|S|(|s|)| |#then| |even|(|s|)|←|←|↵|#fun| |even|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |True|↵|S|(|s|)| |#then| |odd|(|s|)|←|←|↵|#fun| |mk|(|n|)| |#=| |#if| |n| |>| |0| |#then| |S|(|mk|(|n| |-| |1|)|)| |#else| |O|↵|#fun| |foo|(||)| |#=| |odd|(|mk|(|10|)|)|↵|foo|(||)| |
//│ Parsed: {class True {}; class False {}; class S(s,) {}; class O {}; fun odd = (x,) => {if x is ‹(O) then False; (S(s,)) then even(s,)›}; fun even = (x,) => {if x is ‹(O) then True; (S(s,)) then odd(s,)›}; fun mk = (n,) => if (>(n,)(0,)) then S(mk(-(n,)(1,),),) else O; fun foo = () => odd(mk(10,),); foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, S, (), Tup(_: Var(s)), (), None, None, TypingUnit()), NuTypeDef(class, O, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, odd, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, even, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, mk, None, [], Lam(Tup(_: Var(n)), If(IfThen(App(App(Var(>), Tup(_: Var(n))), Tup(_: IntLit(0))), App(Var(S), Tup(_: App(Var(mk), Tup(_: App(App(Var(-), Tup(_: Var(n))), Tup(_: IntLit(1))))))), Some(Var(O))))), NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(odd), Tup(_: App(Var(mk), Tup(_: IntLit(10))))))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in jump j%0(x%1)
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in jump j%0(x%3)
//│ )
//│ Def(1, @join j%0, [x%4], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%4
//│ )
//│ Def(2, even, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in jump j%1(x%6)
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in jump j%1(x%8)
//│ )
//│ Def(3, @join j%1, [x%9], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%9
//│ )
//│ Def(4, mk, [n%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = >(n%0,0)
//│   in if x%10
//│     true => let x%11 = -(n%0,1)
//│       in let* (x%12) = mk(x%11)
//│         in let x%13 = S(x%12)
//│           in jump j%2(x%13)
//│     false => let x%14 = O()
//│       in jump j%2(x%14)
//│ )
//│ Def(5, @join j%2, [x%15], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%15
//│ )
//│ Def(6, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%16) = mk(10)
//│   in let* (x%17) = odd(x%16)
//│     in x%17
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(O),ICtor(S)))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(4, mk, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(O),ICtor(S)))], 1, 
//│ let x%10 = >(n%0,0)
//│   in if x%10
//│     true => let x%11 = -(n%0,1)
//│       in let* (x%12) = mk(x%11)
//│         in let x%13 = S(x%12)
//│           in x%13
//│     false => let x%14 = O()
//│       in x%14
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%16) = mk(10)
//│   in let* (x%17) = odd(x%16)
//│     in x%17
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Interpreted ------------------------------
//│ False()
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19,x%20) = mk$P%0(10)
//│   in if x%20
//│     true => let* (x%21) = mk$D%0(x%19)
//│       in jump foo$M%0(x%21)
//│     false => let x%14 = O()
//│       in jump foo$M%0(x%14)
//│ )
//│ Def(7, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(8, mk$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%23,x%24) = mk$P%0(x%11)
//│     in if x%24
//│       true => let* (x%25) = mk$D%0(x%23)
//│         in let x%13 = S(x%25)
//│           in x%13
//│       false => let x%14 = O()
//│         in let x%13 = S(x%14)
//│           in x%13
//│ )
//│ Def(10, @join foo$M%0, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))],[Some(IMix(ICtor(S)))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%17) = odd(x%16)
//│   in x%17
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19,x%20) = mk$P%0(10)
//│   in if x%20
//│     true => let* (x%35,x%36) = mk$D%0$P%0(x%19)
//│       in if x%36
//│         true => let* (x%37) = mk$D%0$D%0(x%35)
//│           in jump foo$M%0(x%37)
//│         false => let* (x%38) = mk$D%0$D%1()
//│           in jump foo$M%0(x%38)
//│     false => let x%14 = O()
//│       in jump foo$M%0$C%0(x%14)
//│ )
//│ Def(7, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(10, @join foo$M%0, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%17) = odd(x%16)
//│   in x%17
//│ )
//│ Def(13, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%23,x%24) = mk$P%0(x%11)
//│     in x%23,x%24
//│ )
//│ Def(14, mk$D%0$D%0, [x%23], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%31,x%32) = mk$D%0$P%0(x%23)
//│   in if x%32
//│     true => let* (x%33) = mk$D%0$D%0(x%31)
//│       in let x%13 = S(x%33)
//│         in x%13
//│     false => let* (x%34) = mk$D%0$D%1()
//│       in let x%13 = S(x%34)
//│         in x%13
//│ )
//│ Def(15, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(16, @join foo$M%0$C%0, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%17) = odd(x%16)
//│   in x%17
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%68 = x%7.s
//│         in let* (x%58) = odd$D%1$S%0(x%68)
//│           in x%58
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19,x%20) = mk$P%0(10)
//│   in if x%20
//│     true => let* (x%35,x%36) = mk$D%0$P%0(x%19)
//│       in if x%36
//│         true => let* (x%53,x%54) = mk$D%0$D%0$P%0(x%35)
//│           in if x%54
//│             true => let* (x%55) = mk$D%0$D%0$D%0(x%53)
//│               in jump foo$M%0(x%55)
//│             false => let* (x%56) = mk$D%0$D%0$D%1()
//│               in jump foo$M%0(x%56)
//│         false => let* (x%38) = mk$D%0$D%1()
//│           in jump foo$M%0(x%38)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(7, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(10, @join foo$M%0, [x%16], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%16 of
//│   S => let x%67 = x%16.s
//│     in let* (x%47) = odd$D%1$S%0(x%67)
//│       in x%47
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(13, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%23,x%24) = mk$P%0(x%11)
//│     in x%23,x%24
//│ )
//│ Def(15, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(24, mk$D%0$D%0$P%0, [x%23], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%31,x%32) = mk$D%0$P%0(x%23)
//│   in x%31,x%32
//│ )
//│ Def(25, mk$D%0$D%0$D%0, [x%31], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%60,x%61) = mk$D%0$D%0$P%0(x%31)
//│   in if x%61
//│     true => let* (x%62) = mk$D%0$D%0$D%0(x%60)
//│       in let x%13 = S(x%62)
//│         in x%13
//│     false => let* (x%63) = mk$D%0$D%0$D%1()
//│       in let x%13 = S(x%63)
//│         in x%13
//│ )
//│ Def(26, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%34) = mk$D%0$D%1()
//│   in let x%13 = S(x%34)
//│     in x%13
//│ )
//│ Def(36, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%68 = x%7.s
//│         in let* (x%58) = odd$D%1$S%0(x%68)
//│           in x%58
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19,x%20) = mk$P%0(10)
//│   in if x%20
//│     true => let* (x%35,x%36) = mk$D%0$P%0(x%19)
//│       in if x%36
//│         true => let* (x%53,x%54) = mk$D%0$D%0$P%0(x%35)
//│           in if x%54
//│             true => let* (x%71,x%72) = mk$D%0$D%0$D%0$P%0(x%53)
//│               in if x%72
//│                 true => let* (x%73) = mk$D%0$D%0$D%0$D%0(x%71)
//│                   in jump foo$M%0(x%73)
//│                 false => let* (x%74) = mk$D%0$D%0$D%0$D%1()
//│                   in jump foo$M%0(x%74)
//│             false => let* (x%56) = mk$D%0$D%0$D%1()
//│               in let x%83 = x%56.s
//│                 in jump foo$M%0$D%0$S%0(x%83)
//│         false => let* (x%38) = mk$D%0$D%1()
//│           in let x%84 = x%38.s
//│             in jump foo$M%0$D%0$S%0(x%84)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(7, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(10, @join foo$M%0, [x%16], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%16 of
//│   S => let x%67 = x%16.s
//│     in let* (x%47) = odd$D%1$S%0(x%67)
//│       in x%47
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(13, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%23,x%24) = mk$P%0(x%11)
//│     in x%23,x%24
//│ )
//│ Def(15, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(24, mk$D%0$D%0$P%0, [x%23], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%31,x%32) = mk$D%0$P%0(x%23)
//│   in x%31,x%32
//│ )
//│ Def(26, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%34) = mk$D%0$D%1()
//│   in let x%13 = S(x%34)
//│     in x%13
//│ )
//│ Def(36, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(40, mk$D%0$D%0$D%0$P%0, [x%31], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%60,x%61) = mk$D%0$D%0$P%0(x%31)
//│   in x%60,x%61
//│ )
//│ Def(41, mk$D%0$D%0$D%0$D%0, [x%60], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%60)
//│   in if x%80
//│     true => let* (x%81) = mk$D%0$D%0$D%0$D%0(x%79)
//│       in let x%13 = S(x%81)
//│         in x%13
//│     false => let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%82)
//│         in x%13
//│ )
//│ Def(42, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%63) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%63)
//│     in x%13
//│ )
//│ Def(46, foo$M%0$D%0$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%68 = x%7.s
//│         in let* (x%58) = odd$D%1$S%0(x%68)
//│           in x%58
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19,x%20) = mk$P%0(10)
//│   in if x%20
//│     true => let* (x%35,x%36) = mk$D%0$P%0(x%19)
//│       in if x%36
//│         true => let* (x%53,x%54) = mk$D%0$D%0$P%0(x%35)
//│           in if x%54
//│             true => let* (x%71,x%72) = mk$D%0$D%0$D%0$P%0(x%53)
//│               in if x%72
//│                 true => let* (x%86,x%87) = mk$D%0$D%0$D%0$D%0$P%0(x%71)
//│                   in if x%87
//│                     true => let* (x%88) = mk$D%0$D%0$D%0$D%0$D%0(x%86)
//│                       in jump foo$M%0(x%88)
//│                     false => let* (x%89) = mk$D%0$D%0$D%0$D%0$D%1()
//│                       in jump foo$M%0(x%89)
//│                 false => let* (x%74) = mk$D%0$D%0$D%0$D%1()
//│                   in let x%98 = x%74.s
//│                     in jump foo$M%0$D%2$S%0(x%98)
//│             false => let* (x%56) = mk$D%0$D%0$D%1()
//│               in let x%83 = x%56.s
//│                 in jump foo$M%0$D%0$S%0(x%83)
//│         false => let* (x%38) = mk$D%0$D%1()
//│           in let x%84 = x%38.s
//│             in jump foo$M%0$D%0$S%0(x%84)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(7, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(10, @join foo$M%0, [x%16], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))],[Some(IMix(ICtor(S)))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%16 of
//│   S => let x%67 = x%16.s
//│     in let* (x%47) = odd$D%1$S%0(x%67)
//│       in x%47
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(13, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%23,x%24) = mk$P%0(x%11)
//│     in x%23,x%24
//│ )
//│ Def(15, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(24, mk$D%0$D%0$P%0, [x%23], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%31,x%32) = mk$D%0$P%0(x%23)
//│   in x%31,x%32
//│ )
//│ Def(26, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%34) = mk$D%0$D%1()
//│   in let x%13 = S(x%34)
//│     in x%13
//│ )
//│ Def(36, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(40, mk$D%0$D%0$D%0$P%0, [x%31], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%60,x%61) = mk$D%0$D%0$P%0(x%31)
//│   in x%60,x%61
//│ )
//│ Def(42, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%63) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%63)
//│     in x%13
//│ )
//│ Def(46, foo$M%0$D%0$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(50, mk$D%0$D%0$D%0$D%0$P%0, [x%60], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%60)
//│   in x%79,x%80
//│ )
//│ Def(51, mk$D%0$D%0$D%0$D%0$D%0, [x%79], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%94,x%95) = mk$D%0$D%0$D%0$D%0$P%0(x%79)
//│   in if x%95
//│     true => let* (x%96) = mk$D%0$D%0$D%0$D%0$D%0(x%94)
//│       in let x%13 = S(x%96)
//│         in x%13
//│     false => let* (x%97) = mk$D%0$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%97)
//│         in x%13
//│ )
//│ Def(52, mk$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%82)
//│     in x%13
//│ )
//│ Def(56, foo$M%0$D%2$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%68 = x%7.s
//│         in let* (x%58) = odd$D%1$S%0(x%68)
//│           in x%58
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19,x%20) = mk$P%0(10)
//│   in if x%20
//│     true => let* (x%35,x%36) = mk$D%0$P%0(x%19)
//│       in if x%36
//│         true => let* (x%53,x%54) = mk$D%0$D%0$P%0(x%35)
//│           in if x%54
//│             true => let* (x%71,x%72) = mk$D%0$D%0$D%0$P%0(x%53)
//│               in if x%72
//│                 true => let* (x%86,x%87) = mk$D%0$D%0$D%0$D%0$P%0(x%71)
//│                   in if x%87
//│                     true => let* (x%104,x%105) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%86)
//│                       in if x%105
//│                         true => let* (x%106) = mk$D%0$D%0$D%0$D%0$D%0$D%0(x%104)
//│                           in jump foo$M%0(x%106)
//│                         false => let* (x%107) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│                           in jump foo$M%0(x%107)
//│                     false => let* (x%89) = mk$D%0$D%0$D%0$D%0$D%1()
//│                       in let x%112 = x%89.s
//│                         in jump foo$M%0$D%4$S%0(x%112)
//│                 false => let* (x%74) = mk$D%0$D%0$D%0$D%1()
//│                   in let x%98 = x%74.s
//│                     in jump foo$M%0$D%2$S%0(x%98)
//│             false => let* (x%56) = mk$D%0$D%0$D%1()
//│               in let x%83 = x%56.s
//│                 in jump foo$M%0$D%0$S%0(x%83)
//│         false => let* (x%38) = mk$D%0$D%1()
//│           in let x%84 = x%38.s
//│             in jump foo$M%0$D%0$S%0(x%84)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(7, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(10, @join foo$M%0, [x%16], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%16 of
//│   S => let x%67 = x%16.s
//│     in let* (x%47) = odd$D%1$S%0(x%67)
//│       in x%47
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(13, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%23,x%24) = mk$P%0(x%11)
//│     in x%23,x%24
//│ )
//│ Def(15, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(24, mk$D%0$D%0$P%0, [x%23], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%31,x%32) = mk$D%0$P%0(x%23)
//│   in x%31,x%32
//│ )
//│ Def(26, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%34) = mk$D%0$D%1()
//│   in let x%13 = S(x%34)
//│     in x%13
//│ )
//│ Def(36, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(40, mk$D%0$D%0$D%0$P%0, [x%31], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%60,x%61) = mk$D%0$D%0$P%0(x%31)
//│   in x%60,x%61
//│ )
//│ Def(42, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%63) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%63)
//│     in x%13
//│ )
//│ Def(46, foo$M%0$D%0$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(50, mk$D%0$D%0$D%0$D%0$P%0, [x%60], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%60)
//│   in x%79,x%80
//│ )
//│ Def(52, mk$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%82)
//│     in x%13
//│ )
//│ Def(56, foo$M%0$D%2$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(60, mk$D%0$D%0$D%0$D%0$D%0$P%0, [x%79], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%94,x%95) = mk$D%0$D%0$D%0$D%0$P%0(x%79)
//│   in x%94,x%95
//│ )
//│ Def(61, mk$D%0$D%0$D%0$D%0$D%0$D%0, [x%94], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%100,x%101) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%94)
//│   in if x%101
//│     true => let* (x%102) = mk$D%0$D%0$D%0$D%0$D%0$D%0(x%100)
//│       in let x%13 = S(x%102)
//│         in x%13
//│     false => let* (x%103) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%103)
//│         in x%13
//│ )
//│ Def(62, mk$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%97) = mk$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%97)
//│     in x%13
//│ )
//│ Def(66, foo$M%0$D%4$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%68 = x%7.s
//│         in let* (x%58) = odd$D%1$S%0(x%68)
//│           in x%58
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19,x%20) = mk$P%0(10)
//│   in if x%20
//│     true => let* (x%35,x%36) = mk$D%0$P%0(x%19)
//│       in if x%36
//│         true => let* (x%53,x%54) = mk$D%0$D%0$P%0(x%35)
//│           in if x%54
//│             true => let* (x%71,x%72) = mk$D%0$D%0$D%0$P%0(x%53)
//│               in if x%72
//│                 true => let* (x%86,x%87) = mk$D%0$D%0$D%0$D%0$P%0(x%71)
//│                   in if x%87
//│                     true => let* (x%104,x%105) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%86)
//│                       in if x%105
//│                         true => let* (x%118,x%119) = mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%104)
//│                           in if x%119
//│                             true => let* (x%120) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0(x%118)
//│                               in jump foo$M%0(x%120)
//│                             false => let* (x%121) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                               in jump foo$M%0(x%121)
//│                         false => let* (x%107) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│                           in let x%126 = x%107.s
//│                             in jump foo$M%0$D%6$S%0(x%126)
//│                     false => let* (x%89) = mk$D%0$D%0$D%0$D%0$D%1()
//│                       in let x%112 = x%89.s
//│                         in jump foo$M%0$D%4$S%0(x%112)
//│                 false => let* (x%74) = mk$D%0$D%0$D%0$D%1()
//│                   in let x%98 = x%74.s
//│                     in jump foo$M%0$D%2$S%0(x%98)
//│             false => let* (x%56) = mk$D%0$D%0$D%1()
//│               in let x%83 = x%56.s
//│                 in jump foo$M%0$D%0$S%0(x%83)
//│         false => let* (x%38) = mk$D%0$D%1()
//│           in let x%84 = x%38.s
//│             in jump foo$M%0$D%0$S%0(x%84)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(7, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(10, @join foo$M%0, [x%16], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))],[Some(IMix(ICtor(S)))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%16 of
//│   S => let x%67 = x%16.s
//│     in let* (x%47) = odd$D%1$S%0(x%67)
//│       in x%47
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(13, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%23,x%24) = mk$P%0(x%11)
//│     in x%23,x%24
//│ )
//│ Def(15, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(24, mk$D%0$D%0$P%0, [x%23], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%31,x%32) = mk$D%0$P%0(x%23)
//│   in x%31,x%32
//│ )
//│ Def(26, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%34) = mk$D%0$D%1()
//│   in let x%13 = S(x%34)
//│     in x%13
//│ )
//│ Def(36, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(40, mk$D%0$D%0$D%0$P%0, [x%31], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%60,x%61) = mk$D%0$D%0$P%0(x%31)
//│   in x%60,x%61
//│ )
//│ Def(42, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%63) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%63)
//│     in x%13
//│ )
//│ Def(46, foo$M%0$D%0$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(50, mk$D%0$D%0$D%0$D%0$P%0, [x%60], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%60)
//│   in x%79,x%80
//│ )
//│ Def(52, mk$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%82)
//│     in x%13
//│ )
//│ Def(56, foo$M%0$D%2$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(60, mk$D%0$D%0$D%0$D%0$D%0$P%0, [x%79], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%94,x%95) = mk$D%0$D%0$D%0$D%0$P%0(x%79)
//│   in x%94,x%95
//│ )
//│ Def(62, mk$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%97) = mk$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%97)
//│     in x%13
//│ )
//│ Def(66, foo$M%0$D%4$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(67, mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%94], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%100,x%101) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%94)
//│   in x%100,x%101
//│ )
//│ Def(68, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0, [x%100], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%122,x%123) = mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%100)
//│   in if x%123
//│     true => let* (x%124) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0(x%122)
//│       in let x%13 = S(x%124)
//│         in x%13
//│     false => let* (x%125) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%125)
//│         in x%13
//│ )
//│ Def(69, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%103) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%103)
//│     in x%13
//│ )
//│ Def(76, foo$M%0$D%6$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%68 = x%7.s
//│         in let* (x%58) = odd$D%1$S%0(x%68)
//│           in x%58
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19,x%20) = mk$P%0(10)
//│   in if x%20
//│     true => let* (x%35,x%36) = mk$D%0$P%0(x%19)
//│       in if x%36
//│         true => let* (x%53,x%54) = mk$D%0$D%0$P%0(x%35)
//│           in if x%54
//│             true => let* (x%71,x%72) = mk$D%0$D%0$D%0$P%0(x%53)
//│               in if x%72
//│                 true => let* (x%86,x%87) = mk$D%0$D%0$D%0$D%0$P%0(x%71)
//│                   in if x%87
//│                     true => let* (x%104,x%105) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%86)
//│                       in if x%105
//│                         true => let* (x%118,x%119) = mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%104)
//│                           in if x%119
//│                             true => let* (x%128,x%129) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%118)
//│                               in if x%129
//│                                 true => let* (x%130) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0(x%128)
//│                                   in jump foo$M%0(x%130)
//│                                 false => let* (x%131) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                                   in jump foo$M%0(x%131)
//│                             false => let* (x%121) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                               in let x%140 = x%121.s
//│                                 in jump foo$M%0$D%8$S%0(x%140)
//│                         false => let* (x%107) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│                           in let x%126 = x%107.s
//│                             in jump foo$M%0$D%6$S%0(x%126)
//│                     false => let* (x%89) = mk$D%0$D%0$D%0$D%0$D%1()
//│                       in let x%112 = x%89.s
//│                         in jump foo$M%0$D%4$S%0(x%112)
//│                 false => let* (x%74) = mk$D%0$D%0$D%0$D%1()
//│                   in let x%98 = x%74.s
//│                     in jump foo$M%0$D%2$S%0(x%98)
//│             false => let* (x%56) = mk$D%0$D%0$D%1()
//│               in let x%83 = x%56.s
//│                 in jump foo$M%0$D%0$S%0(x%83)
//│         false => let* (x%38) = mk$D%0$D%1()
//│           in let x%84 = x%38.s
//│             in jump foo$M%0$D%0$S%0(x%84)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(7, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(10, @join foo$M%0, [x%16], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))],[Some(IMix(ICtor(S)))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%16 of
//│   S => let x%67 = x%16.s
//│     in let* (x%47) = odd$D%1$S%0(x%67)
//│       in x%47
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(13, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%23,x%24) = mk$P%0(x%11)
//│     in x%23,x%24
//│ )
//│ Def(15, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(24, mk$D%0$D%0$P%0, [x%23], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%31,x%32) = mk$D%0$P%0(x%23)
//│   in x%31,x%32
//│ )
//│ Def(26, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%34) = mk$D%0$D%1()
//│   in let x%13 = S(x%34)
//│     in x%13
//│ )
//│ Def(36, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(40, mk$D%0$D%0$D%0$P%0, [x%31], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%60,x%61) = mk$D%0$D%0$P%0(x%31)
//│   in x%60,x%61
//│ )
//│ Def(42, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%63) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%63)
//│     in x%13
//│ )
//│ Def(46, foo$M%0$D%0$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(50, mk$D%0$D%0$D%0$D%0$P%0, [x%60], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%60)
//│   in x%79,x%80
//│ )
//│ Def(52, mk$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%82)
//│     in x%13
//│ )
//│ Def(56, foo$M%0$D%2$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(60, mk$D%0$D%0$D%0$D%0$D%0$P%0, [x%79], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%94,x%95) = mk$D%0$D%0$D%0$D%0$P%0(x%79)
//│   in x%94,x%95
//│ )
//│ Def(62, mk$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%97) = mk$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%97)
//│     in x%13
//│ )
//│ Def(66, foo$M%0$D%4$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(67, mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%94], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%100,x%101) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%94)
//│   in x%100,x%101
//│ )
//│ Def(69, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%103) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%103)
//│     in x%13
//│ )
//│ Def(76, foo$M%0$D%6$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(80, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%100], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%122,x%123) = mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%100)
//│   in x%122,x%123
//│ )
//│ Def(81, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0, [x%122], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%132,x%133) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%122)
//│   in if x%133
//│     true => let* (x%134) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0(x%132)
//│       in let x%13 = S(x%134)
//│         in x%13
//│     false => let* (x%135) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%135)
//│         in x%13
//│ )
//│ Def(82, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%125) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%125)
//│     in x%13
//│ )
//│ Def(86, foo$M%0$D%8$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%68 = x%7.s
//│         in let* (x%58) = odd$D%1$S%0(x%68)
//│           in x%58
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19,x%20) = mk$P%0(10)
//│   in if x%20
//│     true => let* (x%35,x%36) = mk$D%0$P%0(x%19)
//│       in if x%36
//│         true => let* (x%53,x%54) = mk$D%0$D%0$P%0(x%35)
//│           in if x%54
//│             true => let* (x%71,x%72) = mk$D%0$D%0$D%0$P%0(x%53)
//│               in if x%72
//│                 true => let* (x%86,x%87) = mk$D%0$D%0$D%0$D%0$P%0(x%71)
//│                   in if x%87
//│                     true => let* (x%104,x%105) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%86)
//│                       in if x%105
//│                         true => let* (x%118,x%119) = mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%104)
//│                           in if x%119
//│                             true => let* (x%128,x%129) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%118)
//│                               in if x%129
//│                                 true => let* (x%142,x%143) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%128)
//│                                   in if x%143
//│                                     true => let* (x%144) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0(x%142)
//│                                       in jump foo$M%0(x%144)
//│                                     false => let* (x%145) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                                       in jump foo$M%0(x%145)
//│                                 false => let* (x%131) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                                   in let x%154 = x%131.s
//│                                     in jump foo$M%0$D%10$S%0(x%154)
//│                             false => let* (x%121) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                               in let x%140 = x%121.s
//│                                 in jump foo$M%0$D%8$S%0(x%140)
//│                         false => let* (x%107) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│                           in let x%126 = x%107.s
//│                             in jump foo$M%0$D%6$S%0(x%126)
//│                     false => let* (x%89) = mk$D%0$D%0$D%0$D%0$D%1()
//│                       in let x%112 = x%89.s
//│                         in jump foo$M%0$D%4$S%0(x%112)
//│                 false => let* (x%74) = mk$D%0$D%0$D%0$D%1()
//│                   in let x%98 = x%74.s
//│                     in jump foo$M%0$D%2$S%0(x%98)
//│             false => let* (x%56) = mk$D%0$D%0$D%1()
//│               in let x%83 = x%56.s
//│                 in jump foo$M%0$D%0$S%0(x%83)
//│         false => let* (x%38) = mk$D%0$D%1()
//│           in let x%84 = x%38.s
//│             in jump foo$M%0$D%0$S%0(x%84)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(7, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(10, @join foo$M%0, [x%16], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))],[Some(IMix(ICtor(S)))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%16 of
//│   S => let x%67 = x%16.s
//│     in let* (x%47) = odd$D%1$S%0(x%67)
//│       in x%47
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(13, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%23,x%24) = mk$P%0(x%11)
//│     in x%23,x%24
//│ )
//│ Def(15, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(24, mk$D%0$D%0$P%0, [x%23], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%31,x%32) = mk$D%0$P%0(x%23)
//│   in x%31,x%32
//│ )
//│ Def(26, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%34) = mk$D%0$D%1()
//│   in let x%13 = S(x%34)
//│     in x%13
//│ )
//│ Def(36, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(40, mk$D%0$D%0$D%0$P%0, [x%31], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%60,x%61) = mk$D%0$D%0$P%0(x%31)
//│   in x%60,x%61
//│ )
//│ Def(42, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%63) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%63)
//│     in x%13
//│ )
//│ Def(46, foo$M%0$D%0$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(50, mk$D%0$D%0$D%0$D%0$P%0, [x%60], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%60)
//│   in x%79,x%80
//│ )
//│ Def(52, mk$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%82)
//│     in x%13
//│ )
//│ Def(56, foo$M%0$D%2$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(60, mk$D%0$D%0$D%0$D%0$D%0$P%0, [x%79], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%94,x%95) = mk$D%0$D%0$D%0$D%0$P%0(x%79)
//│   in x%94,x%95
//│ )
//│ Def(62, mk$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%97) = mk$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%97)
//│     in x%13
//│ )
//│ Def(66, foo$M%0$D%4$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(67, mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%94], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%100,x%101) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%94)
//│   in x%100,x%101
//│ )
//│ Def(69, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%103) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%103)
//│     in x%13
//│ )
//│ Def(76, foo$M%0$D%6$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(80, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%100], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%122,x%123) = mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%100)
//│   in x%122,x%123
//│ )
//│ Def(82, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%125) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%125)
//│     in x%13
//│ )
//│ Def(86, foo$M%0$D%8$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(90, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%122], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%132,x%133) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%122)
//│   in x%132,x%133
//│ )
//│ Def(91, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0, [x%132], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%150,x%151) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%132)
//│   in if x%151
//│     true => let* (x%152) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0(x%150)
//│       in let x%13 = S(x%152)
//│         in x%13
//│     false => let* (x%153) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%153)
//│         in x%13
//│ )
//│ Def(92, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%135) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%135)
//│     in x%13
//│ )
//│ Def(96, foo$M%0$D%10$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%68 = x%7.s
//│         in let* (x%58) = odd$D%1$S%0(x%68)
//│           in x%58
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19,x%20) = mk$P%0(10)
//│   in if x%20
//│     true => let* (x%35,x%36) = mk$D%0$P%0(x%19)
//│       in if x%36
//│         true => let* (x%53,x%54) = mk$D%0$D%0$P%0(x%35)
//│           in if x%54
//│             true => let* (x%71,x%72) = mk$D%0$D%0$D%0$P%0(x%53)
//│               in if x%72
//│                 true => let* (x%86,x%87) = mk$D%0$D%0$D%0$D%0$P%0(x%71)
//│                   in if x%87
//│                     true => let* (x%104,x%105) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%86)
//│                       in if x%105
//│                         true => let* (x%118,x%119) = mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%104)
//│                           in if x%119
//│                             true => let* (x%128,x%129) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%118)
//│                               in if x%129
//│                                 true => let* (x%142,x%143) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%128)
//│                                   in if x%143
//│                                     true => let* (x%160,x%161) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%142)
//│                                       in if x%161
//│                                         true => let* (x%162) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0(x%160)
//│                                           in jump foo$M%0(x%162)
//│                                         false => let* (x%163) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                                           in jump foo$M%0(x%163)
//│                                     false => let* (x%145) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                                       in let x%168 = x%145.s
//│                                         in jump foo$M%0$D%12$S%0(x%168)
//│                                 false => let* (x%131) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                                   in let x%154 = x%131.s
//│                                     in jump foo$M%0$D%10$S%0(x%154)
//│                             false => let* (x%121) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                               in let x%140 = x%121.s
//│                                 in jump foo$M%0$D%8$S%0(x%140)
//│                         false => let* (x%107) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│                           in let x%126 = x%107.s
//│                             in jump foo$M%0$D%6$S%0(x%126)
//│                     false => let* (x%89) = mk$D%0$D%0$D%0$D%0$D%1()
//│                       in let x%112 = x%89.s
//│                         in jump foo$M%0$D%4$S%0(x%112)
//│                 false => let* (x%74) = mk$D%0$D%0$D%0$D%1()
//│                   in let x%98 = x%74.s
//│                     in jump foo$M%0$D%2$S%0(x%98)
//│             false => let* (x%56) = mk$D%0$D%0$D%1()
//│               in let x%83 = x%56.s
//│                 in jump foo$M%0$D%0$S%0(x%83)
//│         false => let* (x%38) = mk$D%0$D%1()
//│           in let x%84 = x%38.s
//│             in jump foo$M%0$D%0$S%0(x%84)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(7, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(10, @join foo$M%0, [x%16], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%16 of
//│   S => let x%67 = x%16.s
//│     in let* (x%47) = odd$D%1$S%0(x%67)
//│       in x%47
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(13, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%23,x%24) = mk$P%0(x%11)
//│     in x%23,x%24
//│ )
//│ Def(15, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(24, mk$D%0$D%0$P%0, [x%23], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%31,x%32) = mk$D%0$P%0(x%23)
//│   in x%31,x%32
//│ )
//│ Def(26, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%34) = mk$D%0$D%1()
//│   in let x%13 = S(x%34)
//│     in x%13
//│ )
//│ Def(36, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(40, mk$D%0$D%0$D%0$P%0, [x%31], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%60,x%61) = mk$D%0$D%0$P%0(x%31)
//│   in x%60,x%61
//│ )
//│ Def(42, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%63) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%63)
//│     in x%13
//│ )
//│ Def(46, foo$M%0$D%0$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(50, mk$D%0$D%0$D%0$D%0$P%0, [x%60], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%60)
//│   in x%79,x%80
//│ )
//│ Def(52, mk$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%82)
//│     in x%13
//│ )
//│ Def(56, foo$M%0$D%2$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(60, mk$D%0$D%0$D%0$D%0$D%0$P%0, [x%79], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%94,x%95) = mk$D%0$D%0$D%0$D%0$P%0(x%79)
//│   in x%94,x%95
//│ )
//│ Def(62, mk$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%97) = mk$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%97)
//│     in x%13
//│ )
//│ Def(66, foo$M%0$D%4$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(67, mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%94], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%100,x%101) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%94)
//│   in x%100,x%101
//│ )
//│ Def(69, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%103) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%103)
//│     in x%13
//│ )
//│ Def(76, foo$M%0$D%6$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(80, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%100], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%122,x%123) = mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%100)
//│   in x%122,x%123
//│ )
//│ Def(82, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%125) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%125)
//│     in x%13
//│ )
//│ Def(86, foo$M%0$D%8$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(90, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%122], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%132,x%133) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%122)
//│   in x%132,x%133
//│ )
//│ Def(92, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%135) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%135)
//│     in x%13
//│ )
//│ Def(96, foo$M%0$D%10$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ Def(100, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%132], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%150,x%151) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%132)
//│   in x%150,x%151
//│ )
//│ Def(101, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0, [x%150], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%156,x%157) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%150)
//│   in if x%157
//│     true => let* (x%158) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0(x%156)
//│       in let x%13 = S(x%158)
//│         in x%13
//│     false => let* (x%159) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%159)
//│         in x%13
//│ )
//│ Def(102, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%153) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%153)
//│     in x%13
//│ )
//│ Def(106, foo$M%0$D%12$S%0, [x%16_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%47) = odd$D%1$S%0(x%16_s)
//│   in x%47
//│ )
//│ },
//│ let* (x%18) = foo()
//│   in x%18)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ False()
//│ 
//│ 
//│ Fuel used: 10
//│ GraphOpt failed: Fuel exhausted
//│ mlscript.compiler.optimizer.GraphOptimizingError$.apply(GraphOptimizer.scala:14)
//│ mlscript.compiler.DiffTestCompiler.postProcess(Test.scala:65)
//│ mlscript.DiffTests.rec$1(DiffTests.scala:438)
//│ mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:1067)
//│ org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
//│ org.scalatest.Transformer.apply(Transformer.scala:22)
//│ org.scalatest.Transformer.apply(Transformer.scala:20)
//│ org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:226)
//│ org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
//│ org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
//│ mlscript.DiffTests.org$scalatest$concurrent$TimeLimitedTests$$super$withFixture(DiffTests.scala:47)
//│ org.scalatest.concurrent.TimeLimitedTests.$anonfun$withFixture$3(TimeLimitedTests.scala:154)
//│ org.scalatest.enablers.Timed$$anon$1.timeoutAfter(Timed.scala:127)
//│ org.scalatest.concurrent.TimeLimits$.failAfterImpl(TimeLimits.scala:282)
//│ org.scalatest.concurrent.TimeLimitedTests.withFixture(TimeLimitedTests.scala:153)
//│ org.scalatest.concurrent.TimeLimitedTests.withFixture$(TimeLimitedTests.scala:150)
//│ mlscript.DiffTests.withFixture(DiffTests.scala:47)
//│ org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:224)
//│ org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:236)
//│ org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
//│ org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:236)
//│ org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:218)
//│ mlscript.DiffTests.org$scalatest$OneInstancePerTest$$super$runTest(DiffTests.scala:47)
//│ org.scalatest.OneInstancePerTest.runTest(OneInstancePerTest.scala:131)
//│ org.scalatest.OneInstancePerTest.runTest$(OneInstancePerTest.scala:123)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$runTest(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.runTest(ParallelTestExecution.scala:164)
//│ org.scalatest.ParallelTestExecution.runTest$(ParallelTestExecution.scala:148)
//│ mlscript.DiffTests.runTest(DiffTests.scala:47)
//│ org.scalatest.OneInstancePerTest.runTests(OneInstancePerTest.scala:181)
//│ org.scalatest.OneInstancePerTest.runTests$(OneInstancePerTest.scala:172)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$runTests(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.runTests(ParallelTestExecution.scala:97)
//│ org.scalatest.ParallelTestExecution.runTests$(ParallelTestExecution.scala:79)
//│ mlscript.DiffTests.runTests(DiffTests.scala:47)
//│ org.scalatest.Suite.run(Suite.scala:1114)
//│ org.scalatest.Suite.run$(Suite.scala:1096)
//│ org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1563)
//│ org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:273)
//│ org.scalatest.SuperEngine.runImpl(Engine.scala:535)
//│ org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:273)
//│ org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:272)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$run(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.run(ParallelTestExecution.scala:261)
//│ org.scalatest.ParallelTestExecution.run$(ParallelTestExecution.scala:258)
//│ mlscript.DiffTests.run(DiffTests.scala:47)
//│ org.scalatest.tools.DistributedTestRunnerSuite.run(DistributedTestRunnerSuite.scala:22)
//│ org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:47)
//│ java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
//│ java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
//│ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
//│ java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
//│ java.base/java.lang.Thread.run(Thread.java:840)

:GraphInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun mk(n) = if n > 0 then S(mk(n - 1)) else O
fun foo() = odd(S(S(mk(10))))
foo()
//│ |#class| |True|↵|#class| |False|↵|#class| |S|(|s|)|↵|#class| |O|↵|#fun| |odd|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |False|↵|S|(|s|)| |#then| |even|(|s|)|←|←|↵|#fun| |even|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |True|↵|S|(|s|)| |#then| |odd|(|s|)|←|←|↵|#fun| |mk|(|n|)| |#=| |#if| |n| |>| |0| |#then| |S|(|mk|(|n| |-| |1|)|)| |#else| |O|↵|#fun| |foo|(||)| |#=| |odd|(|S|(|S|(|mk|(|10|)|)|)|)|↵|foo|(||)|
//│ Parsed: {class True {}; class False {}; class S(s,) {}; class O {}; fun odd = (x,) => {if x is ‹(O) then False; (S(s,)) then even(s,)›}; fun even = (x,) => {if x is ‹(O) then True; (S(s,)) then odd(s,)›}; fun mk = (n,) => if (>(n,)(0,)) then S(mk(-(n,)(1,),),) else O; fun foo = () => odd(S(S(mk(10,),),),); foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, S, (), Tup(_: Var(s)), (), None, None, TypingUnit()), NuTypeDef(class, O, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, odd, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, even, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, mk, None, [], Lam(Tup(_: Var(n)), If(IfThen(App(App(Var(>), Tup(_: Var(n))), Tup(_: IntLit(0))), App(Var(S), Tup(_: App(Var(mk), Tup(_: App(App(Var(-), Tup(_: Var(n))), Tup(_: IntLit(1))))))), Some(Var(O))))), NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(odd), Tup(_: App(Var(S), Tup(_: App(Var(S), Tup(_: App(Var(mk), Tup(_: IntLit(10))))))))))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in jump j%0(x%1)
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in jump j%0(x%3)
//│ )
//│ Def(1, @join j%0, [x%4], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%4
//│ )
//│ Def(2, even, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in jump j%1(x%6)
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in jump j%1(x%8)
//│ )
//│ Def(3, @join j%1, [x%9], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%9
//│ )
//│ Def(4, mk, [n%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = >(n%0,0)
//│   in if x%10
//│     true => let x%11 = -(n%0,1)
//│       in let* (x%12) = mk(x%11)
//│         in let x%13 = S(x%12)
//│           in jump j%2(x%13)
//│     false => let x%14 = O()
//│       in jump j%2(x%14)
//│ )
//│ Def(5, @join j%2, [x%15], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%15
//│ )
//│ Def(6, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%16) = mk(10)
//│   in let x%17 = S(x%16)
//│     in let x%18 = S(x%17)
//│       in let* (x%19) = odd(x%18)
//│         in x%19
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(4, mk, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(O),ICtor(S)))], 1, 
//│ let x%10 = >(n%0,0)
//│   in if x%10
//│     true => let x%11 = -(n%0,1)
//│       in let* (x%12) = mk(x%11)
//│         in let x%13 = S(x%12)
//│           in x%13
//│     false => let x%14 = O()
//│       in x%14
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%16) = mk(10)
//│   in let x%17 = S(x%16)
//│     in let x%18 = S(x%17)
//│       in let* (x%19) = odd(x%18)
//│         in x%19
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Interpreted ------------------------------
//│ False()
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%26 = x%7.s
//│         in let* (x%23) = odd$D%1$S%0(x%26)
//│           in x%23
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(4, mk, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(O),ICtor(S)))], 1, 
//│ let x%10 = >(n%0,0)
//│   in if x%10
//│     true => let x%11 = -(n%0,1)
//│       in let* (x%12) = mk(x%11)
//│         in let x%13 = S(x%12)
//│           in x%13
//│     false => let x%14 = O()
//│       in x%14
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%16) = mk(10)
//│   in let x%17 = S(x%16)
//│     in let* (x%19) = odd$D%1$S%0(x%17)
//│       in x%19
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(4, mk, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(O),ICtor(S)))], 1, 
//│ let x%10 = >(n%0,0)
//│   in if x%10
//│     true => let x%11 = -(n%0,1)
//│       in let* (x%12) = mk(x%11)
//│         in let x%13 = S(x%12)
//│           in x%13
//│     false => let x%14 = O()
//│       in x%14
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%16) = mk(10)
//│   in let x%17 = S(x%16)
//│     in let* (x%19) = odd$D%1$S%0$C%0(x%17)
//│       in x%19
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%31 = x%0_s.s
//│     in let* (x%29) = even$D%1$S%0(x%31)
//│       in x%29
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(15, odd$D%1$S%0$C%0, [x%0_s], [{ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%32 = x%0_s.s
//│   in let* (x%3) = even$D%1$S%0(x%32)
//│     in x%3
//│ )
//│ Def(17, even$D%1$S%0, [x%5_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5_s of
//│   S => let x%26 = x%5_s.s
//│     in let* (x%23) = odd$D%1$S%0(x%26)
//│       in x%23
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(4, mk, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(O),ICtor(S)))], 1, 
//│ let x%10 = >(n%0,0)
//│   in if x%10
//│     true => let x%11 = -(n%0,1)
//│       in let* (x%12) = mk(x%11)
//│         in let x%13 = S(x%12)
//│           in x%13
//│     false => let x%14 = O()
//│       in x%14
//│ )
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%16) = mk(10)
//│   in let* (x%19) = odd$D%1$S%0$C%0$S%0(x%16)
//│     in x%19
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%31 = x%0_s.s
//│     in let* (x%29) = even$D%1$S%0(x%31)
//│       in x%29
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(17, even$D%1$S%0, [x%5_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5_s of
//│   S => let x%26 = x%5_s.s
//│     in let* (x%23) = odd$D%1$S%0(x%26)
//│       in x%23
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(18, odd$D%1$S%0$C%0$S%0, [x%0_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(O),ICtor(S)))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even$D%1$S%0(x%0_s_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%38,x%39) = mk$P%0(10)
//│   in if x%39
//│     true => let* (x%40) = mk$D%0(x%38)
//│       in jump foo$M%0(x%40)
//│     false => let x%14 = O()
//│       in jump foo$M%0(x%14)
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%31 = x%0_s.s
//│     in let* (x%29) = even$D%1$S%0(x%31)
//│       in x%29
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(17, even$D%1$S%0, [x%5_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5_s of
//│   S => let x%26 = x%5_s.s
//│     in let* (x%23) = odd$D%1$S%0(x%26)
//│       in x%23
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(18, odd$D%1$S%0$C%0$S%0, [x%0_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even$D%1$S%0(x%0_s_s)
//│   in x%3
//│ )
//│ Def(19, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(20, mk$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%34,x%35) = mk$P%0(x%11)
//│     in if x%35
//│       true => let* (x%36) = mk$D%0(x%34)
//│         in let x%13 = S(x%36)
//│           in x%13
//│       false => let x%14 = O()
//│         in let x%13 = S(x%14)
//│           in x%13
//│ )
//│ Def(23, @join foo$M%0, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19) = odd$D%1$S%0$C%0$S%0(x%16)
//│   in x%19
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%38,x%39) = mk$P%0(10)
//│   in if x%39
//│     true => let* (x%46,x%47) = mk$D%0$P%0(x%38)
//│       in if x%47
//│         true => let* (x%48) = mk$D%0$D%0(x%46)
//│           in jump foo$M%0(x%48)
//│         false => let* (x%49) = mk$D%0$D%1()
//│           in jump foo$M%0(x%49)
//│     false => let x%14 = O()
//│       in jump foo$M%0$C%1(x%14)
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%31 = x%0_s.s
//│     in let* (x%29) = even$D%1$S%0(x%31)
//│       in x%29
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(17, even$D%1$S%0, [x%5_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5_s of
//│   S => let x%26 = x%5_s.s
//│     in let* (x%23) = odd$D%1$S%0(x%26)
//│       in x%23
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(18, odd$D%1$S%0$C%0$S%0, [x%0_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even$D%1$S%0(x%0_s_s)
//│   in x%3
//│ )
//│ Def(19, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(23, @join foo$M%0, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19) = odd$D%1$S%0$C%0$S%0(x%16)
//│   in x%19
//│ )
//│ Def(25, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%34,x%35) = mk$P%0(x%11)
//│     in x%34,x%35
//│ )
//│ Def(26, mk$D%0$D%0, [x%34], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%54,x%55) = mk$D%0$P%0(x%34)
//│   in if x%55
//│     true => let* (x%56) = mk$D%0$D%0(x%54)
//│       in let x%13 = S(x%56)
//│         in x%13
//│     false => let* (x%57) = mk$D%0$D%1()
//│       in let x%13 = S(x%57)
//│         in x%13
//│ )
//│ Def(27, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(29, @join foo$M%0$C%1, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19) = odd$D%1$S%0$C%0$S%0(x%16)
//│   in x%19
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%38,x%39) = mk$P%0(10)
//│   in if x%39
//│     true => let* (x%46,x%47) = mk$D%0$P%0(x%38)
//│       in if x%47
//│         true => let* (x%59,x%60) = mk$D%0$D%0$P%0(x%46)
//│           in if x%60
//│             true => let* (x%61) = mk$D%0$D%0$D%0(x%59)
//│               in jump foo$M%0(x%61)
//│             false => let* (x%62) = mk$D%0$D%0$D%1()
//│               in jump foo$M%0(x%62)
//│         false => let* (x%49) = mk$D%0$D%1()
//│           in jump foo$M%0(x%49)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%31 = x%0_s.s
//│     in case x%31 of
//│       S => let x%77 = x%31.s
//│         in let* (x%67) = even$D%1$S%0$D%0$S%0(x%77)
//│           in x%67
//│       O => let x%1 = False()
//│         in x%1
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(18, odd$D%1$S%0$C%0$S%0, [x%0_s_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s_s of
//│   S => let x%78 = x%0_s_s.s
//│     in let* (x%64) = even$D%1$S%0$D%0$S%0(x%78)
//│       in x%64
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(19, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(23, @join foo$M%0, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19) = odd$D%1$S%0$C%0$S%0(x%16)
//│   in x%19
//│ )
//│ Def(25, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%34,x%35) = mk$P%0(x%11)
//│     in x%34,x%35
//│ )
//│ Def(27, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(36, mk$D%0$D%0$P%0, [x%34], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%54,x%55) = mk$D%0$P%0(x%34)
//│   in x%54,x%55
//│ )
//│ Def(37, mk$D%0$D%0$D%0, [x%54], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%69,x%70) = mk$D%0$D%0$P%0(x%54)
//│   in if x%70
//│     true => let* (x%71) = mk$D%0$D%0$D%0(x%69)
//│       in let x%13 = S(x%71)
//│         in x%13
//│     false => let* (x%72) = mk$D%0$D%0$D%1()
//│       in let x%13 = S(x%72)
//│         in x%13
//│ )
//│ Def(38, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%57) = mk$D%0$D%1()
//│   in let x%13 = S(x%57)
//│     in x%13
//│ )
//│ Def(48, even$D%1$S%0$D%0$S%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%23) = odd$D%1$S%0(x%5_s_s)
//│   in x%23
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%38,x%39) = mk$P%0(10)
//│   in if x%39
//│     true => let* (x%46,x%47) = mk$D%0$P%0(x%38)
//│       in if x%47
//│         true => let* (x%59,x%60) = mk$D%0$D%0$P%0(x%46)
//│           in if x%60
//│             true => let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%59)
//│               in if x%80
//│                 true => let* (x%81) = mk$D%0$D%0$D%0$D%0(x%79)
//│                   in jump foo$M%0(x%81)
//│                 false => let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│                   in jump foo$M%0(x%82)
//│             false => let* (x%62) = mk$D%0$D%0$D%1()
//│               in jump foo$M%0(x%62)
//│         false => let* (x%49) = mk$D%0$D%1()
//│           in jump foo$M%0(x%49)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%31 = x%0_s.s
//│     in case x%31 of
//│       S => let x%77 = x%31.s
//│         in let* (x%67) = even$D%1$S%0$D%0$S%0(x%77)
//│           in x%67
//│       O => let x%1 = False()
//│         in x%1
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(18, odd$D%1$S%0$C%0$S%0, [x%0_s_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s_s of
//│   S => let x%78 = x%0_s_s.s
//│     in let* (x%64) = even$D%1$S%0$D%0$S%0(x%78)
//│       in x%64
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(19, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(23, @join foo$M%0, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19) = odd$D%1$S%0$C%0$S%0(x%16)
//│   in x%19
//│ )
//│ Def(25, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%34,x%35) = mk$P%0(x%11)
//│     in x%34,x%35
//│ )
//│ Def(27, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(36, mk$D%0$D%0$P%0, [x%34], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%54,x%55) = mk$D%0$P%0(x%34)
//│   in x%54,x%55
//│ )
//│ Def(38, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%57) = mk$D%0$D%1()
//│   in let x%13 = S(x%57)
//│     in x%13
//│ )
//│ Def(48, even$D%1$S%0$D%0$S%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%23) = odd$D%1$S%0(x%5_s_s)
//│   in x%23
//│ )
//│ Def(49, mk$D%0$D%0$D%0$P%0, [x%54], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%69,x%70) = mk$D%0$D%0$P%0(x%54)
//│   in x%69,x%70
//│ )
//│ Def(50, mk$D%0$D%0$D%0$D%0, [x%69], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%83,x%84) = mk$D%0$D%0$D%0$P%0(x%69)
//│   in if x%84
//│     true => let* (x%85) = mk$D%0$D%0$D%0$D%0(x%83)
//│       in let x%13 = S(x%85)
//│         in x%13
//│     false => let* (x%86) = mk$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%86)
//│         in x%13
//│ )
//│ Def(51, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%72) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%72)
//│     in x%13
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%38,x%39) = mk$P%0(10)
//│   in if x%39
//│     true => let* (x%46,x%47) = mk$D%0$P%0(x%38)
//│       in if x%47
//│         true => let* (x%59,x%60) = mk$D%0$D%0$P%0(x%46)
//│           in if x%60
//│             true => let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%59)
//│               in if x%80
//│                 true => let* (x%99,x%100) = mk$D%0$D%0$D%0$D%0$P%0(x%79)
//│                   in if x%100
//│                     true => let* (x%101) = mk$D%0$D%0$D%0$D%0$D%0(x%99)
//│                       in jump foo$M%0(x%101)
//│                     false => let* (x%102) = mk$D%0$D%0$D%0$D%0$D%1()
//│                       in jump foo$M%0(x%102)
//│                 false => let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│                   in jump foo$M%0(x%82)
//│             false => let* (x%62) = mk$D%0$D%0$D%1()
//│               in jump foo$M%0(x%62)
//│         false => let* (x%49) = mk$D%0$D%1()
//│           in jump foo$M%0(x%49)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%31 = x%0_s.s
//│     in case x%31 of
//│       S => let x%77 = x%31.s
//│         in let* (x%67) = even$D%1$S%0$D%0$S%0(x%77)
//│           in x%67
//│       O => let x%1 = False()
//│         in x%1
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(18, odd$D%1$S%0$C%0$S%0, [x%0_s_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s_s of
//│   S => let x%78 = x%0_s_s.s
//│     in let* (x%64) = even$D%1$S%0$D%0$S%0(x%78)
//│       in x%64
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(19, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(23, @join foo$M%0, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19) = odd$D%1$S%0$C%0$S%0(x%16)
//│   in x%19
//│ )
//│ Def(25, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%34,x%35) = mk$P%0(x%11)
//│     in x%34,x%35
//│ )
//│ Def(27, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(36, mk$D%0$D%0$P%0, [x%34], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%54,x%55) = mk$D%0$P%0(x%34)
//│   in x%54,x%55
//│ )
//│ Def(38, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%57) = mk$D%0$D%1()
//│   in let x%13 = S(x%57)
//│     in x%13
//│ )
//│ Def(48, even$D%1$S%0$D%0$S%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%23) = odd$D%1$S%0(x%5_s_s)
//│   in x%23
//│ )
//│ Def(49, mk$D%0$D%0$D%0$P%0, [x%54], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%69,x%70) = mk$D%0$D%0$P%0(x%54)
//│   in x%69,x%70
//│ )
//│ Def(51, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%72) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%72)
//│     in x%13
//│ )
//│ Def(57, mk$D%0$D%0$D%0$D%0$P%0, [x%69], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%83,x%84) = mk$D%0$D%0$D%0$P%0(x%69)
//│   in x%83,x%84
//│ )
//│ Def(58, mk$D%0$D%0$D%0$D%0$D%0, [x%83], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%95,x%96) = mk$D%0$D%0$D%0$D%0$P%0(x%83)
//│   in if x%96
//│     true => let* (x%97) = mk$D%0$D%0$D%0$D%0$D%0(x%95)
//│       in let x%13 = S(x%97)
//│         in x%13
//│     false => let* (x%98) = mk$D%0$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%98)
//│         in x%13
//│ )
//│ Def(59, mk$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%86) = mk$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%86)
//│     in x%13
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%38,x%39) = mk$P%0(10)
//│   in if x%39
//│     true => let* (x%46,x%47) = mk$D%0$P%0(x%38)
//│       in if x%47
//│         true => let* (x%59,x%60) = mk$D%0$D%0$P%0(x%46)
//│           in if x%60
//│             true => let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%59)
//│               in if x%80
//│                 true => let* (x%99,x%100) = mk$D%0$D%0$D%0$D%0$P%0(x%79)
//│                   in if x%100
//│                     true => let* (x%103,x%104) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%99)
//│                       in if x%104
//│                         true => let* (x%105) = mk$D%0$D%0$D%0$D%0$D%0$D%0(x%103)
//│                           in jump foo$M%0(x%105)
//│                         false => let* (x%106) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│                           in jump foo$M%0(x%106)
//│                     false => let* (x%102) = mk$D%0$D%0$D%0$D%0$D%1()
//│                       in jump foo$M%0(x%102)
//│                 false => let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│                   in jump foo$M%0(x%82)
//│             false => let* (x%62) = mk$D%0$D%0$D%1()
//│               in jump foo$M%0(x%62)
//│         false => let* (x%49) = mk$D%0$D%1()
//│           in jump foo$M%0(x%49)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%31 = x%0_s.s
//│     in case x%31 of
//│       S => let x%77 = x%31.s
//│         in let* (x%67) = even$D%1$S%0$D%0$S%0(x%77)
//│           in x%67
//│       O => let x%1 = False()
//│         in x%1
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(18, odd$D%1$S%0$C%0$S%0, [x%0_s_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s_s of
//│   S => let x%78 = x%0_s_s.s
//│     in let* (x%64) = even$D%1$S%0$D%0$S%0(x%78)
//│       in x%64
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(19, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(23, @join foo$M%0, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19) = odd$D%1$S%0$C%0$S%0(x%16)
//│   in x%19
//│ )
//│ Def(25, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%34,x%35) = mk$P%0(x%11)
//│     in x%34,x%35
//│ )
//│ Def(27, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(36, mk$D%0$D%0$P%0, [x%34], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%54,x%55) = mk$D%0$P%0(x%34)
//│   in x%54,x%55
//│ )
//│ Def(38, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%57) = mk$D%0$D%1()
//│   in let x%13 = S(x%57)
//│     in x%13
//│ )
//│ Def(48, even$D%1$S%0$D%0$S%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%23) = odd$D%1$S%0(x%5_s_s)
//│   in x%23
//│ )
//│ Def(49, mk$D%0$D%0$D%0$P%0, [x%54], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%69,x%70) = mk$D%0$D%0$P%0(x%54)
//│   in x%69,x%70
//│ )
//│ Def(51, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%72) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%72)
//│     in x%13
//│ )
//│ Def(57, mk$D%0$D%0$D%0$D%0$P%0, [x%69], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%83,x%84) = mk$D%0$D%0$D%0$P%0(x%69)
//│   in x%83,x%84
//│ )
//│ Def(59, mk$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%86) = mk$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%86)
//│     in x%13
//│ )
//│ Def(65, mk$D%0$D%0$D%0$D%0$D%0$P%0, [x%83], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%95,x%96) = mk$D%0$D%0$D%0$D%0$P%0(x%83)
//│   in x%95,x%96
//│ )
//│ Def(66, mk$D%0$D%0$D%0$D%0$D%0$D%0, [x%95], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%107,x%108) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%95)
//│   in if x%108
//│     true => let* (x%109) = mk$D%0$D%0$D%0$D%0$D%0$D%0(x%107)
//│       in let x%13 = S(x%109)
//│         in x%13
//│     false => let* (x%110) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%110)
//│         in x%13
//│ )
//│ Def(67, mk$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%98) = mk$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%98)
//│     in x%13
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(6, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%38,x%39) = mk$P%0(10)
//│   in if x%39
//│     true => let* (x%46,x%47) = mk$D%0$P%0(x%38)
//│       in if x%47
//│         true => let* (x%59,x%60) = mk$D%0$D%0$P%0(x%46)
//│           in if x%60
//│             true => let* (x%79,x%80) = mk$D%0$D%0$D%0$P%0(x%59)
//│               in if x%80
//│                 true => let* (x%99,x%100) = mk$D%0$D%0$D%0$D%0$P%0(x%79)
//│                   in if x%100
//│                     true => let* (x%103,x%104) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%99)
//│                       in if x%104
//│                         true => let* (x%119,x%120) = mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%103)
//│                           in if x%120
//│                             true => let* (x%121) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0(x%119)
//│                               in jump foo$M%0(x%121)
//│                             false => let* (x%122) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│                               in jump foo$M%0(x%122)
//│                         false => let* (x%106) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│                           in jump foo$M%0(x%106)
//│                     false => let* (x%102) = mk$D%0$D%0$D%0$D%0$D%1()
//│                       in jump foo$M%0(x%102)
//│                 false => let* (x%82) = mk$D%0$D%0$D%0$D%1()
//│                   in jump foo$M%0(x%82)
//│             false => let* (x%62) = mk$D%0$D%0$D%1()
//│               in jump foo$M%0(x%62)
//│         false => let* (x%49) = mk$D%0$D%1()
//│           in jump foo$M%0(x%49)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(11, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%31 = x%0_s.s
//│     in case x%31 of
//│       S => let x%77 = x%31.s
//│         in let* (x%67) = even$D%1$S%0$D%0$S%0(x%77)
//│           in x%67
//│       O => let x%1 = False()
//│         in x%1
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(18, odd$D%1$S%0$C%0$S%0, [x%0_s_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s_s of
//│   S => let x%78 = x%0_s_s.s
//│     in let* (x%64) = even$D%1$S%0$D%0$S%0(x%78)
//│       in x%64
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ Def(19, mk$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%10 = >(n%0,0)
//│   in n%0,x%10
//│ )
//│ Def(23, @join foo$M%0, [x%16], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(S)))],[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%19) = odd$D%1$S%0$C%0$S%0(x%16)
//│   in x%19
//│ )
//│ Def(25, mk$D%0$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%11 = -(n%0,1)
//│   in let* (x%34,x%35) = mk$P%0(x%11)
//│     in x%34,x%35
//│ )
//│ Def(27, mk$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let x%14 = O()
//│   in let x%13 = S(x%14)
//│     in x%13
//│ )
//│ Def(36, mk$D%0$D%0$P%0, [x%34], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%54,x%55) = mk$D%0$P%0(x%34)
//│   in x%54,x%55
//│ )
//│ Def(38, mk$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%57) = mk$D%0$D%1()
//│   in let x%13 = S(x%57)
//│     in x%13
//│ )
//│ Def(48, even$D%1$S%0$D%0$S%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%23) = odd$D%1$S%0(x%5_s_s)
//│   in x%23
//│ )
//│ Def(49, mk$D%0$D%0$D%0$P%0, [x%54], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%69,x%70) = mk$D%0$D%0$P%0(x%54)
//│   in x%69,x%70
//│ )
//│ Def(51, mk$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%72) = mk$D%0$D%0$D%1()
//│   in let x%13 = S(x%72)
//│     in x%13
//│ )
//│ Def(57, mk$D%0$D%0$D%0$D%0$P%0, [x%69], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%83,x%84) = mk$D%0$D%0$D%0$P%0(x%69)
//│   in x%83,x%84
//│ )
//│ Def(59, mk$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%86) = mk$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%86)
//│     in x%13
//│ )
//│ Def(65, mk$D%0$D%0$D%0$D%0$D%0$P%0, [x%83], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%95,x%96) = mk$D%0$D%0$D%0$D%0$P%0(x%83)
//│   in x%95,x%96
//│ )
//│ Def(67, mk$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%98) = mk$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%98)
//│     in x%13
//│ )
//│ Def(73, mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0, [x%95], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let* (x%107,x%108) = mk$D%0$D%0$D%0$D%0$D%0$P%0(x%95)
//│   in x%107,x%108
//│ )
//│ Def(74, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0, [x%107], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(S)))], 1, 
//│ let* (x%115,x%116) = mk$D%0$D%0$D%0$D%0$D%0$D%0$P%0(x%107)
//│   in if x%116
//│     true => let* (x%117) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%0(x%115)
//│       in let x%13 = S(x%117)
//│         in x%13
//│     false => let* (x%118) = mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1()
//│       in let x%13 = S(x%118)
//│         in x%13
//│ )
//│ Def(75, mk$D%0$D%0$D%0$D%0$D%0$D%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(S))], 1, 
//│ let* (x%110) = mk$D%0$D%0$D%0$D%0$D%0$D%1()
//│   in let x%13 = S(x%110)
//│     in x%13
//│ )
//│ },
//│ let* (x%20) = foo()
//│   in x%20)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ False()
//│ 
//│ 
//│ Fuel used: 10
//│ GraphOpt failed: Fuel exhausted
//│ mlscript.compiler.optimizer.GraphOptimizingError$.apply(GraphOptimizer.scala:14)
//│ mlscript.compiler.DiffTestCompiler.postProcess(Test.scala:65)
//│ mlscript.DiffTests.rec$1(DiffTests.scala:438)
//│ mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:1067)
//│ org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
//│ org.scalatest.Transformer.apply(Transformer.scala:22)
//│ org.scalatest.Transformer.apply(Transformer.scala:20)
//│ org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:226)
//│ org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
//│ org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
//│ mlscript.DiffTests.org$scalatest$concurrent$TimeLimitedTests$$super$withFixture(DiffTests.scala:47)
//│ org.scalatest.concurrent.TimeLimitedTests.$anonfun$withFixture$3(TimeLimitedTests.scala:154)
//│ org.scalatest.enablers.Timed$$anon$1.timeoutAfter(Timed.scala:127)
//│ org.scalatest.concurrent.TimeLimits$.failAfterImpl(TimeLimits.scala:282)
//│ org.scalatest.concurrent.TimeLimitedTests.withFixture(TimeLimitedTests.scala:153)
//│ org.scalatest.concurrent.TimeLimitedTests.withFixture$(TimeLimitedTests.scala:150)
//│ mlscript.DiffTests.withFixture(DiffTests.scala:47)
//│ org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:224)
//│ org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:236)
//│ org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
//│ org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:236)
//│ org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:218)
//│ mlscript.DiffTests.org$scalatest$OneInstancePerTest$$super$runTest(DiffTests.scala:47)
//│ org.scalatest.OneInstancePerTest.runTest(OneInstancePerTest.scala:131)
//│ org.scalatest.OneInstancePerTest.runTest$(OneInstancePerTest.scala:123)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$runTest(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.runTest(ParallelTestExecution.scala:164)
//│ org.scalatest.ParallelTestExecution.runTest$(ParallelTestExecution.scala:148)
//│ mlscript.DiffTests.runTest(DiffTests.scala:47)
//│ org.scalatest.OneInstancePerTest.runTests(OneInstancePerTest.scala:181)
//│ org.scalatest.OneInstancePerTest.runTests$(OneInstancePerTest.scala:172)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$runTests(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.runTests(ParallelTestExecution.scala:97)
//│ org.scalatest.ParallelTestExecution.runTests$(ParallelTestExecution.scala:79)
//│ mlscript.DiffTests.runTests(DiffTests.scala:47)
//│ org.scalatest.Suite.run(Suite.scala:1114)
//│ org.scalatest.Suite.run$(Suite.scala:1096)
//│ org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1563)
//│ org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:273)
//│ org.scalatest.SuperEngine.runImpl(Engine.scala:535)
//│ org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:273)
//│ org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:272)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$run(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.run(ParallelTestExecution.scala:261)
//│ org.scalatest.ParallelTestExecution.run$(ParallelTestExecution.scala:258)
//│ mlscript.DiffTests.run(DiffTests.scala:47)
//│ org.scalatest.tools.DistributedTestRunnerSuite.run(DistributedTestRunnerSuite.scala:22)
//│ org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:47)
//│ java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
//│ java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
//│ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
//│ java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
//│ java.base/java.lang.Thread.run(Thread.java:840)

:GraphInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun foo() = odd(if 10 > 0 then S(O) else O)
fun bar() = if 10 > 0 then odd(S(O)) else odd(O)
fun main() =
  foo()
  bar()
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |S|(|s|)|↵|#class| |O|↵|#fun| |odd|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |False|↵|S|(|s|)| |#then| |even|(|s|)|←|←|↵|#fun| |even|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |True|↵|S|(|s|)| |#then| |odd|(|s|)|←|←|↵|#fun| |foo|(||)| |#=| |odd|(|#if| |10| |>| |0| |#then| |S|(|O|)| |#else| |O|)|↵|#fun| |bar|(||)| |#=| |#if| |10| |>| |0| |#then| |odd|(|S|(|O|)|)| |#else| |odd|(|O|)|↵|#fun| |main|(||)| |#=|→|foo|(||)|↵|bar|(||)|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class S(s,) {}; class O {}; fun odd = (x,) => {if x is ‹(O) then False; (S(s,)) then even(s,)›}; fun even = (x,) => {if x is ‹(O) then True; (S(s,)) then odd(s,)›}; fun foo = () => odd(if (>(10,)(0,)) then S(O,) else O,); fun bar = () => if (>(10,)(0,)) then odd(S(O,),) else odd(O,); fun main = () => {foo(); bar()}; main()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, S, (), Tup(_: Var(s)), (), None, None, TypingUnit()), NuTypeDef(class, O, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, odd, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, even, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(odd), Tup(_: If(IfThen(App(App(Var(>), Tup(_: IntLit(10))), Tup(_: IntLit(0))), App(Var(S), Tup(_: Var(O))), Some(Var(O))))))), NuFunDef(None, bar, None, [], Lam(Tup(), If(IfThen(App(App(Var(>), Tup(_: IntLit(10))), Tup(_: IntLit(0))), App(Var(odd), Tup(_: App(Var(S), Tup(_: Var(O))))), Some(App(Var(odd), Tup(_: Var(O))))))), NuFunDef(None, main, None, [], Lam(Tup(), Blk(...))), App(Var(main), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in jump j%0(x%1)
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in jump j%0(x%3)
//│ )
//│ Def(1, @join j%0, [x%4], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%4
//│ )
//│ Def(2, even, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in jump j%1(x%6)
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in jump j%1(x%8)
//│ )
//│ Def(3, @join j%1, [x%9], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%9
//│ )
//│ Def(4, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = >(10,0)
//│   in if x%10
//│     true => let x%11 = O()
//│       in let x%12 = S(x%11)
//│         in jump j%2(x%12)
//│     false => let x%13 = O()
//│       in jump j%2(x%13)
//│ )
//│ Def(5, @join j%2, [x%14], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%15) = odd(x%14)
//│   in x%15
//│ )
//│ Def(6, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%16 = >(10,0)
//│   in if x%16
//│     true => let x%17 = O()
//│       in let x%18 = S(x%17)
//│         in let* (x%19) = odd(x%18)
//│           in jump j%3(x%19)
//│     false => let x%20 = O()
//│       in let* (x%21) = odd(x%20)
//│         in jump j%3(x%21)
//│ )
//│ Def(7, @join j%3, [x%22], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%22
//│ )
//│ Def(8, main, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%23) = foo()
//│   in let* (x%24) = bar()
//│     in x%24
//│ )
//│ },
//│ let* (x%25) = main()
//│   in x%25)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))],[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = >(10,0)
//│   in if x%10
//│     true => let x%11 = O()
//│       in let x%12 = S(x%11)
//│         in jump j%2(x%12)
//│     false => let x%13 = O()
//│       in jump j%2(x%13)
//│ )
//│ Def(5, @join j%2, [x%14], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))],[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%15) = odd(x%14)
//│   in x%15
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%16 = >(10,0)
//│   in if x%16
//│     true => let x%17 = O()
//│       in let x%18 = S(x%17)
//│         in let* (x%19) = odd(x%18)
//│           in x%19
//│     false => let x%20 = O()
//│       in let* (x%21) = odd(x%20)
//│         in x%21
//│ )
//│ Def(8, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%23) = foo()
//│   in let* (x%24) = bar()
//│     in x%24
//│ )
//│ },
//│ let* (x%25) = main()
//│   in x%25)
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in case x%7 of
//│       S => let x%37 = x%7.s
//│         in let* (x%34) = odd$D%1$S%0(x%37)
//│           in x%34
//│       O => let x%1 = False()
//│         in x%1
//│ )
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = >(10,0)
//│   in if x%10
//│     true => let x%11 = O()
//│       in let x%12 = S(x%11)
//│         in jump j%2$C%0(x%12)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%16 = >(10,0)
//│   in if x%16
//│     true => let x%17 = O()
//│       in let* (x%19) = odd$D%1$S%0(x%17)
//│         in x%19
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(8, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%23) = foo()
//│   in let* (x%24) = bar()
//│     in x%24
//│ )
//│ Def(12, @join j%2$C%0, [x%14], [{ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%38 = x%14.s
//│   in let* (x%15) = odd$D%1$S%0(x%38)
//│     in x%15
//│ )
//│ Def(16, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%25) = main()
//│   in x%25)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = >(10,0)
//│   in if x%10
//│     true => let x%11 = O()
//│       in jump j%2$C%0$S%0(x%11)
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%16 = >(10,0)
//│   in if x%16
//│     true => let x%6 = True()
//│       in x%6
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(8, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%23) = foo()
//│   in let* (x%24) = bar()
//│     in x%24
//│ )
//│ Def(16, odd$D%1$S%0, [x%0_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%0_s of
//│   S => let x%43 = x%0_s.s
//│     in let* (x%41) = even$D%1$S%0(x%43)
//│       in x%41
//│   O => let x%6 = True()
//│     in x%6
//│ )
//│ Def(22, @join j%2$C%0$S%0, [x%14_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%15) = odd$D%1$S%0(x%14_s)
//│   in x%15
//│ )
//│ Def(23, even$D%1$S%0, [x%5_s], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ case x%5_s of
//│   S => let x%37 = x%5_s.s
//│     in let* (x%34) = odd$D%1$S%0(x%37)
//│       in x%34
//│   O => let x%1 = False()
//│     in x%1
//│ )
//│ },
//│ let* (x%25) = main()
//│   in x%25)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(4, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = >(10,0)
//│   in if x%10
//│     true => let x%6 = True()
//│       in x%6
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%16 = >(10,0)
//│   in if x%16
//│     true => let x%6 = True()
//│       in x%6
//│     false => let x%1 = False()
//│       in x%1
//│ )
//│ Def(8, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%23) = foo()
//│   in let* (x%24) = bar()
//│     in x%24
//│ )
//│ },
//│ let* (x%25) = main()
//│   in x%25)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Fuel used: 4

:GraphInterp
:GraphOpt
class True
class False
class A()
class B(b)
fun aaa() =
  let m = 1
  let n = 2
  let p = 3
  let q = 4
  m + n - p + q
fun bbb() =
  let x = aaa()
  x * 100 + 4
fun not(x) =
  if x then False else True
fun foo(x) =
  if x then A else B(foo(not(x)))
fun main(flag) =
  let x = foo(flag)
  if x is
    A then aaa()
    B(b1) then bbb()
main(False)
//│ |#class| |True|↵|#class| |False|↵|#class| |A|(||)|↵|#class| |B|(|b|)|↵|#fun| |aaa|(||)| |#=|→|#let| |m| |#=| |1|↵|#let| |n| |#=| |2|↵|#let| |p| |#=| |3|↵|#let| |q| |#=| |4|↵|m| |+| |n| |-| |p| |+| |q|←|↵|#fun| |bbb|(||)| |#=|→|#let| |x| |#=| |aaa|(||)|↵|x| |*| |100| |+| |4|←|↵|#fun| |not|(|x|)| |#=|→|#if| |x| |#then| |False| |#else| |True|←|↵|#fun| |foo|(|x|)| |#=|→|#if| |x| |#then| |A| |#else| |B|(|foo|(|not|(|x|)|)|)|←|↵|#fun| |main|(|flag|)| |#=|→|#let| |x| |#=| |foo|(|flag|)|↵|#if| |x| |is|→|A| |#then| |aaa|(||)|↵|B|(|b1|)| |#then| |bbb|(||)|←|←|↵|main|(|False|)|
//│ Parsed: {class True {}; class False {}; class A() {}; class B(b,) {}; fun aaa = () => {let m = 1; let n = 2; let p = 3; let q = 4; +(-(+(m,)(n,),)(p,),)(q,)}; fun bbb = () => {let x = aaa(); +(*(x,)(100,),)(4,)}; fun not = (x,) => {if (x) then False else True}; fun foo = (x,) => {if (x) then A else B(foo(not(x,),),)}; fun main = (flag,) => {let x = foo(flag,); if x is ‹(A) then aaa(); (B(b1,)) then bbb()›}; main(False,)}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, A, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, B, (), Tup(_: Var(b)), (), None, None, TypingUnit()), NuFunDef(None, aaa, None, [], Lam(Tup(), Blk(...))), NuFunDef(None, bbb, None, [], Lam(Tup(), Blk(...))), NuFunDef(None, not, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, main, None, [], Lam(Tup(_: Var(flag)), Blk(...))), App(Var(main), Tup(_: Var(False))))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = 1
//│   in let x%1 = 2
//│     in let x%2 = 3
//│       in let x%3 = 4
//│         in let x%4 = +(x%0,x%1)
//│           in let x%5 = -(x%4,x%2)
//│             in let x%6 = +(x%5,x%3)
//│               in x%6
//│ )
//│ Def(1, bbb, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(2, not, [x%10], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ if x%10
//│   true => let x%11 = False()
//│     in jump j%0(x%11)
//│   false => let x%12 = True()
//│     in jump j%0(x%12)
//│ )
//│ Def(3, @join j%0, [x%13], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%13
//│ )
//│ Def(4, foo, [x%14], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ if x%14
//│   true => let x%15 = A()
//│     in jump j%1(x%15)
//│   false => let* (x%16) = not(x%14)
//│     in let* (x%17) = foo(x%16)
//│       in let x%18 = B(x%17)
//│         in jump j%1(x%18)
//│ )
//│ Def(5, @join j%1, [x%19], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%19
//│ )
//│ Def(6, main, [flag%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%20) = foo(flag%0)
//│   in case x%20 of
//│     A => let* (x%21) = aaa()
//│       in jump j%2(x%21)
//│     B => let x%22 = x%20.b
//│       in let* (x%23) = bbb()
//│         in jump j%2(x%23)
//│ )
//│ Def(7, @join j%2, [x%24], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%24
//│ )
//│ },
//│ let x%25 = False()
//│   in let* (x%26) = main(x%25)
//│     in x%26)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = +(1,2)
//│   in let x%5 = -(x%4,3)
//│     in let x%6 = +(x%5,4)
//│       in x%6
//│ )
//│ Def(1, bbb, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(2, not, [x%10], [{EDestruct,EDirect}],
//│ S: None,
//│ I: [[Some(ICtor(False))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ if x%10
//│   true => let x%11 = False()
//│     in x%11
//│   false => let x%12 = True()
//│     in x%12
//│ )
//│ Def(4, foo, [x%14], [{EDestruct,EDirect,EIndirectDestruct}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(False),ICtor(True)))]],
//│ [Some(IMix(ICtor(A),ICtor(B)))], 1, 
//│ if x%14
//│   true => let x%15 = A()
//│     in x%15
//│   false => let* (x%16) = not(x%14)
//│     in let* (x%17) = foo(x%16)
//│       in let x%18 = B(x%17)
//│         in x%18
//│ )
//│ Def(6, main, [flag%0], [{EDirect,EIndirectDestruct}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%20) = foo(flag%0)
//│   in case x%20 of
//│     A => let* (x%21) = aaa()
//│       in x%21
//│     B => let* (x%23) = bbb()
//│       in x%23
//│ )
//│ },
//│ let x%25 = False()
//│   in let* (x%26) = main(x%25)
//│     in x%26)
//│ 
//│ Interpreted ------------------------------
//│ 404
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = +(1,2)
//│   in let x%5 = -(x%4,3)
//│     in let x%6 = +(x%5,4)
//│       in x%6
//│ )
//│ Def(1, bbb, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(6, main, [flag%0], [{EDestruct,EDirect,EIndirectDestruct}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ if flag%0
//│   true => let x%15 = A()
//│     in jump main$M%0(x%15)
//│   false => let* (x%30) = foo$D%1(flag%0)
//│     in jump main$M%0(x%30)
//│ )
//│ Def(13, foo$D%1, [x%14], [{EDestruct,EDirect}],
//│ S: None,
//│ I: [[Some(ICtor(False))]],
//│ [Some(IMix(ICtor(B)))], 1, 
//│ if x%14
//│   true => let x%11 = False()
//│     in jump foo$D%1$M%0(x%11)
//│   false => let x%12 = True()
//│     in jump foo$D%1$M%0(x%12)
//│ )
//│ Def(14, @join main$M%0, [x%20], [{EDestruct,EDirect}],
//│ S: None,
//│ I: [[Some(ICtor(A))],[Some(IMix(ICtor(B)))]],
//│ [None], 1, 
//│ case x%20 of
//│   A => let* (x%21) = aaa()
//│     in x%21
//│   B => let* (x%23) = bbb()
//│     in x%23
//│ )
//│ Def(15, @join foo$D%1$M%0, [x%16], [{EDestruct,EDirect,EIndirectDestruct}],
//│ S: None,
//│ I: [[Some(ICtor(False))],[Some(ICtor(True))]],
//│ [Some(IMix(ICtor(B)))], 1, 
//│ if x%16
//│   true => let x%15 = A()
//│     in let x%18 = B(x%15)
//│       in x%18
//│   false => let* (x%39) = foo$D%1(x%16)
//│     in let x%18 = B(x%39)
//│       in x%18
//│ )
//│ },
//│ let x%25 = False()
//│   in let* (x%26) = main(x%25)
//│     in x%26)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, A, []),ClassInfo(3, B, [b])}, {
//│ Def(0, aaa, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%4 = +(1,2)
//│   in let x%5 = -(x%4,3)
//│     in let x%6 = +(x%5,4)
//│       in x%6
//│ )
//│ Def(1, bbb, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%7) = aaa()
//│   in let x%8 = *(x%7,100)
//│     in let x%9 = +(x%8,4)
//│       in x%9
//│ )
//│ Def(6, main, [flag%0], [{EDestruct,EDirect}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ if flag%0
//│   true => jump main$M%0$D%0()
//│   false => let* (x%30) = foo$D%1$D%1()
//│     in jump main$M%0$D%1()
//│ )
//│ Def(19, main$M%0$D%0, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%21) = aaa()
//│   in x%21
//│ )
//│ Def(20, main$M%0$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%23) = bbb()
//│   in x%23
//│ )
//│ Def(23, foo$D%1$D%1, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(B))], 1, 
//│ jump foo$D%1$M%0$D%0()
//│ )
//│ Def(25, foo$D%1$M%0$D%0, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(B))], 1, 
//│ let x%15 = A()
//│   in let x%18 = B(x%15)
//│     in x%18
//│ )
//│ },
//│ let x%25 = False()
//│   in let* (x%26) = main(x%25)
//│     in x%26)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 404
//│ 
//│ 
//│ Fuel used: 3


:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun head_opt(l) =
  if l is
    Nil then None
    Cons(h, t) then Some(h)
fun is_empty(l) =
  if head_opt(l) is
    None then True
    Some(x) then False  
fun main() =
  is_empty(Cons(1, Cons(2, Nil)))
  is_empty(Nil)
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |Cons|(|h|,| |t|)|↵|#class| |Nil|↵|#class| |Some|(|x|)|↵|#class| |None|↵|#fun| |head_opt|(|l|)| |#=|→|#if| |l| |is|→|Nil| |#then| |None|↵|Cons|(|h|,| |t|)| |#then| |Some|(|h|)|←|←|↵|#fun| |is_empty|(|l|)| |#=|→|#if| |head_opt|(|l|)| |is|→|None| |#then| |True|↵|Some|(|x|)| |#then| |False| |←|←|↵|#fun| |main|(||)| |#=|→|is_empty|(|Cons|(|1|,| |Cons|(|2|,| |Nil|)|)|)|↵|is_empty|(|Nil|)|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class Cons(h, t,) {}; class Nil {}; class Some(x,) {}; class None {}; fun head_opt = (l,) => {if l is ‹(Nil) then None; (Cons(h, t,)) then Some(h,)›}; fun is_empty = (l,) => {if head_opt(l,) is ‹(None) then True; (Some(x,)) then False›}; fun main = () => {is_empty(Cons(1, Cons(2, Nil,),),); is_empty(Nil,)}; main()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, Cons, (), Tup(_: Var(h), _: Var(t)), (), None, None, TypingUnit()), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, Some, (), Tup(_: Var(x)), (), None, None, TypingUnit()), NuTypeDef(class, None, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, head_opt, None, [], Lam(Tup(_: Var(l)), Blk(...))), NuFunDef(None, is_empty, None, [], Lam(Tup(_: Var(l)), Blk(...))), NuFunDef(None, main, None, [], Lam(Tup(), Blk(...))), App(Var(main), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, head_opt, [l%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case l%0 of
//│   Nil => let x%0 = None()
//│     in jump j%0(x%0)
//│   Cons => let x%1 = l%0.t
//│     in let x%2 = l%0.h
//│       in let x%3 = Some(x%2)
//│         in jump j%0(x%3)
//│ )
//│ Def(1, @join j%0, [x%4], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%4
//│ )
//│ Def(2, is_empty, [l%1], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%5) = head_opt(l%1)
//│   in case x%5 of
//│     None => let x%6 = True()
//│       in jump j%1(x%6)
//│     Some => let x%7 = x%5.x
//│       in let x%8 = False()
//│         in jump j%1(x%8)
//│ )
//│ Def(3, @join j%1, [x%9], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%9
//│ )
//│ Def(4, main, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = Nil()
//│   in let x%11 = Cons(2,x%10)
//│     in let x%12 = Cons(1,x%11)
//│       in let* (x%13) = is_empty(x%12)
//│         in let x%14 = Nil()
//│           in let* (x%15) = is_empty(x%14)
//│             in x%15
//│ )
//│ },
//│ let* (x%16) = main()
//│   in x%16)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, head_opt, [l%0], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case l%0 of
//│   Nil => let x%0 = None()
//│     in x%0
//│   Cons => let x%2 = l%0.h
//│     in let x%3 = Some(x%2)
//│       in x%3
//│ )
//│ Def(2, is_empty, [l%1], [{EDirect,EIndirectDestruct,ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(ICtor(Nil))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let* (x%5) = head_opt(l%1)
//│   in case x%5 of
//│     None => let x%6 = True()
//│       in x%6
//│     Some => let x%8 = False()
//│       in x%8
//│ )
//│ Def(4, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = Nil()
//│   in let x%11 = Cons(2,x%10)
//│     in let x%12 = Cons(1,x%11)
//│       in let* (x%13) = is_empty(x%12)
//│         in let x%14 = Nil()
//│           in let* (x%15) = is_empty(x%14)
//│             in x%15
//│ )
//│ },
//│ let* (x%16) = main()
//│   in x%16)
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(4, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = Nil()
//│   in let x%11 = Cons(2,x%10)
//│     in let x%12 = Cons(1,x%11)
//│       in let* (x%13) = is_empty$C%0(x%12)
//│         in let x%14 = Nil()
//│           in let* (x%15) = is_empty$C%1(x%14)
//│             in x%15
//│ )
//│ Def(8, is_empty$C%0, [l%1], [{ESelect(h)}],
//│ S: Some([Some(ICtor(Cons))]),
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%22 = l%1.h
//│   in let x%3 = Some(x%22)
//│     in case x%3 of
//│       None => let x%6 = True()
//│         in x%6
//│       Some => let x%8 = False()
//│         in x%8
//│ )
//│ Def(9, is_empty$C%1, [l%1], [{}],
//│ S: Some([Some(ICtor(Nil))]),
//│ I: [[Some(ICtor(Nil))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%0 = None()
//│   in case x%0 of
//│     None => let x%6 = True()
//│       in x%6
//│     Some => let x%8 = False()
//│       in x%8
//│ )
//│ },
//│ let* (x%16) = main()
//│   in x%16)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(4, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%10 = Nil()
//│   in let* (x%13) = is_empty$C%0$S%0(1)
//│     in let x%14 = Nil()
//│       in let* (x%15) = is_empty$C%1(x%14)
//│         in x%15
//│ )
//│ Def(9, is_empty$C%1, [l%1], [{}],
//│ S: Some([Some(ICtor(Nil))]),
//│ I: [[Some(ICtor(Nil))]],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%0 = None()
//│   in case x%0 of
//│     None => let x%6 = True()
//│       in x%6
//│     Some => let x%8 = False()
//│       in x%8
//│ )
//│ Def(12, is_empty$C%0$S%0, [l%1_h], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(False),ICtor(True)))], 1, 
//│ let x%3 = Some(l%1_h)
//│   in case x%3 of
//│     None => let x%6 = True()
//│       in x%6
//│     Some => let x%8 = False()
//│       in x%8
//│ )
//│ },
//│ let* (x%16) = main()
//│   in x%16)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Fuel used: 3

:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun mk_list(n) =
  if n == 0 then Nil else Cons(n, mk_list(n - 1))
fun head_opt() =
  if mk_list(10) is
    Nil then None
    Cons(h, t) then Some(h)
head_opt()
//│ |#class| |True|↵|#class| |False|↵|#class| |Cons|(|h|,| |t|)|↵|#class| |Nil|↵|#class| |Some|(|x|)|↵|#class| |None|↵|#fun| |mk_list|(|n|)| |#=|→|#if| |n| |==| |0| |#then| |Nil| |#else| |Cons|(|n|,| |mk_list|(|n| |-| |1|)|)|←|↵|#fun| |head_opt|(||)| |#=|→|#if| |mk_list|(|10|)| |is|→|Nil| |#then| |None|↵|Cons|(|h|,| |t|)| |#then| |Some|(|h|)|←|←|↵|head_opt|(||)|
//│ Parsed: {class True {}; class False {}; class Cons(h, t,) {}; class Nil {}; class Some(x,) {}; class None {}; fun mk_list = (n,) => {if (==(n,)(0,)) then Nil else Cons(n, mk_list(-(n,)(1,),),)}; fun head_opt = () => {if mk_list(10,) is ‹(Nil) then None; (Cons(h, t,)) then Some(h,)›}; head_opt()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, Cons, (), Tup(_: Var(h), _: Var(t)), (), None, None, TypingUnit()), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, Some, (), Tup(_: Var(x)), (), None, None, TypingUnit()), NuTypeDef(class, None, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, mk_list, None, [], Lam(Tup(_: Var(n)), Blk(...))), NuFunDef(None, head_opt, None, [], Lam(Tup(), Blk(...))), App(Var(head_opt), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = ==(n%0,0)
//│   in if x%0
//│     true => let x%1 = Nil()
//│       in jump j%0(x%1)
//│     false => let x%2 = -(n%0,1)
//│       in let* (x%3) = mk_list(x%2)
//│         in let x%4 = Cons(n%0,x%3)
//│           in jump j%0(x%4)
//│ )
//│ Def(1, @join j%0, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%5
//│ )
//│ Def(2, head_opt, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%6) = mk_list(10)
//│   in case x%6 of
//│     Nil => let x%7 = None()
//│       in jump j%1(x%7)
//│     Cons => let x%8 = x%6.t
//│       in let x%9 = x%6.h
//│         in let x%10 = Some(x%9)
//│           in jump j%1(x%10)
//│ )
//│ Def(3, @join j%1, [x%11], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%11
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons),ICtor(Nil)))], 1, 
//│ let x%0 = ==(n%0,0)
//│   in if x%0
//│     true => let x%1 = Nil()
//│       in x%1
//│     false => let x%2 = -(n%0,1)
//│       in let* (x%3) = mk_list(x%2)
//│         in let x%4 = Cons(n%0,x%3)
//│           in x%4
//│ )
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%6) = mk_list(10)
//│   in case x%6 of
//│     Nil => let x%7 = None()
//│       in x%7
//│     Cons => let x%9 = x%6.h
//│       in let x%10 = Some(x%9)
//│         in x%10
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Interpreted ------------------------------
//│ Some(10)
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%21,x%22) = mk_list$P%0(10)
//│   in if x%22
//│     true => let x%1 = Nil()
//│       in jump head_opt$M%0(x%1)
//│     false => let* (x%24) = mk_list$D%1(x%21)
//│       in jump head_opt$M%0(x%24)
//│ )
//│ Def(4, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(6, mk_list$D%1, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%17,x%18) = mk_list$P%0(x%2)
//│     in if x%18
//│       true => let x%1 = Nil()
//│         in let x%4 = Cons(n%0,x%1)
//│           in x%4
//│       false => let* (x%20) = mk_list$D%1(x%17)
//│         in let x%4 = Cons(n%0,x%20)
//│           in x%4
//│ )
//│ Def(9, @join head_opt$M%0, [x%6], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Nil))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%6 of
//│   Nil => let x%7 = None()
//│     in x%7
//│   Cons => let x%9 = x%6.h
//│     in let x%10 = Some(x%9)
//│       in x%10
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%21,x%22) = mk_list$P%0(10)
//│   in if x%22
//│     true => let x%7 = None()
//│       in x%7
//│     false => let* (x%31,x%32,x%33) = mk_list$D%1$P%0(x%21)
//│       in if x%33
//│         true => let* (x%34) = mk_list$D%1$D%0(x%31)
//│           in jump head_opt$M%0(x%34)
//│         false => let* (x%35) = mk_list$D%1$D%1(x%32,x%31)
//│           in jump head_opt$M%0(x%35)
//│ )
//│ Def(4, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(9, @join head_opt$M%0, [x%6], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%6 of
//│   Nil => let x%7 = None()
//│     in x%7
//│   Cons => let x%9 = x%6.h
//│     in let x%10 = Some(x%9)
//│       in x%10
//│ )
//│ Def(10, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%17,x%18) = mk_list$P%0(x%2)
//│     in n%0,x%17,x%18
//│ )
//│ Def(11, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(12, mk_list$D%1$D%1, [x%17,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%36,x%37,x%38) = mk_list$D%1$P%0(x%17)
//│   in if x%38
//│     true => let* (x%39) = mk_list$D%1$D%0(x%36)
//│       in let x%4 = Cons(n%0,x%39)
//│         in x%4
//│     false => let* (x%40) = mk_list$D%1$D%1(x%37,x%36)
//│       in let x%4 = Cons(n%0,x%40)
//│         in x%4
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%21,x%22) = mk_list$P%0(10)
//│   in if x%22
//│     true => let x%7 = None()
//│       in x%7
//│     false => let* (x%31,x%32,x%33) = mk_list$D%1$P%0(x%21)
//│       in if x%33
//│         true => let* (x%34) = mk_list$D%1$D%0(x%31)
//│           in jump head_opt$M%0$D%3(x%34)
//│         false => let* (x%48,x%49,x%50,x%51) = mk_list$D%1$D%1$P%0(x%32,x%31)
//│           in if x%51
//│             true => let* (x%52) = mk_list$D%1$D%1$D%0(x%48,x%49)
//│               in jump head_opt$M%0(x%52)
//│             false => let* (x%53) = mk_list$D%1$D%1$D%1(x%50,x%48,x%49)
//│               in jump head_opt$M%0(x%53)
//│ )
//│ Def(4, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(9, @join head_opt$M%0, [x%6], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(Cons)))],[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%6 of
//│   Nil => let x%7 = None()
//│     in x%7
//│   Cons => let x%9 = x%6.h
//│     in let x%10 = Some(x%9)
//│       in x%10
//│ )
//│ Def(10, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%17,x%18) = mk_list$P%0(x%2)
//│     in n%0,x%17,x%18
//│ )
//│ Def(11, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(21, head_opt$M%0$D%3, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(22, mk_list$D%1$D%1$P%0, [x%17,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%36,x%37,x%38) = mk_list$D%1$P%0(x%17)
//│   in x%36,n%0,x%37,x%38
//│ )
//│ Def(23, mk_list$D%1$D%1$D%0, [x%36,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%39) = mk_list$D%1$D%0(x%36)
//│   in let x%4 = Cons(n%0,x%39)
//│     in x%4
//│ )
//│ Def(24, mk_list$D%1$D%1$D%1, [x%37,x%36,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%42,x%43,x%44,x%45) = mk_list$D%1$D%1$P%0(x%37,x%36)
//│   in if x%45
//│     true => let* (x%46) = mk_list$D%1$D%1$D%0(x%42,x%43)
//│       in let x%4 = Cons(n%0,x%46)
//│         in x%4
//│     false => let* (x%47) = mk_list$D%1$D%1$D%1(x%44,x%42,x%43)
//│       in let x%4 = Cons(n%0,x%47)
//│         in x%4
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%21,x%22) = mk_list$P%0(10)
//│   in if x%22
//│     true => let x%7 = None()
//│       in x%7
//│     false => let* (x%31,x%32,x%33) = mk_list$D%1$P%0(x%21)
//│       in if x%33
//│         true => let* (x%34) = mk_list$D%1$D%0(x%31)
//│           in jump head_opt$M%0$D%3(x%34)
//│         false => let* (x%48,x%49,x%50,x%51) = mk_list$D%1$D%1$P%0(x%32,x%31)
//│           in if x%51
//│             true => let* (x%52) = mk_list$D%1$D%1$D%0(x%48,x%49)
//│               in jump head_opt$M%0$D%5(x%52)
//│             false => let* (x%68,x%69,x%70,x%71,x%72) = mk_list$D%1$D%1$D%1$P%0(x%50,x%48,x%49)
//│               in if x%72
//│                 true => let* (x%73) = mk_list$D%1$D%1$D%1$D%0(x%71,x%70,x%69)
//│                   in jump head_opt$M%0(x%73)
//│                 false => let* (x%74) = mk_list$D%1$D%1$D%1$D%1(x%68,x%71,x%70,x%69)
//│                   in jump head_opt$M%0(x%74)
//│ )
//│ Def(4, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(9, @join head_opt$M%0, [x%6], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%6 of
//│   Nil => let x%7 = None()
//│     in x%7
//│   Cons => let x%9 = x%6.h
//│     in let x%10 = Some(x%9)
//│       in x%10
//│ )
//│ Def(10, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%17,x%18) = mk_list$P%0(x%2)
//│     in n%0,x%17,x%18
//│ )
//│ Def(11, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(21, head_opt$M%0$D%3, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(22, mk_list$D%1$D%1$P%0, [x%17,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%36,x%37,x%38) = mk_list$D%1$P%0(x%17)
//│   in x%36,n%0,x%37,x%38
//│ )
//│ Def(23, mk_list$D%1$D%1$D%0, [x%36,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%39) = mk_list$D%1$D%0(x%36)
//│   in let x%4 = Cons(n%0,x%39)
//│     in x%4
//│ )
//│ Def(28, mk_list$D%1$D%1$D%1$P%0, [x%37,x%36,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%42,x%43,x%44,x%45) = mk_list$D%1$D%1$P%0(x%37,x%36)
//│   in x%44,n%0,x%43,x%42,x%45
//│ )
//│ Def(29, mk_list$D%1$D%1$D%1$D%0, [x%42,x%43,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%46) = mk_list$D%1$D%1$D%0(x%42,x%43)
//│   in let x%4 = Cons(n%0,x%46)
//│     in x%4
//│ )
//│ Def(30, mk_list$D%1$D%1$D%1$D%1, [x%44,x%42,x%43,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%75,x%76,x%77,x%78,x%79) = mk_list$D%1$D%1$D%1$P%0(x%44,x%42,x%43)
//│   in if x%79
//│     true => let* (x%80) = mk_list$D%1$D%1$D%1$D%0(x%78,x%77,x%76)
//│       in let x%4 = Cons(n%0,x%80)
//│         in x%4
//│     false => let* (x%81) = mk_list$D%1$D%1$D%1$D%1(x%75,x%78,x%77,x%76)
//│       in let x%4 = Cons(n%0,x%81)
//│         in x%4
//│ )
//│ Def(33, head_opt$M%0$D%5, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%21,x%22) = mk_list$P%0(10)
//│   in if x%22
//│     true => let x%7 = None()
//│       in x%7
//│     false => let* (x%31,x%32,x%33) = mk_list$D%1$P%0(x%21)
//│       in if x%33
//│         true => let* (x%34) = mk_list$D%1$D%0(x%31)
//│           in jump head_opt$M%0$D%3(x%34)
//│         false => let* (x%48,x%49,x%50,x%51) = mk_list$D%1$D%1$P%0(x%32,x%31)
//│           in if x%51
//│             true => let* (x%52) = mk_list$D%1$D%1$D%0(x%48,x%49)
//│               in jump head_opt$M%0$D%5(x%52)
//│             false => let* (x%68,x%69,x%70,x%71,x%72) = mk_list$D%1$D%1$D%1$P%0(x%50,x%48,x%49)
//│               in if x%72
//│                 true => let* (x%73) = mk_list$D%1$D%1$D%1$D%0(x%71,x%70,x%69)
//│                   in jump head_opt$M%0$D%7(x%73)
//│                 false => let* (x%83,x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$D%1$P%0(x%68,x%71,x%70,x%69)
//│                   in if x%86
//│                     true => let* (x%89) = mk_list$D%1$D%1$D%1$D%1$D%0(x%88,x%87,x%83,x%84)
//│                       in jump head_opt$M%0(x%89)
//│                     false => let* (x%90) = mk_list$D%1$D%1$D%1$D%1$D%1(x%83,x%84,x%85,x%87,x%88)
//│                       in jump head_opt$M%0(x%90)
//│ )
//│ Def(4, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(9, @join head_opt$M%0, [x%6], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%6 of
//│   Nil => let x%7 = None()
//│     in x%7
//│   Cons => let x%9 = x%6.h
//│     in let x%10 = Some(x%9)
//│       in x%10
//│ )
//│ Def(10, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%17,x%18) = mk_list$P%0(x%2)
//│     in n%0,x%17,x%18
//│ )
//│ Def(11, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(21, head_opt$M%0$D%3, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(22, mk_list$D%1$D%1$P%0, [x%17,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%36,x%37,x%38) = mk_list$D%1$P%0(x%17)
//│   in x%36,n%0,x%37,x%38
//│ )
//│ Def(23, mk_list$D%1$D%1$D%0, [x%36,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%39) = mk_list$D%1$D%0(x%36)
//│   in let x%4 = Cons(n%0,x%39)
//│     in x%4
//│ )
//│ Def(28, mk_list$D%1$D%1$D%1$P%0, [x%37,x%36,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%42,x%43,x%44,x%45) = mk_list$D%1$D%1$P%0(x%37,x%36)
//│   in x%44,n%0,x%43,x%42,x%45
//│ )
//│ Def(29, mk_list$D%1$D%1$D%1$D%0, [x%42,x%43,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%46) = mk_list$D%1$D%1$D%0(x%42,x%43)
//│   in let x%4 = Cons(n%0,x%46)
//│     in x%4
//│ )
//│ Def(33, head_opt$M%0$D%5, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(39, head_opt$M%0$D%7, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(40, mk_list$D%1$D%1$D%1$D%1$P%0, [x%44,x%42,x%43,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%75,x%76,x%77,x%78,x%79) = mk_list$D%1$D%1$D%1$P%0(x%44,x%42,x%43)
//│   in x%76,n%0,x%75,x%79,x%77,x%78
//│ )
//│ Def(41, mk_list$D%1$D%1$D%1$D%1$D%0, [x%78,x%77,x%76,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%80) = mk_list$D%1$D%1$D%1$D%0(x%78,x%77,x%76)
//│   in let x%4 = Cons(n%0,x%80)
//│     in x%4
//│ )
//│ Def(42, mk_list$D%1$D%1$D%1$D%1$D%1, [x%76,n%0,x%75,x%77,x%78], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%75,x%78,x%77,x%76)
//│   in if x%102
//│     true => let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%104,x%103,x%99,x%100)
//│       in let x%4 = Cons(n%0,x%105)
//│         in x%4
//│     false => let* (x%106) = mk_list$D%1$D%1$D%1$D%1$D%1(x%99,x%100,x%101,x%103,x%104)
//│       in let x%4 = Cons(n%0,x%106)
//│         in x%4
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%21,x%22) = mk_list$P%0(10)
//│   in if x%22
//│     true => let x%7 = None()
//│       in x%7
//│     false => let* (x%31,x%32,x%33) = mk_list$D%1$P%0(x%21)
//│       in if x%33
//│         true => let* (x%34) = mk_list$D%1$D%0(x%31)
//│           in jump head_opt$M%0$D%3(x%34)
//│         false => let* (x%48,x%49,x%50,x%51) = mk_list$D%1$D%1$P%0(x%32,x%31)
//│           in if x%51
//│             true => let* (x%52) = mk_list$D%1$D%1$D%0(x%48,x%49)
//│               in jump head_opt$M%0$D%5(x%52)
//│             false => let* (x%68,x%69,x%70,x%71,x%72) = mk_list$D%1$D%1$D%1$P%0(x%50,x%48,x%49)
//│               in if x%72
//│                 true => let* (x%73) = mk_list$D%1$D%1$D%1$D%0(x%71,x%70,x%69)
//│                   in jump head_opt$M%0$D%7(x%73)
//│                 false => let* (x%83,x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$D%1$P%0(x%68,x%71,x%70,x%69)
//│                   in if x%86
//│                     true => let* (x%89) = mk_list$D%1$D%1$D%1$D%1$D%0(x%88,x%87,x%83,x%84)
//│                       in jump head_opt$M%0$D%9(x%89)
//│                     false => let* (x%117,x%118,x%119,x%120,x%121,x%122,x%123) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%83,x%84,x%85,x%87,x%88)
//│                       in if x%118
//│                         true => let* (x%124) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%119,x%120,x%121,x%122,x%123)
//│                           in jump head_opt$M%0(x%124)
//│                         false => let* (x%125) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1(x%117,x%119,x%120,x%121,x%122,x%123)
//│                           in jump head_opt$M%0(x%125)
//│ )
//│ Def(4, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(9, @join head_opt$M%0, [x%6], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%6 of
//│   Nil => let x%7 = None()
//│     in x%7
//│   Cons => let x%9 = x%6.h
//│     in let x%10 = Some(x%9)
//│       in x%10
//│ )
//│ Def(10, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%17,x%18) = mk_list$P%0(x%2)
//│     in n%0,x%17,x%18
//│ )
//│ Def(11, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(21, head_opt$M%0$D%3, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(22, mk_list$D%1$D%1$P%0, [x%17,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%36,x%37,x%38) = mk_list$D%1$P%0(x%17)
//│   in x%36,n%0,x%37,x%38
//│ )
//│ Def(23, mk_list$D%1$D%1$D%0, [x%36,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%39) = mk_list$D%1$D%0(x%36)
//│   in let x%4 = Cons(n%0,x%39)
//│     in x%4
//│ )
//│ Def(28, mk_list$D%1$D%1$D%1$P%0, [x%37,x%36,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%42,x%43,x%44,x%45) = mk_list$D%1$D%1$P%0(x%37,x%36)
//│   in x%44,n%0,x%43,x%42,x%45
//│ )
//│ Def(29, mk_list$D%1$D%1$D%1$D%0, [x%42,x%43,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%46) = mk_list$D%1$D%1$D%0(x%42,x%43)
//│   in let x%4 = Cons(n%0,x%46)
//│     in x%4
//│ )
//│ Def(33, head_opt$M%0$D%5, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(39, head_opt$M%0$D%7, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(40, mk_list$D%1$D%1$D%1$D%1$P%0, [x%44,x%42,x%43,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%75,x%76,x%77,x%78,x%79) = mk_list$D%1$D%1$D%1$P%0(x%44,x%42,x%43)
//│   in x%76,n%0,x%75,x%79,x%77,x%78
//│ )
//│ Def(41, mk_list$D%1$D%1$D%1$D%1$D%0, [x%78,x%77,x%76,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%80) = mk_list$D%1$D%1$D%1$D%0(x%78,x%77,x%76)
//│   in let x%4 = Cons(n%0,x%80)
//│     in x%4
//│ )
//│ Def(46, mk_list$D%1$D%1$D%1$D%1$D%1$P%0, [x%76,n%0,x%75,x%77,x%78], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None], 7, 
//│ let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%75,x%78,x%77,x%76)
//│   in x%101,x%102,n%0,x%104,x%100,x%99,x%103
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$D%1$D%0, [n%0,x%104,x%100,x%99,x%103], [{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%104,x%103,x%99,x%100)
//│   in let x%4 = Cons(n%0,x%105)
//│     in x%4
//│ )
//│ Def(48, mk_list$D%1$D%1$D%1$D%1$D%1$D%1, [x%101,n%0,x%104,x%100,x%99,x%103], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%126,x%127,x%128,x%129,x%130,x%131,x%132) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%99,x%100,x%101,x%103,x%104)
//│   in if x%127
//│     true => let* (x%133) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%128,x%129,x%130,x%131,x%132)
//│       in let x%4 = Cons(n%0,x%133)
//│         in x%4
//│     false => let* (x%134) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1(x%126,x%128,x%129,x%130,x%131,x%132)
//│       in let x%4 = Cons(n%0,x%134)
//│         in x%4
//│ )
//│ Def(51, head_opt$M%0$D%9, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%21,x%22) = mk_list$P%0(10)
//│   in if x%22
//│     true => let x%7 = None()
//│       in x%7
//│     false => let* (x%31,x%32,x%33) = mk_list$D%1$P%0(x%21)
//│       in if x%33
//│         true => let* (x%34) = mk_list$D%1$D%0(x%31)
//│           in jump head_opt$M%0$D%3(x%34)
//│         false => let* (x%48,x%49,x%50,x%51) = mk_list$D%1$D%1$P%0(x%32,x%31)
//│           in if x%51
//│             true => let* (x%52) = mk_list$D%1$D%1$D%0(x%48,x%49)
//│               in jump head_opt$M%0$D%5(x%52)
//│             false => let* (x%68,x%69,x%70,x%71,x%72) = mk_list$D%1$D%1$D%1$P%0(x%50,x%48,x%49)
//│               in if x%72
//│                 true => let* (x%73) = mk_list$D%1$D%1$D%1$D%0(x%71,x%70,x%69)
//│                   in jump head_opt$M%0$D%7(x%73)
//│                 false => let* (x%83,x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$D%1$P%0(x%68,x%71,x%70,x%69)
//│                   in if x%86
//│                     true => let* (x%89) = mk_list$D%1$D%1$D%1$D%1$D%0(x%88,x%87,x%83,x%84)
//│                       in jump head_opt$M%0$D%9(x%89)
//│                     false => let* (x%117,x%118,x%119,x%120,x%121,x%122,x%123) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%83,x%84,x%85,x%87,x%88)
//│                       in if x%118
//│                         true => let* (x%124) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%119,x%120,x%121,x%122,x%123)
//│                           in jump head_opt$M%0$D%11(x%124)
//│                         false => let* (x%146,x%147,x%148,x%149,x%150,x%151,x%152,x%153) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%117,x%119,x%120,x%121,x%122,x%123)
//│                           in if x%151
//│                             true => let* (x%154) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%146,x%147,x%149,x%150,x%152,x%153)
//│                               in jump head_opt$M%0(x%154)
//│                             false => let* (x%155) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%146,x%147,x%148,x%149,x%150,x%152,x%153)
//│                               in jump head_opt$M%0(x%155)
//│ )
//│ Def(4, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(9, @join head_opt$M%0, [x%6], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(Cons)))],[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%6 of
//│   Nil => let x%7 = None()
//│     in x%7
//│   Cons => let x%9 = x%6.h
//│     in let x%10 = Some(x%9)
//│       in x%10
//│ )
//│ Def(10, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%17,x%18) = mk_list$P%0(x%2)
//│     in n%0,x%17,x%18
//│ )
//│ Def(11, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(21, head_opt$M%0$D%3, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(22, mk_list$D%1$D%1$P%0, [x%17,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%36,x%37,x%38) = mk_list$D%1$P%0(x%17)
//│   in x%36,n%0,x%37,x%38
//│ )
//│ Def(23, mk_list$D%1$D%1$D%0, [x%36,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%39) = mk_list$D%1$D%0(x%36)
//│   in let x%4 = Cons(n%0,x%39)
//│     in x%4
//│ )
//│ Def(28, mk_list$D%1$D%1$D%1$P%0, [x%37,x%36,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%42,x%43,x%44,x%45) = mk_list$D%1$D%1$P%0(x%37,x%36)
//│   in x%44,n%0,x%43,x%42,x%45
//│ )
//│ Def(29, mk_list$D%1$D%1$D%1$D%0, [x%42,x%43,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%46) = mk_list$D%1$D%1$D%0(x%42,x%43)
//│   in let x%4 = Cons(n%0,x%46)
//│     in x%4
//│ )
//│ Def(33, head_opt$M%0$D%5, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(39, head_opt$M%0$D%7, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(40, mk_list$D%1$D%1$D%1$D%1$P%0, [x%44,x%42,x%43,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%75,x%76,x%77,x%78,x%79) = mk_list$D%1$D%1$D%1$P%0(x%44,x%42,x%43)
//│   in x%76,n%0,x%75,x%79,x%77,x%78
//│ )
//│ Def(41, mk_list$D%1$D%1$D%1$D%1$D%0, [x%78,x%77,x%76,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%80) = mk_list$D%1$D%1$D%1$D%0(x%78,x%77,x%76)
//│   in let x%4 = Cons(n%0,x%80)
//│     in x%4
//│ )
//│ Def(46, mk_list$D%1$D%1$D%1$D%1$D%1$P%0, [x%76,n%0,x%75,x%77,x%78], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None], 7, 
//│ let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%75,x%78,x%77,x%76)
//│   in x%101,x%102,n%0,x%104,x%100,x%99,x%103
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$D%1$D%0, [n%0,x%104,x%100,x%99,x%103], [{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%104,x%103,x%99,x%100)
//│   in let x%4 = Cons(n%0,x%105)
//│     in x%4
//│ )
//│ Def(51, head_opt$M%0$D%9, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(57, head_opt$M%0$D%11, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(58, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%101,n%0,x%104,x%100,x%99,x%103], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None], 8, 
//│ let* (x%126,x%127,x%128,x%129,x%130,x%131,x%132) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%99,x%100,x%101,x%103,x%104)
//│   in x%129,n%0,x%126,x%128,x%130,x%127,x%132,x%131
//│ )
//│ Def(59, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%129,n%0,x%128,x%130,x%132,x%131], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%133) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%128,x%129,x%130,x%131,x%132)
//│   in let x%4 = Cons(n%0,x%133)
//│     in x%4
//│ )
//│ Def(60, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1, [x%129,n%0,x%126,x%128,x%130,x%132,x%131], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%136,x%137,x%138,x%139,x%140,x%141,x%142,x%143) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%126,x%128,x%129,x%130,x%131,x%132)
//│   in if x%141
//│     true => let* (x%144) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%136,x%137,x%139,x%140,x%142,x%143)
//│       in let x%4 = Cons(n%0,x%144)
//│         in x%4
//│     false => let* (x%145) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%136,x%137,x%138,x%139,x%140,x%142,x%143)
//│       in let x%4 = Cons(n%0,x%145)
//│         in x%4
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%21,x%22) = mk_list$P%0(10)
//│   in if x%22
//│     true => let x%7 = None()
//│       in x%7
//│     false => let* (x%31,x%32,x%33) = mk_list$D%1$P%0(x%21)
//│       in if x%33
//│         true => let* (x%34) = mk_list$D%1$D%0(x%31)
//│           in jump head_opt$M%0$D%3(x%34)
//│         false => let* (x%48,x%49,x%50,x%51) = mk_list$D%1$D%1$P%0(x%32,x%31)
//│           in if x%51
//│             true => let* (x%52) = mk_list$D%1$D%1$D%0(x%48,x%49)
//│               in jump head_opt$M%0$D%5(x%52)
//│             false => let* (x%68,x%69,x%70,x%71,x%72) = mk_list$D%1$D%1$D%1$P%0(x%50,x%48,x%49)
//│               in if x%72
//│                 true => let* (x%73) = mk_list$D%1$D%1$D%1$D%0(x%71,x%70,x%69)
//│                   in jump head_opt$M%0$D%7(x%73)
//│                 false => let* (x%83,x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$D%1$P%0(x%68,x%71,x%70,x%69)
//│                   in if x%86
//│                     true => let* (x%89) = mk_list$D%1$D%1$D%1$D%1$D%0(x%88,x%87,x%83,x%84)
//│                       in jump head_opt$M%0$D%9(x%89)
//│                     false => let* (x%117,x%118,x%119,x%120,x%121,x%122,x%123) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%83,x%84,x%85,x%87,x%88)
//│                       in if x%118
//│                         true => let* (x%124) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%119,x%120,x%121,x%122,x%123)
//│                           in jump head_opt$M%0$D%11(x%124)
//│                         false => let* (x%146,x%147,x%148,x%149,x%150,x%151,x%152,x%153) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%117,x%119,x%120,x%121,x%122,x%123)
//│                           in if x%151
//│                             true => let* (x%154) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%146,x%147,x%149,x%150,x%152,x%153)
//│                               in jump head_opt$M%0$D%13(x%154)
//│                             false => let* (x%178,x%179,x%180,x%181,x%182,x%183,x%184,x%185,x%186) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%146,x%147,x%148,x%149,x%150,x%152,x%153)
//│                               in if x%181
//│                                 true => let* (x%187) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%178,x%179,x%180,x%182,x%184,x%185,x%186)
//│                                   in jump head_opt$M%0(x%187)
//│                                 false => let* (x%188) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%178,x%179,x%180,x%182,x%183,x%184,x%185,x%186)
//│                                   in jump head_opt$M%0(x%188)
//│ )
//│ Def(4, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(9, @join head_opt$M%0, [x%6], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%6 of
//│   Nil => let x%7 = None()
//│     in x%7
//│   Cons => let x%9 = x%6.h
//│     in let x%10 = Some(x%9)
//│       in x%10
//│ )
//│ Def(10, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%17,x%18) = mk_list$P%0(x%2)
//│     in n%0,x%17,x%18
//│ )
//│ Def(11, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(21, head_opt$M%0$D%3, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(22, mk_list$D%1$D%1$P%0, [x%17,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%36,x%37,x%38) = mk_list$D%1$P%0(x%17)
//│   in x%36,n%0,x%37,x%38
//│ )
//│ Def(23, mk_list$D%1$D%1$D%0, [x%36,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%39) = mk_list$D%1$D%0(x%36)
//│   in let x%4 = Cons(n%0,x%39)
//│     in x%4
//│ )
//│ Def(28, mk_list$D%1$D%1$D%1$P%0, [x%37,x%36,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%42,x%43,x%44,x%45) = mk_list$D%1$D%1$P%0(x%37,x%36)
//│   in x%44,n%0,x%43,x%42,x%45
//│ )
//│ Def(29, mk_list$D%1$D%1$D%1$D%0, [x%42,x%43,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%46) = mk_list$D%1$D%1$D%0(x%42,x%43)
//│   in let x%4 = Cons(n%0,x%46)
//│     in x%4
//│ )
//│ Def(33, head_opt$M%0$D%5, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(39, head_opt$M%0$D%7, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(40, mk_list$D%1$D%1$D%1$D%1$P%0, [x%44,x%42,x%43,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%75,x%76,x%77,x%78,x%79) = mk_list$D%1$D%1$D%1$P%0(x%44,x%42,x%43)
//│   in x%76,n%0,x%75,x%79,x%77,x%78
//│ )
//│ Def(41, mk_list$D%1$D%1$D%1$D%1$D%0, [x%78,x%77,x%76,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%80) = mk_list$D%1$D%1$D%1$D%0(x%78,x%77,x%76)
//│   in let x%4 = Cons(n%0,x%80)
//│     in x%4
//│ )
//│ Def(46, mk_list$D%1$D%1$D%1$D%1$D%1$P%0, [x%76,n%0,x%75,x%77,x%78], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None], 7, 
//│ let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%75,x%78,x%77,x%76)
//│   in x%101,x%102,n%0,x%104,x%100,x%99,x%103
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$D%1$D%0, [n%0,x%104,x%100,x%99,x%103], [{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%104,x%103,x%99,x%100)
//│   in let x%4 = Cons(n%0,x%105)
//│     in x%4
//│ )
//│ Def(51, head_opt$M%0$D%9, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(57, head_opt$M%0$D%11, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(58, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%101,n%0,x%104,x%100,x%99,x%103], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None], 8, 
//│ let* (x%126,x%127,x%128,x%129,x%130,x%131,x%132) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%99,x%100,x%101,x%103,x%104)
//│   in x%129,n%0,x%126,x%128,x%130,x%127,x%132,x%131
//│ )
//│ Def(59, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%129,n%0,x%128,x%130,x%132,x%131], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%133) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%128,x%129,x%130,x%131,x%132)
//│   in let x%4 = Cons(n%0,x%133)
//│     in x%4
//│ )
//│ Def(64, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%129,n%0,x%126,x%128,x%130,x%132,x%131], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None], 9, 
//│ let* (x%136,x%137,x%138,x%139,x%140,x%141,x%142,x%143) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%126,x%128,x%129,x%130,x%131,x%132)
//│   in x%136,n%0,x%137,x%141,x%142,x%138,x%143,x%140,x%139
//│ )
//│ Def(65, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%136,n%0,x%137,x%142,x%143,x%140,x%139], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%144) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%136,x%137,x%139,x%140,x%142,x%143)
//│   in let x%4 = Cons(n%0,x%144)
//│     in x%4
//│ )
//│ Def(66, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1, [x%136,n%0,x%137,x%142,x%138,x%143,x%140,x%139], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%189,x%190,x%191,x%192,x%193,x%194,x%195,x%196,x%197) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%136,x%137,x%138,x%139,x%140,x%142,x%143)
//│   in if x%192
//│     true => let* (x%198) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%189,x%190,x%191,x%193,x%195,x%196,x%197)
//│       in let x%4 = Cons(n%0,x%198)
//│         in x%4
//│     false => let* (x%199) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%189,x%190,x%191,x%193,x%194,x%195,x%196,x%197)
//│       in let x%4 = Cons(n%0,x%199)
//│         in x%4
//│ )
//│ Def(69, head_opt$M%0$D%13, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%21,x%22) = mk_list$P%0(10)
//│   in if x%22
//│     true => let x%7 = None()
//│       in x%7
//│     false => let* (x%31,x%32,x%33) = mk_list$D%1$P%0(x%21)
//│       in if x%33
//│         true => let* (x%34) = mk_list$D%1$D%0(x%31)
//│           in jump head_opt$M%0$D%3(x%34)
//│         false => let* (x%48,x%49,x%50,x%51) = mk_list$D%1$D%1$P%0(x%32,x%31)
//│           in if x%51
//│             true => let* (x%52) = mk_list$D%1$D%1$D%0(x%48,x%49)
//│               in jump head_opt$M%0$D%5(x%52)
//│             false => let* (x%68,x%69,x%70,x%71,x%72) = mk_list$D%1$D%1$D%1$P%0(x%50,x%48,x%49)
//│               in if x%72
//│                 true => let* (x%73) = mk_list$D%1$D%1$D%1$D%0(x%71,x%70,x%69)
//│                   in jump head_opt$M%0$D%7(x%73)
//│                 false => let* (x%83,x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$D%1$P%0(x%68,x%71,x%70,x%69)
//│                   in if x%86
//│                     true => let* (x%89) = mk_list$D%1$D%1$D%1$D%1$D%0(x%88,x%87,x%83,x%84)
//│                       in jump head_opt$M%0$D%9(x%89)
//│                     false => let* (x%117,x%118,x%119,x%120,x%121,x%122,x%123) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%83,x%84,x%85,x%87,x%88)
//│                       in if x%118
//│                         true => let* (x%124) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%119,x%120,x%121,x%122,x%123)
//│                           in jump head_opt$M%0$D%11(x%124)
//│                         false => let* (x%146,x%147,x%148,x%149,x%150,x%151,x%152,x%153) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%117,x%119,x%120,x%121,x%122,x%123)
//│                           in if x%151
//│                             true => let* (x%154) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%146,x%147,x%149,x%150,x%152,x%153)
//│                               in jump head_opt$M%0$D%13(x%154)
//│                             false => let* (x%178,x%179,x%180,x%181,x%182,x%183,x%184,x%185,x%186) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%146,x%147,x%148,x%149,x%150,x%152,x%153)
//│                               in if x%181
//│                                 true => let* (x%187) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%178,x%179,x%180,x%182,x%184,x%185,x%186)
//│                                   in jump head_opt$M%0$D%15(x%187)
//│                                 false => let* (x%225,x%226,x%227,x%228,x%229,x%230,x%231,x%232,x%233,x%234) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%178,x%179,x%180,x%182,x%183,x%184,x%185,x%186)
//│                                   in if x%234
//│                                     true => let* (x%235) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%225,x%226,x%233,x%227,x%229,x%230,x%231,x%232)
//│                                       in jump head_opt$M%0(x%235)
//│                                     false => let* (x%236) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%225,x%226,x%233,x%227,x%228,x%229,x%230,x%231,x%232)
//│                                       in jump head_opt$M%0(x%236)
//│ )
//│ Def(4, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(9, @join head_opt$M%0, [x%6], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%6 of
//│   Nil => let x%7 = None()
//│     in x%7
//│   Cons => let x%9 = x%6.h
//│     in let x%10 = Some(x%9)
//│       in x%10
//│ )
//│ Def(10, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%17,x%18) = mk_list$P%0(x%2)
//│     in n%0,x%17,x%18
//│ )
//│ Def(11, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(21, head_opt$M%0$D%3, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(22, mk_list$D%1$D%1$P%0, [x%17,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%36,x%37,x%38) = mk_list$D%1$P%0(x%17)
//│   in x%36,n%0,x%37,x%38
//│ )
//│ Def(23, mk_list$D%1$D%1$D%0, [x%36,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%39) = mk_list$D%1$D%0(x%36)
//│   in let x%4 = Cons(n%0,x%39)
//│     in x%4
//│ )
//│ Def(28, mk_list$D%1$D%1$D%1$P%0, [x%37,x%36,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%42,x%43,x%44,x%45) = mk_list$D%1$D%1$P%0(x%37,x%36)
//│   in x%44,n%0,x%43,x%42,x%45
//│ )
//│ Def(29, mk_list$D%1$D%1$D%1$D%0, [x%42,x%43,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%46) = mk_list$D%1$D%1$D%0(x%42,x%43)
//│   in let x%4 = Cons(n%0,x%46)
//│     in x%4
//│ )
//│ Def(33, head_opt$M%0$D%5, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(39, head_opt$M%0$D%7, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(40, mk_list$D%1$D%1$D%1$D%1$P%0, [x%44,x%42,x%43,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%75,x%76,x%77,x%78,x%79) = mk_list$D%1$D%1$D%1$P%0(x%44,x%42,x%43)
//│   in x%76,n%0,x%75,x%79,x%77,x%78
//│ )
//│ Def(41, mk_list$D%1$D%1$D%1$D%1$D%0, [x%78,x%77,x%76,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%80) = mk_list$D%1$D%1$D%1$D%0(x%78,x%77,x%76)
//│   in let x%4 = Cons(n%0,x%80)
//│     in x%4
//│ )
//│ Def(46, mk_list$D%1$D%1$D%1$D%1$D%1$P%0, [x%76,n%0,x%75,x%77,x%78], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None], 7, 
//│ let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%75,x%78,x%77,x%76)
//│   in x%101,x%102,n%0,x%104,x%100,x%99,x%103
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$D%1$D%0, [n%0,x%104,x%100,x%99,x%103], [{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%104,x%103,x%99,x%100)
//│   in let x%4 = Cons(n%0,x%105)
//│     in x%4
//│ )
//│ Def(51, head_opt$M%0$D%9, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(57, head_opt$M%0$D%11, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(58, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%101,n%0,x%104,x%100,x%99,x%103], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None], 8, 
//│ let* (x%126,x%127,x%128,x%129,x%130,x%131,x%132) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%99,x%100,x%101,x%103,x%104)
//│   in x%129,n%0,x%126,x%128,x%130,x%127,x%132,x%131
//│ )
//│ Def(59, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%129,n%0,x%128,x%130,x%132,x%131], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%133) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%128,x%129,x%130,x%131,x%132)
//│   in let x%4 = Cons(n%0,x%133)
//│     in x%4
//│ )
//│ Def(64, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%129,n%0,x%126,x%128,x%130,x%132,x%131], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None], 9, 
//│ let* (x%136,x%137,x%138,x%139,x%140,x%141,x%142,x%143) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%126,x%128,x%129,x%130,x%131,x%132)
//│   in x%136,n%0,x%137,x%141,x%142,x%138,x%143,x%140,x%139
//│ )
//│ Def(65, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%136,n%0,x%137,x%142,x%143,x%140,x%139], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%144) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%136,x%137,x%139,x%140,x%142,x%143)
//│   in let x%4 = Cons(n%0,x%144)
//│     in x%4
//│ )
//│ Def(69, head_opt$M%0$D%13, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(75, head_opt$M%0$D%15, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(76, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%136,n%0,x%137,x%142,x%138,x%143,x%140,x%139], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None,None], 10, 
//│ let* (x%189,x%190,x%191,x%192,x%193,x%194,x%195,x%196,x%197) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%136,x%137,x%138,x%139,x%140,x%142,x%143)
//│   in x%189,x%195,x%196,x%194,x%190,x%197,x%193,n%0,x%191,x%192
//│ )
//│ Def(77, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%189,x%195,x%191,x%196,x%190,x%197,x%193,n%0], [{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%198) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%189,x%190,x%191,x%193,x%195,x%196,x%197)
//│   in let x%4 = Cons(n%0,x%198)
//│     in x%4
//│ )
//│ Def(78, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1, [x%189,x%195,x%191,x%196,x%194,x%190,x%197,x%193,n%0], [{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%213,x%214,x%215,x%216,x%217,x%218,x%219,x%220,x%221,x%222) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%189,x%190,x%191,x%193,x%194,x%195,x%196,x%197)
//│   in if x%222
//│     true => let* (x%223) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%213,x%214,x%221,x%215,x%217,x%218,x%219,x%220)
//│       in let x%4 = Cons(n%0,x%223)
//│         in x%4
//│     false => let* (x%224) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%213,x%214,x%221,x%215,x%216,x%217,x%218,x%219,x%220)
//│       in let x%4 = Cons(n%0,x%224)
//│         in x%4
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(2, head_opt, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%21,x%22) = mk_list$P%0(10)
//│   in if x%22
//│     true => let x%7 = None()
//│       in x%7
//│     false => let* (x%31,x%32,x%33) = mk_list$D%1$P%0(x%21)
//│       in if x%33
//│         true => let* (x%34) = mk_list$D%1$D%0(x%31)
//│           in jump head_opt$M%0$D%3(x%34)
//│         false => let* (x%48,x%49,x%50,x%51) = mk_list$D%1$D%1$P%0(x%32,x%31)
//│           in if x%51
//│             true => let* (x%52) = mk_list$D%1$D%1$D%0(x%48,x%49)
//│               in jump head_opt$M%0$D%5(x%52)
//│             false => let* (x%68,x%69,x%70,x%71,x%72) = mk_list$D%1$D%1$D%1$P%0(x%50,x%48,x%49)
//│               in if x%72
//│                 true => let* (x%73) = mk_list$D%1$D%1$D%1$D%0(x%71,x%70,x%69)
//│                   in jump head_opt$M%0$D%7(x%73)
//│                 false => let* (x%83,x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$D%1$P%0(x%68,x%71,x%70,x%69)
//│                   in if x%86
//│                     true => let* (x%89) = mk_list$D%1$D%1$D%1$D%1$D%0(x%88,x%87,x%83,x%84)
//│                       in jump head_opt$M%0$D%9(x%89)
//│                     false => let* (x%117,x%118,x%119,x%120,x%121,x%122,x%123) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%83,x%84,x%85,x%87,x%88)
//│                       in if x%118
//│                         true => let* (x%124) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%119,x%120,x%121,x%122,x%123)
//│                           in jump head_opt$M%0$D%11(x%124)
//│                         false => let* (x%146,x%147,x%148,x%149,x%150,x%151,x%152,x%153) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%117,x%119,x%120,x%121,x%122,x%123)
//│                           in if x%151
//│                             true => let* (x%154) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%146,x%147,x%149,x%150,x%152,x%153)
//│                               in jump head_opt$M%0$D%13(x%154)
//│                             false => let* (x%178,x%179,x%180,x%181,x%182,x%183,x%184,x%185,x%186) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%146,x%147,x%148,x%149,x%150,x%152,x%153)
//│                               in if x%181
//│                                 true => let* (x%187) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%178,x%179,x%180,x%182,x%184,x%185,x%186)
//│                                   in jump head_opt$M%0$D%15(x%187)
//│                                 false => let* (x%225,x%226,x%227,x%228,x%229,x%230,x%231,x%232,x%233,x%234) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%178,x%179,x%180,x%182,x%183,x%184,x%185,x%186)
//│                                   in if x%234
//│                                     true => let* (x%235) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%225,x%226,x%233,x%227,x%229,x%230,x%231,x%232)
//│                                       in jump head_opt$M%0$D%17(x%235)
//│                                     false => let* (x%238,x%239,x%240,x%241,x%242,x%243,x%244,x%245,x%246,x%247,x%248) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%225,x%226,x%233,x%227,x%228,x%229,x%230,x%231,x%232)
//│                                       in if x%239
//│                                         true => let* (x%249) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%238,x%240,x%241,x%242,x%243,x%244,x%245,x%247,x%248)
//│                                           in jump head_opt$M%0(x%249)
//│                                         false => let* (x%250) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%238,x%240,x%241,x%242,x%243,x%244,x%245,x%246,x%247,x%248)
//│                                           in jump head_opt$M%0(x%250)
//│ )
//│ Def(4, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(9, @join head_opt$M%0, [x%6], [{EDestruct,EDirect,ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%6 of
//│   Nil => let x%7 = None()
//│     in x%7
//│   Cons => let x%9 = x%6.h
//│     in let x%10 = Some(x%9)
//│       in x%10
//│ )
//│ Def(10, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%17,x%18) = mk_list$P%0(x%2)
//│     in n%0,x%17,x%18
//│ )
//│ Def(11, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(21, head_opt$M%0$D%3, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(22, mk_list$D%1$D%1$P%0, [x%17,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%36,x%37,x%38) = mk_list$D%1$P%0(x%17)
//│   in x%36,n%0,x%37,x%38
//│ )
//│ Def(23, mk_list$D%1$D%1$D%0, [x%36,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%39) = mk_list$D%1$D%0(x%36)
//│   in let x%4 = Cons(n%0,x%39)
//│     in x%4
//│ )
//│ Def(28, mk_list$D%1$D%1$D%1$P%0, [x%37,x%36,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%42,x%43,x%44,x%45) = mk_list$D%1$D%1$P%0(x%37,x%36)
//│   in x%44,n%0,x%43,x%42,x%45
//│ )
//│ Def(29, mk_list$D%1$D%1$D%1$D%0, [x%42,x%43,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%46) = mk_list$D%1$D%1$D%0(x%42,x%43)
//│   in let x%4 = Cons(n%0,x%46)
//│     in x%4
//│ )
//│ Def(33, head_opt$M%0$D%5, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(39, head_opt$M%0$D%7, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(40, mk_list$D%1$D%1$D%1$D%1$P%0, [x%44,x%42,x%43,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%75,x%76,x%77,x%78,x%79) = mk_list$D%1$D%1$D%1$P%0(x%44,x%42,x%43)
//│   in x%76,n%0,x%75,x%79,x%77,x%78
//│ )
//│ Def(41, mk_list$D%1$D%1$D%1$D%1$D%0, [x%78,x%77,x%76,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%80) = mk_list$D%1$D%1$D%1$D%0(x%78,x%77,x%76)
//│   in let x%4 = Cons(n%0,x%80)
//│     in x%4
//│ )
//│ Def(46, mk_list$D%1$D%1$D%1$D%1$D%1$P%0, [x%76,n%0,x%75,x%77,x%78], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None], 7, 
//│ let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%75,x%78,x%77,x%76)
//│   in x%101,x%102,n%0,x%104,x%100,x%99,x%103
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$D%1$D%0, [n%0,x%104,x%100,x%99,x%103], [{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%104,x%103,x%99,x%100)
//│   in let x%4 = Cons(n%0,x%105)
//│     in x%4
//│ )
//│ Def(51, head_opt$M%0$D%9, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(57, head_opt$M%0$D%11, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(58, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%101,n%0,x%104,x%100,x%99,x%103], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None], 8, 
//│ let* (x%126,x%127,x%128,x%129,x%130,x%131,x%132) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%99,x%100,x%101,x%103,x%104)
//│   in x%129,n%0,x%126,x%128,x%130,x%127,x%132,x%131
//│ )
//│ Def(59, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%129,n%0,x%128,x%130,x%132,x%131], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%133) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%128,x%129,x%130,x%131,x%132)
//│   in let x%4 = Cons(n%0,x%133)
//│     in x%4
//│ )
//│ Def(64, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%129,n%0,x%126,x%128,x%130,x%132,x%131], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None], 9, 
//│ let* (x%136,x%137,x%138,x%139,x%140,x%141,x%142,x%143) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%126,x%128,x%129,x%130,x%131,x%132)
//│   in x%136,n%0,x%137,x%141,x%142,x%138,x%143,x%140,x%139
//│ )
//│ Def(65, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%136,n%0,x%137,x%142,x%143,x%140,x%139], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%144) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%136,x%137,x%139,x%140,x%142,x%143)
//│   in let x%4 = Cons(n%0,x%144)
//│     in x%4
//│ )
//│ Def(69, head_opt$M%0$D%13, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(75, head_opt$M%0$D%15, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(76, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%136,n%0,x%137,x%142,x%138,x%143,x%140,x%139], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None,None], 10, 
//│ let* (x%189,x%190,x%191,x%192,x%193,x%194,x%195,x%196,x%197) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%136,x%137,x%138,x%139,x%140,x%142,x%143)
//│   in x%189,x%195,x%196,x%194,x%190,x%197,x%193,n%0,x%191,x%192
//│ )
//│ Def(77, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%189,x%195,x%191,x%196,x%190,x%197,x%193,n%0], [{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%198) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%189,x%190,x%191,x%193,x%195,x%196,x%197)
//│   in let x%4 = Cons(n%0,x%198)
//│     in x%4
//│ )
//│ Def(84, head_opt$M%0$D%17, [x%6], [{ESelect(h)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(ICtor(Some))], 1, 
//│ let x%9 = x%6.h
//│   in let x%10 = Some(x%9)
//│     in x%10
//│ )
//│ Def(85, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%189,x%195,x%191,x%196,x%194,x%190,x%197,x%193,n%0], [{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None,None,None], 11, 
//│ let* (x%213,x%214,x%215,x%216,x%217,x%218,x%219,x%220,x%221,x%222) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%189,x%190,x%191,x%193,x%194,x%195,x%196,x%197)
//│   in x%215,x%222,x%218,n%0,x%219,x%217,x%220,x%213,x%216,x%221,x%214
//│ )
//│ Def(86, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%215,x%218,n%0,x%219,x%217,x%220,x%213,x%221,x%214], [{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%223) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%213,x%214,x%221,x%215,x%217,x%218,x%219,x%220)
//│   in let x%4 = Cons(n%0,x%223)
//│     in x%4
//│ )
//│ Def(87, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1, [x%215,x%218,n%0,x%219,x%217,x%220,x%213,x%216,x%221,x%214], [{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%251,x%252,x%253,x%254,x%255,x%256,x%257,x%258,x%259,x%260,x%261) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%213,x%214,x%221,x%215,x%216,x%217,x%218,x%219,x%220)
//│   in if x%252
//│     true => let* (x%262) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%251,x%253,x%254,x%255,x%256,x%257,x%258,x%260,x%261)
//│       in let x%4 = Cons(n%0,x%262)
//│         in x%4
//│     false => let* (x%263) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%251,x%253,x%254,x%255,x%256,x%257,x%258,x%259,x%260,x%261)
//│       in let x%4 = Cons(n%0,x%263)
//│         in x%4
//│ )
//│ },
//│ let* (x%12) = head_opt()
//│   in x%12)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ Some(10)
//│ 
//│ 
//│ Fuel used: 10
//│ GraphOpt failed: Fuel exhausted
//│ mlscript.compiler.optimizer.GraphOptimizingError$.apply(GraphOptimizer.scala:14)
//│ mlscript.compiler.DiffTestCompiler.postProcess(Test.scala:65)
//│ mlscript.DiffTests.rec$1(DiffTests.scala:438)
//│ mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:1067)
//│ org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
//│ org.scalatest.Transformer.apply(Transformer.scala:22)
//│ org.scalatest.Transformer.apply(Transformer.scala:20)
//│ org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:226)
//│ org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
//│ org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
//│ mlscript.DiffTests.org$scalatest$concurrent$TimeLimitedTests$$super$withFixture(DiffTests.scala:47)
//│ org.scalatest.concurrent.TimeLimitedTests.$anonfun$withFixture$3(TimeLimitedTests.scala:154)
//│ org.scalatest.enablers.Timed$$anon$1.timeoutAfter(Timed.scala:127)
//│ org.scalatest.concurrent.TimeLimits$.failAfterImpl(TimeLimits.scala:282)
//│ org.scalatest.concurrent.TimeLimitedTests.withFixture(TimeLimitedTests.scala:153)
//│ org.scalatest.concurrent.TimeLimitedTests.withFixture$(TimeLimitedTests.scala:150)
//│ mlscript.DiffTests.withFixture(DiffTests.scala:47)
//│ org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:224)
//│ org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:236)
//│ org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
//│ org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:236)
//│ org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:218)
//│ mlscript.DiffTests.org$scalatest$OneInstancePerTest$$super$runTest(DiffTests.scala:47)
//│ org.scalatest.OneInstancePerTest.runTest(OneInstancePerTest.scala:131)
//│ org.scalatest.OneInstancePerTest.runTest$(OneInstancePerTest.scala:123)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$runTest(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.runTest(ParallelTestExecution.scala:164)
//│ org.scalatest.ParallelTestExecution.runTest$(ParallelTestExecution.scala:148)
//│ mlscript.DiffTests.runTest(DiffTests.scala:47)
//│ org.scalatest.OneInstancePerTest.runTests(OneInstancePerTest.scala:181)
//│ org.scalatest.OneInstancePerTest.runTests$(OneInstancePerTest.scala:172)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$runTests(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.runTests(ParallelTestExecution.scala:97)
//│ org.scalatest.ParallelTestExecution.runTests$(ParallelTestExecution.scala:79)
//│ mlscript.DiffTests.runTests(DiffTests.scala:47)
//│ org.scalatest.Suite.run(Suite.scala:1114)
//│ org.scalatest.Suite.run$(Suite.scala:1096)
//│ org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1563)
//│ org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:273)
//│ org.scalatest.SuperEngine.runImpl(Engine.scala:535)
//│ org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:273)
//│ org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:272)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$run(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.run(ParallelTestExecution.scala:261)
//│ org.scalatest.ParallelTestExecution.run$(ParallelTestExecution.scala:258)
//│ mlscript.DiffTests.run(DiffTests.scala:47)
//│ org.scalatest.tools.DistributedTestRunnerSuite.run(DistributedTestRunnerSuite.scala:22)
//│ org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:47)
//│ java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
//│ java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
//│ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
//│ java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
//│ java.base/java.lang.Thread.run(Thread.java:840)

:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun mk_list(n) =
  if n == 0 then Nil else Cons(n, mk_list(n - 1))
fun last_opt(l) =
  if l is
    Nil then None
    Cons(h, t) then
      if t is
        Nil then Some(h)
        Cons(h2, t2) then last_opt(t)
fun main() =
  last_opt(mk_list(10))
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |Cons|(|h|,| |t|)|↵|#class| |Nil|↵|#class| |Some|(|x|)|↵|#class| |None|↵|#fun| |mk_list|(|n|)| |#=|→|#if| |n| |==| |0| |#then| |Nil| |#else| |Cons|(|n|,| |mk_list|(|n| |-| |1|)|)|←|↵|#fun| |last_opt|(|l|)| |#=|→|#if| |l| |is|→|Nil| |#then| |None|↵|Cons|(|h|,| |t|)| |#then|→|#if| |t| |is|→|Nil| |#then| |Some|(|h|)|↵|Cons|(|h2|,| |t2|)| |#then| |last_opt|(|t|)|←|←|←|←|↵|#fun| |main|(||)| |#=|→|last_opt|(|mk_list|(|10|)|)|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class Cons(h, t,) {}; class Nil {}; class Some(x,) {}; class None {}; fun mk_list = (n,) => {if (==(n,)(0,)) then Nil else Cons(n, mk_list(-(n,)(1,),),)}; fun last_opt = (l,) => {if l is ‹(Nil) then None; (Cons(h, t,)) then {if t is ‹(Nil) then Some(h,); (Cons(h2, t2,)) then last_opt(t,)›}›}; fun main = () => {last_opt(mk_list(10,),)}; main()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, Cons, (), Tup(_: Var(h), _: Var(t)), (), None, None, TypingUnit()), NuTypeDef(class, Nil, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, Some, (), Tup(_: Var(x)), (), None, None, TypingUnit()), NuTypeDef(class, None, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, mk_list, None, [], Lam(Tup(_: Var(n)), Blk(...))), NuFunDef(None, last_opt, None, [], Lam(Tup(_: Var(l)), Blk(...))), NuFunDef(None, main, None, [], Lam(Tup(), Blk(...))), App(Var(main), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%0 = ==(n%0,0)
//│   in if x%0
//│     true => let x%1 = Nil()
//│       in jump j%0(x%1)
//│     false => let x%2 = -(n%0,1)
//│       in let* (x%3) = mk_list(x%2)
//│         in let x%4 = Cons(n%0,x%3)
//│           in jump j%0(x%4)
//│ )
//│ Def(1, @join j%0, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%5
//│ )
//│ Def(2, last_opt, [l%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case l%0 of
//│   Nil => let x%6 = None()
//│     in jump j%1(x%6)
//│   Cons => let x%7 = l%0.t
//│     in let x%8 = l%0.h
//│       in case x%7 of
//│         Nil => let x%9 = Some(x%8)
//│           in jump j%2(x%9)
//│         Cons => let x%10 = x%7.t
//│           in let x%11 = x%7.h
//│             in let* (x%12) = last_opt(x%7)
//│               in jump j%2(x%12)
//│ )
//│ Def(3, @join j%2, [x%13], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ jump j%1(x%13)
//│ )
//│ Def(4, @join j%1, [x%14], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ x%14
//│ )
//│ Def(5, main, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%15) = mk_list(10)
//│   in let* (x%16) = last_opt(x%15)
//│     in x%16
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons),ICtor(Nil)))], 1, 
//│ let x%0 = ==(n%0,0)
//│   in if x%0
//│     true => let x%1 = Nil()
//│       in x%1
//│     false => let x%2 = -(n%0,1)
//│       in let* (x%3) = mk_list(x%2)
//│         in let x%4 = Cons(n%0,x%3)
//│           in x%4
//│ )
//│ Def(2, last_opt, [l%0], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons),ICtor(Nil)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case l%0 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%7 = l%0.t
//│     in let x%8 = l%0.h
//│       in case x%7 of
//│         Nil => let x%9 = Some(x%8)
//│           in x%9
//│         Cons => let* (x%12) = last_opt(x%7)
//│           in x%12
//│ )
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%15) = mk_list(10)
//│   in let* (x%16) = last_opt(x%15)
//│     in x%16
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Interpreted ------------------------------
//│ Some(1)
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%24,x%25) = mk_list$P%0(10)
//│   in if x%25
//│     true => let x%1 = Nil()
//│       in jump main$M%0(x%1)
//│     false => let* (x%27) = mk_list$D%1(x%24)
//│       in jump main$M%0(x%27)
//│ )
//│ Def(9, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(11, mk_list$D%1, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%28,x%29) = mk_list$P%0(x%2)
//│     in if x%29
//│       true => let x%1 = Nil()
//│         in let x%4 = Cons(n%0,x%1)
//│           in x%4
//│       false => let* (x%31) = mk_list$D%1(x%28)
//│         in let x%4 = Cons(n%0,x%31)
//│           in x%4
//│ )
//│ Def(13, @join main$M%0, [x%15], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Nil))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%15 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%35 = x%15.h
//│     in let x%36 = x%15.t
//│       in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│         in x%34
//│ )
//│ Def(16, last_opt$D%1$S%0, [l%0_h,l%0_t], [{EDirect},{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ case l%0_t of
//│   Nil => let x%9 = Some(l%0_h)
//│     in x%9
//│   Cons => let x%37 = l%0_t.h
//│     in let x%38 = l%0_t.t
//│       in let* (x%12) = last_opt$D%1$S%0(x%37,x%38)
//│         in x%12
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%24,x%25) = mk_list$P%0(10)
//│   in if x%25
//│     true => let x%6 = None()
//│       in x%6
//│     false => let* (x%42,x%43,x%44) = mk_list$D%1$P%0(x%24)
//│       in if x%44
//│         true => let* (x%45) = mk_list$D%1$D%0(x%42)
//│           in jump main$M%0(x%45)
//│         false => let* (x%46) = mk_list$D%1$D%1(x%43,x%42)
//│           in jump main$M%0(x%46)
//│ )
//│ Def(9, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(13, @join main$M%0, [x%15], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%15 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%35 = x%15.h
//│     in let x%36 = x%15.t
//│       in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│         in x%34
//│ )
//│ Def(16, last_opt$D%1$S%0, [l%0_h,l%0_t], [{EDirect},{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ case l%0_t of
//│   Nil => let x%9 = Some(l%0_h)
//│     in x%9
//│   Cons => let x%37 = l%0_t.h
//│     in let x%38 = l%0_t.t
//│       in let* (x%12) = last_opt$D%1$S%0(x%37,x%38)
//│         in x%12
//│ )
//│ Def(20, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%28,x%29) = mk_list$P%0(x%2)
//│     in n%0,x%28,x%29
//│ )
//│ Def(21, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(22, mk_list$D%1$D%1, [x%28,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%47,x%48,x%49) = mk_list$D%1$P%0(x%28)
//│   in if x%49
//│     true => let* (x%50) = mk_list$D%1$D%0(x%47)
//│       in let x%4 = Cons(n%0,x%50)
//│         in x%4
//│     false => let* (x%51) = mk_list$D%1$D%1(x%48,x%47)
//│       in let x%4 = Cons(n%0,x%51)
//│         in x%4
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%24,x%25) = mk_list$P%0(10)
//│   in if x%25
//│     true => let x%6 = None()
//│       in x%6
//│     false => let* (x%42,x%43,x%44) = mk_list$D%1$P%0(x%24)
//│       in if x%44
//│         true => let* (x%45) = mk_list$D%1$D%0(x%42)
//│           in jump main$M%0$D%3(x%45)
//│         false => let* (x%58,x%59,x%60,x%61) = mk_list$D%1$D%1$P%0(x%43,x%42)
//│           in if x%61
//│             true => let* (x%62) = mk_list$D%1$D%1$D%0(x%58,x%59)
//│               in jump main$M%0(x%62)
//│             false => let* (x%63) = mk_list$D%1$D%1$D%1(x%60,x%58,x%59)
//│               in jump main$M%0(x%63)
//│ )
//│ Def(9, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(13, @join main$M%0, [x%15], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%15 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%35 = x%15.h
//│     in let x%36 = x%15.t
//│       in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│         in x%34
//│ )
//│ Def(16, last_opt$D%1$S%0, [l%0_h,l%0_t], [{EDirect},{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ case l%0_t of
//│   Nil => let x%9 = Some(l%0_h)
//│     in x%9
//│   Cons => let x%37 = l%0_t.h
//│     in let x%38 = l%0_t.t
//│       in let* (x%12) = last_opt$D%1$S%0(x%37,x%38)
//│         in x%12
//│ )
//│ Def(20, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%28,x%29) = mk_list$P%0(x%2)
//│     in n%0,x%28,x%29
//│ )
//│ Def(21, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(28, main$M%0$D%3, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(29, mk_list$D%1$D%1$P%0, [x%28,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%47,x%48,x%49) = mk_list$D%1$P%0(x%28)
//│   in x%47,n%0,x%48,x%49
//│ )
//│ Def(30, mk_list$D%1$D%1$D%0, [x%47,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%50) = mk_list$D%1$D%0(x%47)
//│   in let x%4 = Cons(n%0,x%50)
//│     in x%4
//│ )
//│ Def(31, mk_list$D%1$D%1$D%1, [x%48,x%47,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%70,x%71,x%72,x%73) = mk_list$D%1$D%1$P%0(x%48,x%47)
//│   in if x%73
//│     true => let* (x%74) = mk_list$D%1$D%1$D%0(x%70,x%71)
//│       in let x%4 = Cons(n%0,x%74)
//│         in x%4
//│     false => let* (x%75) = mk_list$D%1$D%1$D%1(x%72,x%70,x%71)
//│       in let x%4 = Cons(n%0,x%75)
//│         in x%4
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%24,x%25) = mk_list$P%0(10)
//│   in if x%25
//│     true => let x%6 = None()
//│       in x%6
//│     false => let* (x%42,x%43,x%44) = mk_list$D%1$P%0(x%24)
//│       in if x%44
//│         true => let* (x%45) = mk_list$D%1$D%0(x%42)
//│           in jump main$M%0$D%3(x%45)
//│         false => let* (x%58,x%59,x%60,x%61) = mk_list$D%1$D%1$P%0(x%43,x%42)
//│           in if x%61
//│             true => let* (x%62) = mk_list$D%1$D%1$D%0(x%58,x%59)
//│               in jump main$M%0$D%5(x%62)
//│             false => let* (x%77,x%78,x%79,x%80,x%81) = mk_list$D%1$D%1$D%1$P%0(x%60,x%58,x%59)
//│               in if x%77
//│                 true => let* (x%82) = mk_list$D%1$D%1$D%1$D%0(x%80,x%81,x%79)
//│                   in jump main$M%0(x%82)
//│                 false => let* (x%83) = mk_list$D%1$D%1$D%1$D%1(x%78,x%80,x%81,x%79)
//│                   in jump main$M%0(x%83)
//│ )
//│ Def(9, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(13, @join main$M%0, [x%15], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%15 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%35 = x%15.h
//│     in let x%36 = x%15.t
//│       in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│         in x%34
//│ )
//│ Def(16, last_opt$D%1$S%0, [l%0_h,l%0_t], [{EDirect},{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ case l%0_t of
//│   Nil => let x%9 = Some(l%0_h)
//│     in x%9
//│   Cons => let x%37 = l%0_t.h
//│     in let x%38 = l%0_t.t
//│       in let* (x%12) = last_opt$D%1$S%0(x%37,x%38)
//│         in x%12
//│ )
//│ Def(20, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%28,x%29) = mk_list$P%0(x%2)
//│     in n%0,x%28,x%29
//│ )
//│ Def(21, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(28, main$M%0$D%3, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(29, mk_list$D%1$D%1$P%0, [x%28,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%47,x%48,x%49) = mk_list$D%1$P%0(x%28)
//│   in x%47,n%0,x%48,x%49
//│ )
//│ Def(30, mk_list$D%1$D%1$D%0, [x%47,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%50) = mk_list$D%1$D%0(x%47)
//│   in let x%4 = Cons(n%0,x%50)
//│     in x%4
//│ )
//│ Def(37, main$M%0$D%5, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(38, mk_list$D%1$D%1$D%1$P%0, [x%48,x%47,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%70,x%71,x%72,x%73) = mk_list$D%1$D%1$P%0(x%48,x%47)
//│   in x%73,x%72,n%0,x%70,x%71
//│ )
//│ Def(39, mk_list$D%1$D%1$D%1$D%0, [x%70,x%71,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%74) = mk_list$D%1$D%1$D%0(x%70,x%71)
//│   in let x%4 = Cons(n%0,x%74)
//│     in x%4
//│ )
//│ Def(40, mk_list$D%1$D%1$D%1$D%1, [x%72,x%70,x%71,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$P%0(x%72,x%70,x%71)
//│   in if x%84
//│     true => let* (x%89) = mk_list$D%1$D%1$D%1$D%0(x%87,x%88,x%86)
//│       in let x%4 = Cons(n%0,x%89)
//│         in x%4
//│     false => let* (x%90) = mk_list$D%1$D%1$D%1$D%1(x%85,x%87,x%88,x%86)
//│       in let x%4 = Cons(n%0,x%90)
//│         in x%4
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%24,x%25) = mk_list$P%0(10)
//│   in if x%25
//│     true => let x%6 = None()
//│       in x%6
//│     false => let* (x%42,x%43,x%44) = mk_list$D%1$P%0(x%24)
//│       in if x%44
//│         true => let* (x%45) = mk_list$D%1$D%0(x%42)
//│           in jump main$M%0$D%3(x%45)
//│         false => let* (x%58,x%59,x%60,x%61) = mk_list$D%1$D%1$P%0(x%43,x%42)
//│           in if x%61
//│             true => let* (x%62) = mk_list$D%1$D%1$D%0(x%58,x%59)
//│               in jump main$M%0$D%5(x%62)
//│             false => let* (x%77,x%78,x%79,x%80,x%81) = mk_list$D%1$D%1$D%1$P%0(x%60,x%58,x%59)
//│               in if x%77
//│                 true => let* (x%82) = mk_list$D%1$D%1$D%1$D%0(x%80,x%81,x%79)
//│                   in jump main$M%0$D%7(x%82)
//│                 false => let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%78,x%80,x%81,x%79)
//│                   in if x%99
//│                     true => let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%100,x%104,x%102,x%101)
//│                       in jump main$M%0(x%105)
//│                     false => let* (x%106) = mk_list$D%1$D%1$D%1$D%1$D%1(x%100,x%101,x%102,x%103,x%104)
//│                       in jump main$M%0(x%106)
//│ )
//│ Def(9, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(13, @join main$M%0, [x%15], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%15 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%35 = x%15.h
//│     in let x%36 = x%15.t
//│       in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│         in x%34
//│ )
//│ Def(16, last_opt$D%1$S%0, [l%0_h,l%0_t], [{EDirect},{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ case l%0_t of
//│   Nil => let x%9 = Some(l%0_h)
//│     in x%9
//│   Cons => let x%37 = l%0_t.h
//│     in let x%38 = l%0_t.t
//│       in let* (x%12) = last_opt$D%1$S%0(x%37,x%38)
//│         in x%12
//│ )
//│ Def(20, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%28,x%29) = mk_list$P%0(x%2)
//│     in n%0,x%28,x%29
//│ )
//│ Def(21, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(28, main$M%0$D%3, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(29, mk_list$D%1$D%1$P%0, [x%28,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%47,x%48,x%49) = mk_list$D%1$P%0(x%28)
//│   in x%47,n%0,x%48,x%49
//│ )
//│ Def(30, mk_list$D%1$D%1$D%0, [x%47,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%50) = mk_list$D%1$D%0(x%47)
//│   in let x%4 = Cons(n%0,x%50)
//│     in x%4
//│ )
//│ Def(37, main$M%0$D%5, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(38, mk_list$D%1$D%1$D%1$P%0, [x%48,x%47,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%70,x%71,x%72,x%73) = mk_list$D%1$D%1$P%0(x%48,x%47)
//│   in x%73,x%72,n%0,x%70,x%71
//│ )
//│ Def(39, mk_list$D%1$D%1$D%1$D%0, [x%70,x%71,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%74) = mk_list$D%1$D%1$D%0(x%70,x%71)
//│   in let x%4 = Cons(n%0,x%74)
//│     in x%4
//│ )
//│ Def(46, main$M%0$D%7, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$P%0, [x%72,x%70,x%71,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$P%0(x%72,x%70,x%71)
//│   in x%84,x%87,n%0,x%86,x%85,x%88
//│ )
//│ Def(48, mk_list$D%1$D%1$D%1$D%1$D%0, [x%87,x%88,x%86,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%89) = mk_list$D%1$D%1$D%1$D%0(x%87,x%88,x%86)
//│   in let x%4 = Cons(n%0,x%89)
//│     in x%4
//│ )
//│ Def(49, mk_list$D%1$D%1$D%1$D%1$D%1, [x%87,n%0,x%86,x%85,x%88], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%107,x%108,x%109,x%110,x%111,x%112) = mk_list$D%1$D%1$D%1$D%1$P%0(x%85,x%87,x%88,x%86)
//│   in if x%107
//│     true => let* (x%113) = mk_list$D%1$D%1$D%1$D%1$D%0(x%108,x%112,x%110,x%109)
//│       in let x%4 = Cons(n%0,x%113)
//│         in x%4
//│     false => let* (x%114) = mk_list$D%1$D%1$D%1$D%1$D%1(x%108,x%109,x%110,x%111,x%112)
//│       in let x%4 = Cons(n%0,x%114)
//│         in x%4
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%24,x%25) = mk_list$P%0(10)
//│   in if x%25
//│     true => let x%6 = None()
//│       in x%6
//│     false => let* (x%42,x%43,x%44) = mk_list$D%1$P%0(x%24)
//│       in if x%44
//│         true => let* (x%45) = mk_list$D%1$D%0(x%42)
//│           in jump main$M%0$D%3(x%45)
//│         false => let* (x%58,x%59,x%60,x%61) = mk_list$D%1$D%1$P%0(x%43,x%42)
//│           in if x%61
//│             true => let* (x%62) = mk_list$D%1$D%1$D%0(x%58,x%59)
//│               in jump main$M%0$D%5(x%62)
//│             false => let* (x%77,x%78,x%79,x%80,x%81) = mk_list$D%1$D%1$D%1$P%0(x%60,x%58,x%59)
//│               in if x%77
//│                 true => let* (x%82) = mk_list$D%1$D%1$D%1$D%0(x%80,x%81,x%79)
//│                   in jump main$M%0$D%7(x%82)
//│                 false => let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%78,x%80,x%81,x%79)
//│                   in if x%99
//│                     true => let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%100,x%104,x%102,x%101)
//│                       in jump main$M%0$D%9(x%105)
//│                     false => let* (x%124,x%125,x%126,x%127,x%128,x%129,x%130) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%100,x%101,x%102,x%103,x%104)
//│                       in if x%127
//│                         true => let* (x%131) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%124,x%125,x%126,x%129,x%128)
//│                           in jump main$M%0(x%131)
//│                         false => let* (x%132) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1(x%124,x%125,x%126,x%128,x%129,x%130)
//│                           in jump main$M%0(x%132)
//│ )
//│ Def(9, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(13, @join main$M%0, [x%15], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%15 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%35 = x%15.h
//│     in let x%36 = x%15.t
//│       in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│         in x%34
//│ )
//│ Def(16, last_opt$D%1$S%0, [l%0_h,l%0_t], [{EDirect},{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ case l%0_t of
//│   Nil => let x%9 = Some(l%0_h)
//│     in x%9
//│   Cons => let x%37 = l%0_t.h
//│     in let x%38 = l%0_t.t
//│       in let* (x%12) = last_opt$D%1$S%0(x%37,x%38)
//│         in x%12
//│ )
//│ Def(20, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%28,x%29) = mk_list$P%0(x%2)
//│     in n%0,x%28,x%29
//│ )
//│ Def(21, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(28, main$M%0$D%3, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(29, mk_list$D%1$D%1$P%0, [x%28,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%47,x%48,x%49) = mk_list$D%1$P%0(x%28)
//│   in x%47,n%0,x%48,x%49
//│ )
//│ Def(30, mk_list$D%1$D%1$D%0, [x%47,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%50) = mk_list$D%1$D%0(x%47)
//│   in let x%4 = Cons(n%0,x%50)
//│     in x%4
//│ )
//│ Def(37, main$M%0$D%5, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(38, mk_list$D%1$D%1$D%1$P%0, [x%48,x%47,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%70,x%71,x%72,x%73) = mk_list$D%1$D%1$P%0(x%48,x%47)
//│   in x%73,x%72,n%0,x%70,x%71
//│ )
//│ Def(39, mk_list$D%1$D%1$D%1$D%0, [x%70,x%71,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%74) = mk_list$D%1$D%1$D%0(x%70,x%71)
//│   in let x%4 = Cons(n%0,x%74)
//│     in x%4
//│ )
//│ Def(46, main$M%0$D%7, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$P%0, [x%72,x%70,x%71,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$P%0(x%72,x%70,x%71)
//│   in x%84,x%87,n%0,x%86,x%85,x%88
//│ )
//│ Def(48, mk_list$D%1$D%1$D%1$D%1$D%0, [x%87,x%88,x%86,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%89) = mk_list$D%1$D%1$D%1$D%0(x%87,x%88,x%86)
//│   in let x%4 = Cons(n%0,x%89)
//│     in x%4
//│ )
//│ Def(55, main$M%0$D%9, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(56, mk_list$D%1$D%1$D%1$D%1$D%1$P%0, [x%87,n%0,x%86,x%85,x%88], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None], 7, 
//│ let* (x%107,x%108,x%109,x%110,x%111,x%112) = mk_list$D%1$D%1$D%1$D%1$P%0(x%85,x%87,x%88,x%86)
//│   in x%108,n%0,x%109,x%107,x%110,x%112,x%111
//│ )
//│ Def(57, mk_list$D%1$D%1$D%1$D%1$D%1$D%0, [x%108,n%0,x%109,x%112,x%110], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%113) = mk_list$D%1$D%1$D%1$D%1$D%0(x%108,x%112,x%110,x%109)
//│   in let x%4 = Cons(n%0,x%113)
//│     in x%4
//│ )
//│ Def(58, mk_list$D%1$D%1$D%1$D%1$D%1$D%1, [x%108,n%0,x%109,x%110,x%112,x%111], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%133,x%134,x%135,x%136,x%137,x%138,x%139) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%108,x%109,x%110,x%111,x%112)
//│   in if x%136
//│     true => let* (x%140) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%133,x%134,x%135,x%138,x%137)
//│       in let x%4 = Cons(n%0,x%140)
//│         in x%4
//│     false => let* (x%141) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1(x%133,x%134,x%135,x%137,x%138,x%139)
//│       in let x%4 = Cons(n%0,x%141)
//│         in x%4
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%24,x%25) = mk_list$P%0(10)
//│   in if x%25
//│     true => let x%6 = None()
//│       in x%6
//│     false => let* (x%42,x%43,x%44) = mk_list$D%1$P%0(x%24)
//│       in if x%44
//│         true => let* (x%45) = mk_list$D%1$D%0(x%42)
//│           in jump main$M%0$D%3(x%45)
//│         false => let* (x%58,x%59,x%60,x%61) = mk_list$D%1$D%1$P%0(x%43,x%42)
//│           in if x%61
//│             true => let* (x%62) = mk_list$D%1$D%1$D%0(x%58,x%59)
//│               in jump main$M%0$D%5(x%62)
//│             false => let* (x%77,x%78,x%79,x%80,x%81) = mk_list$D%1$D%1$D%1$P%0(x%60,x%58,x%59)
//│               in if x%77
//│                 true => let* (x%82) = mk_list$D%1$D%1$D%1$D%0(x%80,x%81,x%79)
//│                   in jump main$M%0$D%7(x%82)
//│                 false => let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%78,x%80,x%81,x%79)
//│                   in if x%99
//│                     true => let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%100,x%104,x%102,x%101)
//│                       in jump main$M%0$D%9(x%105)
//│                     false => let* (x%124,x%125,x%126,x%127,x%128,x%129,x%130) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%100,x%101,x%102,x%103,x%104)
//│                       in if x%127
//│                         true => let* (x%131) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%124,x%125,x%126,x%129,x%128)
//│                           in jump main$M%0$D%11(x%131)
//│                         false => let* (x%152,x%153,x%154,x%155,x%156,x%157,x%158,x%159) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%124,x%125,x%126,x%128,x%129,x%130)
//│                           in if x%153
//│                             true => let* (x%160) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%152,x%154,x%155,x%156,x%158,x%159)
//│                               in jump main$M%0(x%160)
//│                             false => let* (x%161) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%152,x%154,x%155,x%156,x%157,x%158,x%159)
//│                               in jump main$M%0(x%161)
//│ )
//│ Def(9, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(13, @join main$M%0, [x%15], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%15 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%35 = x%15.h
//│     in let x%36 = x%15.t
//│       in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│         in x%34
//│ )
//│ Def(16, last_opt$D%1$S%0, [l%0_h,l%0_t], [{EDirect},{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ case l%0_t of
//│   Nil => let x%9 = Some(l%0_h)
//│     in x%9
//│   Cons => let x%37 = l%0_t.h
//│     in let x%38 = l%0_t.t
//│       in let* (x%12) = last_opt$D%1$S%0(x%37,x%38)
//│         in x%12
//│ )
//│ Def(20, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%28,x%29) = mk_list$P%0(x%2)
//│     in n%0,x%28,x%29
//│ )
//│ Def(21, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(28, main$M%0$D%3, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(29, mk_list$D%1$D%1$P%0, [x%28,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%47,x%48,x%49) = mk_list$D%1$P%0(x%28)
//│   in x%47,n%0,x%48,x%49
//│ )
//│ Def(30, mk_list$D%1$D%1$D%0, [x%47,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%50) = mk_list$D%1$D%0(x%47)
//│   in let x%4 = Cons(n%0,x%50)
//│     in x%4
//│ )
//│ Def(37, main$M%0$D%5, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(38, mk_list$D%1$D%1$D%1$P%0, [x%48,x%47,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%70,x%71,x%72,x%73) = mk_list$D%1$D%1$P%0(x%48,x%47)
//│   in x%73,x%72,n%0,x%70,x%71
//│ )
//│ Def(39, mk_list$D%1$D%1$D%1$D%0, [x%70,x%71,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%74) = mk_list$D%1$D%1$D%0(x%70,x%71)
//│   in let x%4 = Cons(n%0,x%74)
//│     in x%4
//│ )
//│ Def(46, main$M%0$D%7, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$P%0, [x%72,x%70,x%71,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$P%0(x%72,x%70,x%71)
//│   in x%84,x%87,n%0,x%86,x%85,x%88
//│ )
//│ Def(48, mk_list$D%1$D%1$D%1$D%1$D%0, [x%87,x%88,x%86,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%89) = mk_list$D%1$D%1$D%1$D%0(x%87,x%88,x%86)
//│   in let x%4 = Cons(n%0,x%89)
//│     in x%4
//│ )
//│ Def(55, main$M%0$D%9, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(56, mk_list$D%1$D%1$D%1$D%1$D%1$P%0, [x%87,n%0,x%86,x%85,x%88], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None], 7, 
//│ let* (x%107,x%108,x%109,x%110,x%111,x%112) = mk_list$D%1$D%1$D%1$D%1$P%0(x%85,x%87,x%88,x%86)
//│   in x%108,n%0,x%109,x%107,x%110,x%112,x%111
//│ )
//│ Def(57, mk_list$D%1$D%1$D%1$D%1$D%1$D%0, [x%108,n%0,x%109,x%112,x%110], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%113) = mk_list$D%1$D%1$D%1$D%1$D%0(x%108,x%112,x%110,x%109)
//│   in let x%4 = Cons(n%0,x%113)
//│     in x%4
//│ )
//│ Def(64, main$M%0$D%11, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(65, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%108,n%0,x%109,x%110,x%112,x%111], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None], 8, 
//│ let* (x%133,x%134,x%135,x%136,x%137,x%138,x%139) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%108,x%109,x%110,x%111,x%112)
//│   in x%133,x%136,x%134,n%0,x%137,x%139,x%135,x%138
//│ )
//│ Def(66, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%133,x%134,n%0,x%137,x%135,x%138], [{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%140) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%133,x%134,x%135,x%138,x%137)
//│   in let x%4 = Cons(n%0,x%140)
//│     in x%4
//│ )
//│ Def(67, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1, [x%133,x%134,n%0,x%137,x%139,x%135,x%138], [{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%172,x%173,x%174,x%175,x%176,x%177,x%178,x%179) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%133,x%134,x%135,x%137,x%138,x%139)
//│   in if x%173
//│     true => let* (x%180) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%172,x%174,x%175,x%176,x%178,x%179)
//│       in let x%4 = Cons(n%0,x%180)
//│         in x%4
//│     false => let* (x%181) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%172,x%174,x%175,x%176,x%177,x%178,x%179)
//│       in let x%4 = Cons(n%0,x%181)
//│         in x%4
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%24,x%25) = mk_list$P%0(10)
//│   in if x%25
//│     true => let x%6 = None()
//│       in x%6
//│     false => let* (x%42,x%43,x%44) = mk_list$D%1$P%0(x%24)
//│       in if x%44
//│         true => let* (x%45) = mk_list$D%1$D%0(x%42)
//│           in jump main$M%0$D%3(x%45)
//│         false => let* (x%58,x%59,x%60,x%61) = mk_list$D%1$D%1$P%0(x%43,x%42)
//│           in if x%61
//│             true => let* (x%62) = mk_list$D%1$D%1$D%0(x%58,x%59)
//│               in jump main$M%0$D%5(x%62)
//│             false => let* (x%77,x%78,x%79,x%80,x%81) = mk_list$D%1$D%1$D%1$P%0(x%60,x%58,x%59)
//│               in if x%77
//│                 true => let* (x%82) = mk_list$D%1$D%1$D%1$D%0(x%80,x%81,x%79)
//│                   in jump main$M%0$D%7(x%82)
//│                 false => let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%78,x%80,x%81,x%79)
//│                   in if x%99
//│                     true => let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%100,x%104,x%102,x%101)
//│                       in jump main$M%0$D%9(x%105)
//│                     false => let* (x%124,x%125,x%126,x%127,x%128,x%129,x%130) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%100,x%101,x%102,x%103,x%104)
//│                       in if x%127
//│                         true => let* (x%131) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%124,x%125,x%126,x%129,x%128)
//│                           in jump main$M%0$D%11(x%131)
//│                         false => let* (x%152,x%153,x%154,x%155,x%156,x%157,x%158,x%159) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%124,x%125,x%126,x%128,x%129,x%130)
//│                           in if x%153
//│                             true => let* (x%160) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%152,x%154,x%155,x%156,x%158,x%159)
//│                               in jump main$M%0$D%13(x%160)
//│                             false => let* (x%183,x%184,x%185,x%186,x%187,x%188,x%189,x%190,x%191) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%152,x%154,x%155,x%156,x%157,x%158,x%159)
//│                               in if x%184
//│                                 true => let* (x%192) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%185,x%186,x%187,x%188,x%189,x%190,x%191)
//│                                   in jump main$M%0(x%192)
//│                                 false => let* (x%193) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%183,x%185,x%186,x%187,x%188,x%189,x%190,x%191)
//│                                   in jump main$M%0(x%193)
//│ )
//│ Def(9, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(13, @join main$M%0, [x%15], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%15 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%35 = x%15.h
//│     in let x%36 = x%15.t
//│       in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│         in x%34
//│ )
//│ Def(16, last_opt$D%1$S%0, [l%0_h,l%0_t], [{EDirect},{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ case l%0_t of
//│   Nil => let x%9 = Some(l%0_h)
//│     in x%9
//│   Cons => let x%37 = l%0_t.h
//│     in let x%38 = l%0_t.t
//│       in let* (x%12) = last_opt$D%1$S%0(x%37,x%38)
//│         in x%12
//│ )
//│ Def(20, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%28,x%29) = mk_list$P%0(x%2)
//│     in n%0,x%28,x%29
//│ )
//│ Def(21, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(28, main$M%0$D%3, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(29, mk_list$D%1$D%1$P%0, [x%28,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%47,x%48,x%49) = mk_list$D%1$P%0(x%28)
//│   in x%47,n%0,x%48,x%49
//│ )
//│ Def(30, mk_list$D%1$D%1$D%0, [x%47,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%50) = mk_list$D%1$D%0(x%47)
//│   in let x%4 = Cons(n%0,x%50)
//│     in x%4
//│ )
//│ Def(37, main$M%0$D%5, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(38, mk_list$D%1$D%1$D%1$P%0, [x%48,x%47,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%70,x%71,x%72,x%73) = mk_list$D%1$D%1$P%0(x%48,x%47)
//│   in x%73,x%72,n%0,x%70,x%71
//│ )
//│ Def(39, mk_list$D%1$D%1$D%1$D%0, [x%70,x%71,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%74) = mk_list$D%1$D%1$D%0(x%70,x%71)
//│   in let x%4 = Cons(n%0,x%74)
//│     in x%4
//│ )
//│ Def(46, main$M%0$D%7, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$P%0, [x%72,x%70,x%71,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$P%0(x%72,x%70,x%71)
//│   in x%84,x%87,n%0,x%86,x%85,x%88
//│ )
//│ Def(48, mk_list$D%1$D%1$D%1$D%1$D%0, [x%87,x%88,x%86,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%89) = mk_list$D%1$D%1$D%1$D%0(x%87,x%88,x%86)
//│   in let x%4 = Cons(n%0,x%89)
//│     in x%4
//│ )
//│ Def(55, main$M%0$D%9, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(56, mk_list$D%1$D%1$D%1$D%1$D%1$P%0, [x%87,n%0,x%86,x%85,x%88], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None], 7, 
//│ let* (x%107,x%108,x%109,x%110,x%111,x%112) = mk_list$D%1$D%1$D%1$D%1$P%0(x%85,x%87,x%88,x%86)
//│   in x%108,n%0,x%109,x%107,x%110,x%112,x%111
//│ )
//│ Def(57, mk_list$D%1$D%1$D%1$D%1$D%1$D%0, [x%108,n%0,x%109,x%112,x%110], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%113) = mk_list$D%1$D%1$D%1$D%1$D%0(x%108,x%112,x%110,x%109)
//│   in let x%4 = Cons(n%0,x%113)
//│     in x%4
//│ )
//│ Def(64, main$M%0$D%11, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(65, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%108,n%0,x%109,x%110,x%112,x%111], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None], 8, 
//│ let* (x%133,x%134,x%135,x%136,x%137,x%138,x%139) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%108,x%109,x%110,x%111,x%112)
//│   in x%133,x%136,x%134,n%0,x%137,x%139,x%135,x%138
//│ )
//│ Def(66, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%133,x%134,n%0,x%137,x%135,x%138], [{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%140) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%133,x%134,x%135,x%138,x%137)
//│   in let x%4 = Cons(n%0,x%140)
//│     in x%4
//│ )
//│ Def(73, main$M%0$D%13, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(74, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%133,x%134,n%0,x%137,x%139,x%135,x%138], [{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None], 9, 
//│ let* (x%172,x%173,x%174,x%175,x%176,x%177,x%178,x%179) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%133,x%134,x%135,x%137,x%138,x%139)
//│   in x%177,x%173,x%179,x%174,x%172,x%176,x%175,x%178,n%0
//│ )
//│ Def(75, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%179,x%174,x%172,x%176,x%175,x%178,n%0], [{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%180) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%172,x%174,x%175,x%176,x%178,x%179)
//│   in let x%4 = Cons(n%0,x%180)
//│     in x%4
//│ )
//│ Def(76, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1, [x%177,x%179,x%174,x%172,x%176,x%175,x%178,n%0], [{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%194,x%195,x%196,x%197,x%198,x%199,x%200,x%201,x%202) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%172,x%174,x%175,x%176,x%177,x%178,x%179)
//│   in if x%195
//│     true => let* (x%203) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%196,x%197,x%198,x%199,x%200,x%201,x%202)
//│       in let x%4 = Cons(n%0,x%203)
//│         in x%4
//│     false => let* (x%204) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%194,x%196,x%197,x%198,x%199,x%200,x%201,x%202)
//│       in let x%4 = Cons(n%0,x%204)
//│         in x%4
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%24,x%25) = mk_list$P%0(10)
//│   in if x%25
//│     true => let x%6 = None()
//│       in x%6
//│     false => let* (x%42,x%43,x%44) = mk_list$D%1$P%0(x%24)
//│       in if x%44
//│         true => let* (x%45) = mk_list$D%1$D%0(x%42)
//│           in jump main$M%0$D%3(x%45)
//│         false => let* (x%58,x%59,x%60,x%61) = mk_list$D%1$D%1$P%0(x%43,x%42)
//│           in if x%61
//│             true => let* (x%62) = mk_list$D%1$D%1$D%0(x%58,x%59)
//│               in jump main$M%0$D%5(x%62)
//│             false => let* (x%77,x%78,x%79,x%80,x%81) = mk_list$D%1$D%1$D%1$P%0(x%60,x%58,x%59)
//│               in if x%77
//│                 true => let* (x%82) = mk_list$D%1$D%1$D%1$D%0(x%80,x%81,x%79)
//│                   in jump main$M%0$D%7(x%82)
//│                 false => let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%78,x%80,x%81,x%79)
//│                   in if x%99
//│                     true => let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%100,x%104,x%102,x%101)
//│                       in jump main$M%0$D%9(x%105)
//│                     false => let* (x%124,x%125,x%126,x%127,x%128,x%129,x%130) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%100,x%101,x%102,x%103,x%104)
//│                       in if x%127
//│                         true => let* (x%131) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%124,x%125,x%126,x%129,x%128)
//│                           in jump main$M%0$D%11(x%131)
//│                         false => let* (x%152,x%153,x%154,x%155,x%156,x%157,x%158,x%159) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%124,x%125,x%126,x%128,x%129,x%130)
//│                           in if x%153
//│                             true => let* (x%160) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%152,x%154,x%155,x%156,x%158,x%159)
//│                               in jump main$M%0$D%13(x%160)
//│                             false => let* (x%183,x%184,x%185,x%186,x%187,x%188,x%189,x%190,x%191) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%152,x%154,x%155,x%156,x%157,x%158,x%159)
//│                               in if x%184
//│                                 true => let* (x%192) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%185,x%186,x%187,x%188,x%189,x%190,x%191)
//│                                   in jump main$M%0$D%15(x%192)
//│                                 false => let* (x%217,x%218,x%219,x%220,x%221,x%222,x%223,x%224,x%225,x%226) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%183,x%185,x%186,x%187,x%188,x%189,x%190,x%191)
//│                                   in if x%221
//│                                     true => let* (x%227) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%217,x%218,x%219,x%220,x%222,x%224,x%225,x%226)
//│                                       in jump main$M%0(x%227)
//│                                     false => let* (x%228) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%217,x%218,x%219,x%220,x%222,x%223,x%224,x%225,x%226)
//│                                       in jump main$M%0(x%228)
//│ )
//│ Def(9, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(13, @join main$M%0, [x%15], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%15 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%35 = x%15.h
//│     in let x%36 = x%15.t
//│       in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│         in x%34
//│ )
//│ Def(16, last_opt$D%1$S%0, [l%0_h,l%0_t], [{EDirect},{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ case l%0_t of
//│   Nil => let x%9 = Some(l%0_h)
//│     in x%9
//│   Cons => let x%37 = l%0_t.h
//│     in let x%38 = l%0_t.t
//│       in let* (x%12) = last_opt$D%1$S%0(x%37,x%38)
//│         in x%12
//│ )
//│ Def(20, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%28,x%29) = mk_list$P%0(x%2)
//│     in n%0,x%28,x%29
//│ )
//│ Def(21, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(28, main$M%0$D%3, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(29, mk_list$D%1$D%1$P%0, [x%28,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%47,x%48,x%49) = mk_list$D%1$P%0(x%28)
//│   in x%47,n%0,x%48,x%49
//│ )
//│ Def(30, mk_list$D%1$D%1$D%0, [x%47,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%50) = mk_list$D%1$D%0(x%47)
//│   in let x%4 = Cons(n%0,x%50)
//│     in x%4
//│ )
//│ Def(37, main$M%0$D%5, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(38, mk_list$D%1$D%1$D%1$P%0, [x%48,x%47,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%70,x%71,x%72,x%73) = mk_list$D%1$D%1$P%0(x%48,x%47)
//│   in x%73,x%72,n%0,x%70,x%71
//│ )
//│ Def(39, mk_list$D%1$D%1$D%1$D%0, [x%70,x%71,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%74) = mk_list$D%1$D%1$D%0(x%70,x%71)
//│   in let x%4 = Cons(n%0,x%74)
//│     in x%4
//│ )
//│ Def(46, main$M%0$D%7, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$P%0, [x%72,x%70,x%71,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$P%0(x%72,x%70,x%71)
//│   in x%84,x%87,n%0,x%86,x%85,x%88
//│ )
//│ Def(48, mk_list$D%1$D%1$D%1$D%1$D%0, [x%87,x%88,x%86,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%89) = mk_list$D%1$D%1$D%1$D%0(x%87,x%88,x%86)
//│   in let x%4 = Cons(n%0,x%89)
//│     in x%4
//│ )
//│ Def(55, main$M%0$D%9, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(56, mk_list$D%1$D%1$D%1$D%1$D%1$P%0, [x%87,n%0,x%86,x%85,x%88], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None], 7, 
//│ let* (x%107,x%108,x%109,x%110,x%111,x%112) = mk_list$D%1$D%1$D%1$D%1$P%0(x%85,x%87,x%88,x%86)
//│   in x%108,n%0,x%109,x%107,x%110,x%112,x%111
//│ )
//│ Def(57, mk_list$D%1$D%1$D%1$D%1$D%1$D%0, [x%108,n%0,x%109,x%112,x%110], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%113) = mk_list$D%1$D%1$D%1$D%1$D%0(x%108,x%112,x%110,x%109)
//│   in let x%4 = Cons(n%0,x%113)
//│     in x%4
//│ )
//│ Def(64, main$M%0$D%11, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(65, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%108,n%0,x%109,x%110,x%112,x%111], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None], 8, 
//│ let* (x%133,x%134,x%135,x%136,x%137,x%138,x%139) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%108,x%109,x%110,x%111,x%112)
//│   in x%133,x%136,x%134,n%0,x%137,x%139,x%135,x%138
//│ )
//│ Def(66, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%133,x%134,n%0,x%137,x%135,x%138], [{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%140) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%133,x%134,x%135,x%138,x%137)
//│   in let x%4 = Cons(n%0,x%140)
//│     in x%4
//│ )
//│ Def(73, main$M%0$D%13, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(74, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%133,x%134,n%0,x%137,x%139,x%135,x%138], [{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None], 9, 
//│ let* (x%172,x%173,x%174,x%175,x%176,x%177,x%178,x%179) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%133,x%134,x%135,x%137,x%138,x%139)
//│   in x%177,x%173,x%179,x%174,x%172,x%176,x%175,x%178,n%0
//│ )
//│ Def(75, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%179,x%174,x%172,x%176,x%175,x%178,n%0], [{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%180) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%172,x%174,x%175,x%176,x%178,x%179)
//│   in let x%4 = Cons(n%0,x%180)
//│     in x%4
//│ )
//│ Def(82, main$M%0$D%15, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(83, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%177,x%179,x%174,x%172,x%176,x%175,x%178,n%0], [{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None,None], 10, 
//│ let* (x%194,x%195,x%196,x%197,x%198,x%199,x%200,x%201,x%202) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%172,x%174,x%175,x%176,x%177,x%178,x%179)
//│   in x%199,x%201,x%202,n%0,x%195,x%196,x%194,x%197,x%200,x%198
//│ )
//│ Def(84, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%199,x%201,x%202,n%0,x%196,x%197,x%200,x%198], [{EDirect},{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%203) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%196,x%197,x%198,x%199,x%200,x%201,x%202)
//│   in let x%4 = Cons(n%0,x%203)
//│     in x%4
//│ )
//│ Def(85, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1, [x%199,x%201,x%202,n%0,x%196,x%194,x%197,x%200,x%198], [{EDirect},{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%229,x%230,x%231,x%232,x%233,x%234,x%235,x%236,x%237,x%238) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%194,x%196,x%197,x%198,x%199,x%200,x%201,x%202)
//│   in if x%233
//│     true => let* (x%239) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%229,x%230,x%231,x%232,x%234,x%236,x%237,x%238)
//│       in let x%4 = Cons(n%0,x%239)
//│         in x%4
//│     false => let* (x%240) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%229,x%230,x%231,x%232,x%234,x%235,x%236,x%237,x%238)
//│       in let x%4 = Cons(n%0,x%240)
//│         in x%4
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(5, main, [], [],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ let* (x%24,x%25) = mk_list$P%0(10)
//│   in if x%25
//│     true => let x%6 = None()
//│       in x%6
//│     false => let* (x%42,x%43,x%44) = mk_list$D%1$P%0(x%24)
//│       in if x%44
//│         true => let* (x%45) = mk_list$D%1$D%0(x%42)
//│           in jump main$M%0$D%3(x%45)
//│         false => let* (x%58,x%59,x%60,x%61) = mk_list$D%1$D%1$P%0(x%43,x%42)
//│           in if x%61
//│             true => let* (x%62) = mk_list$D%1$D%1$D%0(x%58,x%59)
//│               in jump main$M%0$D%5(x%62)
//│             false => let* (x%77,x%78,x%79,x%80,x%81) = mk_list$D%1$D%1$D%1$P%0(x%60,x%58,x%59)
//│               in if x%77
//│                 true => let* (x%82) = mk_list$D%1$D%1$D%1$D%0(x%80,x%81,x%79)
//│                   in jump main$M%0$D%7(x%82)
//│                 false => let* (x%99,x%100,x%101,x%102,x%103,x%104) = mk_list$D%1$D%1$D%1$D%1$P%0(x%78,x%80,x%81,x%79)
//│                   in if x%99
//│                     true => let* (x%105) = mk_list$D%1$D%1$D%1$D%1$D%0(x%100,x%104,x%102,x%101)
//│                       in jump main$M%0$D%9(x%105)
//│                     false => let* (x%124,x%125,x%126,x%127,x%128,x%129,x%130) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%100,x%101,x%102,x%103,x%104)
//│                       in if x%127
//│                         true => let* (x%131) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%124,x%125,x%126,x%129,x%128)
//│                           in jump main$M%0$D%11(x%131)
//│                         false => let* (x%152,x%153,x%154,x%155,x%156,x%157,x%158,x%159) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%124,x%125,x%126,x%128,x%129,x%130)
//│                           in if x%153
//│                             true => let* (x%160) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%152,x%154,x%155,x%156,x%158,x%159)
//│                               in jump main$M%0$D%13(x%160)
//│                             false => let* (x%183,x%184,x%185,x%186,x%187,x%188,x%189,x%190,x%191) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%152,x%154,x%155,x%156,x%157,x%158,x%159)
//│                               in if x%184
//│                                 true => let* (x%192) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%185,x%186,x%187,x%188,x%189,x%190,x%191)
//│                                   in jump main$M%0$D%15(x%192)
//│                                 false => let* (x%217,x%218,x%219,x%220,x%221,x%222,x%223,x%224,x%225,x%226) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%183,x%185,x%186,x%187,x%188,x%189,x%190,x%191)
//│                                   in if x%221
//│                                     true => let* (x%227) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%217,x%218,x%219,x%220,x%222,x%224,x%225,x%226)
//│                                       in jump main$M%0$D%17(x%227)
//│                                     false => let* (x%254,x%255,x%256,x%257,x%258,x%259,x%260,x%261,x%262,x%263,x%264) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%217,x%218,x%219,x%220,x%222,x%223,x%224,x%225,x%226)
//│                                       in if x%255
//│                                         true => let* (x%265) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%254,x%256,x%257,x%259,x%260,x%261,x%262,x%263,x%264)
//│                                           in jump main$M%0(x%265)
//│                                         false => let* (x%266) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%254,x%256,x%257,x%258,x%259,x%260,x%261,x%262,x%263,x%264)
//│                                           in jump main$M%0(x%266)
//│ )
//│ Def(9, mk_list$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None], 2, 
//│ let x%0 = ==(n%0,0)
//│   in n%0,x%0
//│ )
//│ Def(13, @join main$M%0, [x%15], [{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))],[Some(IMix(ICtor(Cons)))]],
//│ [Some(IMix(ICtor(None),ICtor(Some)))], 1, 
//│ case x%15 of
//│   Nil => let x%6 = None()
//│     in x%6
//│   Cons => let x%35 = x%15.h
//│     in let x%36 = x%15.t
//│       in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│         in x%34
//│ )
//│ Def(16, last_opt$D%1$S%0, [l%0_h,l%0_t], [{EDirect},{EDestruct,EDirect,ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ case l%0_t of
//│   Nil => let x%9 = Some(l%0_h)
//│     in x%9
//│   Cons => let x%37 = l%0_t.h
//│     in let x%38 = l%0_t.t
//│       in let* (x%12) = last_opt$D%1$S%0(x%37,x%38)
//│         in x%12
//│ )
//│ Def(20, mk_list$D%1$P%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None], 3, 
//│ let x%2 = -(n%0,1)
//│   in let* (x%28,x%29) = mk_list$P%0(x%2)
//│     in n%0,x%28,x%29
//│ )
//│ Def(21, mk_list$D%1$D%0, [n%0], [{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let x%1 = Nil()
//│   in let x%4 = Cons(n%0,x%1)
//│     in x%4
//│ )
//│ Def(28, main$M%0$D%3, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(29, mk_list$D%1$D%1$P%0, [x%28,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None], 4, 
//│ let* (x%47,x%48,x%49) = mk_list$D%1$P%0(x%28)
//│   in x%47,n%0,x%48,x%49
//│ )
//│ Def(30, mk_list$D%1$D%1$D%0, [x%47,n%0], [{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%50) = mk_list$D%1$D%0(x%47)
//│   in let x%4 = Cons(n%0,x%50)
//│     in x%4
//│ )
//│ Def(37, main$M%0$D%5, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(38, mk_list$D%1$D%1$D%1$P%0, [x%48,x%47,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None], 5, 
//│ let* (x%70,x%71,x%72,x%73) = mk_list$D%1$D%1$P%0(x%48,x%47)
//│   in x%73,x%72,n%0,x%70,x%71
//│ )
//│ Def(39, mk_list$D%1$D%1$D%1$D%0, [x%70,x%71,n%0], [{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%74) = mk_list$D%1$D%1$D%0(x%70,x%71)
//│   in let x%4 = Cons(n%0,x%74)
//│     in x%4
//│ )
//│ Def(46, main$M%0$D%7, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(47, mk_list$D%1$D%1$D%1$D%1$P%0, [x%72,x%70,x%71,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None], 6, 
//│ let* (x%84,x%85,x%86,x%87,x%88) = mk_list$D%1$D%1$D%1$P%0(x%72,x%70,x%71)
//│   in x%84,x%87,n%0,x%86,x%85,x%88
//│ )
//│ Def(48, mk_list$D%1$D%1$D%1$D%1$D%0, [x%87,x%88,x%86,n%0], [{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%89) = mk_list$D%1$D%1$D%1$D%0(x%87,x%88,x%86)
//│   in let x%4 = Cons(n%0,x%89)
//│     in x%4
//│ )
//│ Def(55, main$M%0$D%9, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(56, mk_list$D%1$D%1$D%1$D%1$D%1$P%0, [x%87,n%0,x%86,x%85,x%88], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None], 7, 
//│ let* (x%107,x%108,x%109,x%110,x%111,x%112) = mk_list$D%1$D%1$D%1$D%1$P%0(x%85,x%87,x%88,x%86)
//│   in x%108,n%0,x%109,x%107,x%110,x%112,x%111
//│ )
//│ Def(57, mk_list$D%1$D%1$D%1$D%1$D%1$D%0, [x%108,n%0,x%109,x%112,x%110], [{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%113) = mk_list$D%1$D%1$D%1$D%1$D%0(x%108,x%112,x%110,x%109)
//│   in let x%4 = Cons(n%0,x%113)
//│     in x%4
//│ )
//│ Def(64, main$M%0$D%11, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(65, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%108,n%0,x%109,x%110,x%112,x%111], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None], 8, 
//│ let* (x%133,x%134,x%135,x%136,x%137,x%138,x%139) = mk_list$D%1$D%1$D%1$D%1$D%1$P%0(x%108,x%109,x%110,x%111,x%112)
//│   in x%133,x%136,x%134,n%0,x%137,x%139,x%135,x%138
//│ )
//│ Def(66, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%133,x%134,n%0,x%137,x%135,x%138], [{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%140) = mk_list$D%1$D%1$D%1$D%1$D%1$D%0(x%133,x%134,x%135,x%138,x%137)
//│   in let x%4 = Cons(n%0,x%140)
//│     in x%4
//│ )
//│ Def(73, main$M%0$D%13, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(74, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%133,x%134,n%0,x%137,x%139,x%135,x%138], [{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None], 9, 
//│ let* (x%172,x%173,x%174,x%175,x%176,x%177,x%178,x%179) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%133,x%134,x%135,x%137,x%138,x%139)
//│   in x%177,x%173,x%179,x%174,x%172,x%176,x%175,x%178,n%0
//│ )
//│ Def(75, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%179,x%174,x%172,x%176,x%175,x%178,n%0], [{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%180) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%172,x%174,x%175,x%176,x%178,x%179)
//│   in let x%4 = Cons(n%0,x%180)
//│     in x%4
//│ )
//│ Def(82, main$M%0$D%15, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ Def(83, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%177,x%179,x%174,x%172,x%176,x%175,x%178,n%0], [{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None,None], 10, 
//│ let* (x%194,x%195,x%196,x%197,x%198,x%199,x%200,x%201,x%202) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%172,x%174,x%175,x%176,x%177,x%178,x%179)
//│   in x%199,x%201,x%202,n%0,x%195,x%196,x%194,x%197,x%200,x%198
//│ )
//│ Def(84, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%199,x%201,x%202,n%0,x%196,x%197,x%200,x%198], [{EDirect},{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%203) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%196,x%197,x%198,x%199,x%200,x%201,x%202)
//│   in let x%4 = Cons(n%0,x%203)
//│     in x%4
//│ )
//│ Def(89, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0, [x%199,x%201,x%202,n%0,x%196,x%194,x%197,x%200,x%198], [{EDirect},{EDirect},{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [None,None,None,None,None,None,None,None,None,None,None], 11, 
//│ let* (x%229,x%230,x%231,x%232,x%233,x%234,x%235,x%236,x%237,x%238) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%194,x%196,x%197,x%198,x%199,x%200,x%201,x%202)
//│   in x%236,x%233,n%0,x%234,x%235,x%237,x%232,x%229,x%230,x%231,x%238
//│ )
//│ Def(90, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0, [x%236,n%0,x%234,x%237,x%232,x%229,x%230,x%231,x%238], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(Cons))], 1, 
//│ let* (x%239) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%229,x%230,x%231,x%232,x%234,x%236,x%237,x%238)
//│   in let x%4 = Cons(n%0,x%239)
//│     in x%4
//│ )
//│ Def(91, mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1, [x%236,n%0,x%234,x%235,x%237,x%232,x%229,x%230,x%231,x%238], [{EDirect},{},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect},{EDirect}],
//│ S: None,
//│ I: [],
//│ [Some(IMix(ICtor(Cons)))], 1, 
//│ let* (x%280,x%281,x%282,x%283,x%284,x%285,x%286,x%287,x%288,x%289,x%290) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$P%0(x%229,x%230,x%231,x%232,x%234,x%235,x%236,x%237,x%238)
//│   in if x%281
//│     true => let* (x%291) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%0(x%280,x%282,x%283,x%285,x%286,x%287,x%288,x%289,x%290)
//│       in let x%4 = Cons(n%0,x%291)
//│         in x%4
//│     false => let* (x%292) = mk_list$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1$D%1(x%280,x%282,x%283,x%284,x%285,x%286,x%287,x%288,x%289,x%290)
//│       in let x%4 = Cons(n%0,x%292)
//│         in x%4
//│ )
//│ Def(94, main$M%0$D%17, [x%15], [{ESelect(h),ESelect(t)}],
//│ S: None,
//│ I: [[Some(ICtor(Cons))]],
//│ [Some(IMix(ICtor(Some)))], 1, 
//│ let x%35 = x%15.h
//│   in let x%36 = x%15.t
//│     in let* (x%34) = last_opt$D%1$S%0(x%35,x%36)
//│       in x%34
//│ )
//│ },
//│ let* (x%17) = main()
//│   in x%17)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ Some(1)
//│ 
//│ 
//│ Fuel used: 10
//│ GraphOpt failed: Fuel exhausted
//│ mlscript.compiler.optimizer.GraphOptimizingError$.apply(GraphOptimizer.scala:14)
//│ mlscript.compiler.DiffTestCompiler.postProcess(Test.scala:65)
//│ mlscript.DiffTests.rec$1(DiffTests.scala:438)
//│ mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:1067)
//│ org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
//│ org.scalatest.Transformer.apply(Transformer.scala:22)
//│ org.scalatest.Transformer.apply(Transformer.scala:20)
//│ org.scalatest.funsuite.AnyFunSuiteLike$$anon$1.apply(AnyFunSuiteLike.scala:226)
//│ org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
//│ org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
//│ mlscript.DiffTests.org$scalatest$concurrent$TimeLimitedTests$$super$withFixture(DiffTests.scala:47)
//│ org.scalatest.concurrent.TimeLimitedTests.$anonfun$withFixture$3(TimeLimitedTests.scala:154)
//│ org.scalatest.enablers.Timed$$anon$1.timeoutAfter(Timed.scala:127)
//│ org.scalatest.concurrent.TimeLimits$.failAfterImpl(TimeLimits.scala:282)
//│ org.scalatest.concurrent.TimeLimitedTests.withFixture(TimeLimitedTests.scala:153)
//│ org.scalatest.concurrent.TimeLimitedTests.withFixture$(TimeLimitedTests.scala:150)
//│ mlscript.DiffTests.withFixture(DiffTests.scala:47)
//│ org.scalatest.funsuite.AnyFunSuiteLike.invokeWithFixture$1(AnyFunSuiteLike.scala:224)
//│ org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$runTest$1(AnyFunSuiteLike.scala:236)
//│ org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
//│ org.scalatest.funsuite.AnyFunSuiteLike.runTest(AnyFunSuiteLike.scala:236)
//│ org.scalatest.funsuite.AnyFunSuiteLike.runTest$(AnyFunSuiteLike.scala:218)
//│ mlscript.DiffTests.org$scalatest$OneInstancePerTest$$super$runTest(DiffTests.scala:47)
//│ org.scalatest.OneInstancePerTest.runTest(OneInstancePerTest.scala:131)
//│ org.scalatest.OneInstancePerTest.runTest$(OneInstancePerTest.scala:123)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$runTest(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.runTest(ParallelTestExecution.scala:164)
//│ org.scalatest.ParallelTestExecution.runTest$(ParallelTestExecution.scala:148)
//│ mlscript.DiffTests.runTest(DiffTests.scala:47)
//│ org.scalatest.OneInstancePerTest.runTests(OneInstancePerTest.scala:181)
//│ org.scalatest.OneInstancePerTest.runTests$(OneInstancePerTest.scala:172)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$runTests(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.runTests(ParallelTestExecution.scala:97)
//│ org.scalatest.ParallelTestExecution.runTests$(ParallelTestExecution.scala:79)
//│ mlscript.DiffTests.runTests(DiffTests.scala:47)
//│ org.scalatest.Suite.run(Suite.scala:1114)
//│ org.scalatest.Suite.run$(Suite.scala:1096)
//│ org.scalatest.funsuite.AnyFunSuite.org$scalatest$funsuite$AnyFunSuiteLike$$super$run(AnyFunSuite.scala:1563)
//│ org.scalatest.funsuite.AnyFunSuiteLike.$anonfun$run$1(AnyFunSuiteLike.scala:273)
//│ org.scalatest.SuperEngine.runImpl(Engine.scala:535)
//│ org.scalatest.funsuite.AnyFunSuiteLike.run(AnyFunSuiteLike.scala:273)
//│ org.scalatest.funsuite.AnyFunSuiteLike.run$(AnyFunSuiteLike.scala:272)
//│ mlscript.DiffTests.org$scalatest$ParallelTestExecution$$super$run(DiffTests.scala:47)
//│ org.scalatest.ParallelTestExecution.run(ParallelTestExecution.scala:261)
//│ org.scalatest.ParallelTestExecution.run$(ParallelTestExecution.scala:258)
//│ mlscript.DiffTests.run(DiffTests.scala:47)
//│ org.scalatest.tools.DistributedTestRunnerSuite.run(DistributedTestRunnerSuite.scala:22)
//│ org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:47)
//│ java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
//│ java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
//│ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
//│ java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
//│ java.base/java.lang.Thread.run(Thread.java:840)
