:NewParser
:ParseOnly

:GraphInterp
:GraphOpt
class A(x, y, z)
class B(m, n)
fun complex_foo(t) =
  let r = if t is
    A(x, y, z) then x + y * z
    B(m, n) then m - n
  let s = B(1, 2)
  let u = if s is
    A(x, y, z) then 3
    B(m, n) then 4
  r + u
fun bar() =
  complex_foo(A(6, 7, 8))
  complex_foo(B(9, 10))
bar()
//│ |#class| |A|(|x|,| |y|,| |z|)|↵|#class| |B|(|m|,| |n|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |r| |#=| |#if| |t| |is|→|A|(|x|,| |y|,| |z|)| |#then| |x| |+| |y| |*| |z|↵|B|(|m|,| |n|)| |#then| |m| |-| |n|←|↵|#let| |s| |#=| |B|(|1|,| |2|)|↵|#let| |u| |#=| |#if| |s| |is|→|A|(|x|,| |y|,| |z|)| |#then| |3|↵|B|(|m|,| |n|)| |#then| |4|←|↵|r| |+| |u|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|6|,| |7|,| |8|)|)|↵|complex_foo|(|B|(|9|,| |10|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(x, y, z,) {}; class B(m, n,) {}; fun complex_foo = (t,) => {let r = if t is ‹(A(x, y, z,)) then +(x,)(*(y,)(z,),); (B(m, n,)) then -(m,)(n,)›; let s = B(1, 2,); let u = if s is ‹(A(x, y, z,)) then 3; (B(m, n,)) then 4›; +(r,)(u,)}; fun bar = () => {complex_foo(A(6, 7, 8,),); complex_foo(B(9, 10,),)}; bar()}
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(0, complex_foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case t%0 of -- #63
//│   A => let x%0 = t%0.z -- #17
//│     in let x%1 = t%0.y -- #16
//│       in let x%2 = t%0.x -- #15
//│         in let x%3 = *(x%1,x%0) -- #14
//│           in let x%4 = +(x%2,x%3) -- #13
//│             in jump j%0(x%4) -- #12
//│   B => let x%5 = t%0.n -- #28
//│     in let x%6 = t%0.m -- #27
//│       in let x%7 = -(x%6,x%5) -- #26
//│         in jump j%0(x%7) -- #25
//│ )
//│ Def(1, @join j%0, [x%8], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%9 = B(1,2) -- #62
//│   in case x%9 of -- #61
//│     A => let x%10 = x%9.z -- #47
//│       in let x%11 = x%9.y -- #46
//│         in let x%12 = x%9.x -- #45
//│           in jump j%1(3) -- #44
//│     B => let x%13 = x%9.n -- #55
//│       in let x%14 = x%9.m -- #54
//│         in jump j%1(4) -- #53
//│ )
//│ Def(2, @join j%1, [x%15], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%16 = +(x%8,x%15) -- #60
//│   in x%16
//│ )
//│ Def(3, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%17 = A(6,7,8) -- #89
//│   in let* (x%18) = complex_foo(x%17) -- #88
//│     in let x%19 = B(9,10) -- #87
//│       in let* (x%20) = complex_foo(x%19) -- #86
//│         in x%20
//│ )
//│ },
//│ let* (x%21) = bar() -- #93
//│   in x%21)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(0, complex_foo, [t%0], [{<EDestruct@complex_foo:#63-case t%0 of ...>,<EDirect@complex_foo:#63-case t%0 of ...>,<ESelect(m)@complex_foo:#27-let x%6 = ...>,<ESelect(n)@complex_foo:#28-let x%5 = ...>,<ESelect(x)@complex_foo:#15-let x%2 = ...>,<ESelect(y)@complex_foo:#16-let x%1 = ...>,<ESelect(z)@complex_foo:#17-let x%0 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))],[Some(ICtor(B))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case t%0 of -- #63
//│   A => let x%0 = t%0.z -- #17
//│     in let x%1 = t%0.y -- #16
//│       in let x%2 = t%0.x -- #15
//│         in let x%3 = *(x%1,x%0) -- #14
//│           in let x%4 = +(x%2,x%3) -- #13
//│             in jump j%0(x%4) -- #12
//│   B => let x%5 = t%0.n -- #28
//│     in let x%6 = t%0.m -- #27
//│       in let x%7 = -(x%6,x%5) -- #26
//│         in jump j%0(x%7) -- #25
//│ )
//│ Def(1, @join j%0, [x%8], [{<EDirect@j%0:#94-let x%16 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%22 = 4 -- #95
//│   in let x%16 = +(x%8,x%22) -- #94
//│     in x%16
//│ )
//│ Def(3, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%17 = A(6,7,8) -- #89
//│   in let* (x%18) = complex_foo(x%17) -- #88
//│     in let x%19 = B(9,10) -- #87
//│       in let* (x%20) = complex_foo(x%19) -- #86
//│         in x%20
//│ )
//│ },
//│ let* (x%21) = bar() -- #93
//│   in x%21)
//│ 
//│ Interpreted ------------------------------
//│ 3
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(0, complex_foo, [t%0], [{<EDestruct@complex_foo:#63-case t%0 of ...>,<EDirect@complex_foo:#63-case t%0 of ...>,<ESelect(m)@complex_foo:#27-let x%6 = ...>,<ESelect(n)@complex_foo:#28-let x%5 = ...>,<ESelect(x)@complex_foo:#15-let x%2 = ...>,<ESelect(y)@complex_foo:#16-let x%1 = ...>,<ESelect(z)@complex_foo:#17-let x%0 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(B))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case t%0 of -- #63
//│   A => let x%0 = t%0.z -- #17
//│     in let x%1 = t%0.y -- #16
//│       in let x%2 = t%0.x -- #15
//│         in let x%3 = *(x%1,x%0) -- #14
//│           in let x%4 = +(x%2,x%3) -- #13
//│             in jump j%0(x%4) -- #12
//│   B => let x%5 = t%0.n -- #28
//│     in let x%6 = t%0.m -- #27
//│       in let x%7 = -(x%6,x%5) -- #26
//│         in jump j%0(x%7) -- #25
//│ )
//│ Def(1, @join j%0, [x%8], [{<EDirect@j%0:#94-let x%16 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%22 = 4 -- #95
//│   in let x%16 = +(x%8,x%22) -- #94
//│     in x%16
//│ )
//│ Def(3, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%17 = A(6,7,8) -- #89
//│   in let x%23 = x%17 -- #102
//│     in case x%23 of -- #100
//│       A => let x%26 = x%23.z -- #105
//│         in let x%27 = x%23.y -- #104
//│           in let x%28 = x%23.x -- #103
//│             in let* (x%24) = complex_foo$D%0$S%0(x%26,x%27,x%28) -- #97
//│               in jump bar$M%0() -- #96
//│       B => let x%29 = x%23.m -- #107
//│         in let x%30 = x%23.n -- #106
//│           in let* (x%25) = complex_foo$D%1$S%0(x%29,x%30) -- #99
//│             in jump bar$M%0() -- #98
//│ )
//│ Def(7, @join bar$M%0, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%19 = B(9,10) -- #87
//│   in let* (x%20) = complex_foo(x%19) -- #86
//│     in x%20
//│ )
//│ Def(8, complex_foo$D%0$S%0, [t%0_z,t%0_y,t%0_x], [{<EDirect@complex_foo$D%0$S%0:#17-let x%0 = ...>},{<EDirect@complex_foo$D%0$S%0:#16-let x%1 = ...>},{<EDirect@complex_foo$D%0$S%0:#15-let x%2 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = t%0_z -- #17
//│   in let x%1 = t%0_y -- #16
//│     in let x%2 = t%0_x -- #15
//│       in let x%3 = *(x%1,x%0) -- #14
//│         in let x%4 = +(x%2,x%3) -- #13
//│           in jump j%0(x%4) -- #12
//│ )
//│ Def(9, complex_foo$D%1$S%0, [t%0_m,t%0_n], [{<EDirect@complex_foo$D%1$S%0:#27-let x%6 = ...>},{<EDirect@complex_foo$D%1$S%0:#28-let x%5 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%5 = t%0_n -- #28
//│   in let x%6 = t%0_m -- #27
//│     in let x%7 = -(x%6,x%5) -- #26
//│       in jump j%0(x%7) -- #25
//│ )
//│ },
//│ let* (x%21) = bar() -- #93
//│   in x%21)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(1, @join j%0, [x%8], [{<EDirect@j%0:#94-let x%16 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%22 = 4 -- #95
//│   in let x%16 = +(x%8,x%22) -- #94
//│     in x%16
//│ )
//│ Def(3, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%17 = A(6,7,8) -- #89
//│   in let x%23 = x%17 -- #102
//│     in case x%23 of -- #100
//│       A => let x%26 = x%23.z -- #105
//│         in let x%27 = x%23.y -- #104
//│           in let x%28 = x%23.x -- #103
//│             in let* (x%24) = complex_foo$D%0$S%0(x%26,x%27,x%28) -- #97
//│               in jump bar$M%0() -- #96
//│       B => let x%29 = x%23.m -- #107
//│         in let x%30 = x%23.n -- #106
//│           in let* (x%25) = complex_foo$D%1$S%0(x%29,x%30) -- #99
//│             in jump bar$M%0() -- #98
//│ )
//│ Def(7, @join bar$M%0, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%19 = B(9,10) -- #87
//│   in let x%31 = x%19 -- #116
//│     in case x%31 of -- #112
//│       A => let x%34 = x%31.z -- #119
//│         in let x%35 = x%31.y -- #118
//│           in let x%36 = x%31.x -- #117
//│             in let* (x%32) = complex_foo$D%2$S%0(x%34,x%35,x%36) -- #109
//│               in x%32
//│       B => let x%37 = x%31.m -- #121
//│         in let x%38 = x%31.n -- #120
//│           in let* (x%33) = complex_foo$D%3$S%0(x%37,x%38) -- #111
//│             in x%33
//│ )
//│ Def(8, complex_foo$D%0$S%0, [t%0_z,t%0_y,t%0_x], [{<EDirect@complex_foo$D%0$S%0:#17-let x%0 = ...>},{<EDirect@complex_foo$D%0$S%0:#16-let x%1 = ...>},{<EDirect@complex_foo$D%0$S%0:#15-let x%2 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = t%0_z -- #17
//│   in let x%1 = t%0_y -- #16
//│     in let x%2 = t%0_x -- #15
//│       in let x%3 = *(x%1,x%0) -- #14
//│         in let x%4 = +(x%2,x%3) -- #13
//│           in jump j%0(x%4) -- #12
//│ )
//│ Def(9, complex_foo$D%1$S%0, [t%0_m,t%0_n], [{<EDirect@complex_foo$D%1$S%0:#27-let x%6 = ...>},{<EDirect@complex_foo$D%1$S%0:#28-let x%5 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%5 = t%0_n -- #28
//│   in let x%6 = t%0_m -- #27
//│     in let x%7 = -(x%6,x%5) -- #26
//│       in jump j%0(x%7) -- #25
//│ )
//│ Def(14, complex_foo$D%3$S%0, [t%0_m,t%0_n], [{<EDirect@complex_foo$D%3$S%0:#27-let x%6 = ...>},{<EDirect@complex_foo$D%3$S%0:#28-let x%5 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%5 = t%0_n -- #28
//│   in let x%6 = t%0_m -- #27
//│     in let x%7 = -(x%6,x%5) -- #26
//│       in jump j%0(x%7) -- #25
//│ )
//│ Def(15, complex_foo$D%2$S%0, [t%0_z,t%0_y,t%0_x], [{<EDirect@complex_foo$D%2$S%0:#17-let x%0 = ...>},{<EDirect@complex_foo$D%2$S%0:#16-let x%1 = ...>},{<EDirect@complex_foo$D%2$S%0:#15-let x%2 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = t%0_z -- #17
//│   in let x%1 = t%0_y -- #16
//│     in let x%2 = t%0_x -- #15
//│       in let x%3 = *(x%1,x%0) -- #14
//│         in let x%4 = +(x%2,x%3) -- #13
//│           in jump j%0(x%4) -- #12
//│ )
//│ },
//│ let* (x%21) = bar() -- #93
//│   in x%21)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 3
//│ 
//│ 
//│ Fuel used: 3

:GraphInterp
:GraphOptVerbose
class A(w, x)
class B(y)
class C(z)
fun complex_foo(t) =
  let a = 1 + 2
  let b = 1 * 2
  let x = if t is
    A(x, y) then y
    B(x) then B(x + b)
    C(x) then C(0)
  let z = A(5, x)
  let v = B(6)
  let y = if x is
    A(x, y) then
      let m = x + a + b
      if y is
        A(x, y) then x
        B(x) then m
        C(x) then 0
    B(x) then 2
    C(x) then 3
  if z is
    A(x, y) then x
    B(x) then 4
    C(x) then
      if v is
        A(x, y) then x
        B(x) then 7
        C(x) then 8
fun bar() =
  complex_foo(A(10, A(9, B(10))))
bar()
//│ |#class| |A|(|w|,| |x|)|↵|#class| |B|(|y|)|↵|#class| |C|(|z|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |a| |#=| |1| |+| |2|↵|#let| |b| |#=| |1| |*| |2|↵|#let| |x| |#=| |#if| |t| |is|→|A|(|x|,| |y|)| |#then| |y|↵|B|(|x|)| |#then| |B|(|x| |+| |b|)|↵|C|(|x|)| |#then| |C|(|0|)|←|↵|#let| |z| |#=| |A|(|5|,| |x|)|↵|#let| |v| |#=| |B|(|6|)|↵|#let| |y| |#=| |#if| |x| |is|→|A|(|x|,| |y|)| |#then|→|#let| |m| |#=| |x| |+| |a| |+| |b|↵|#if| |y| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |m|↵|C|(|x|)| |#then| |0|←|←|↵|B|(|x|)| |#then| |2|↵|C|(|x|)| |#then| |3|←|↵|#if| |z| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |4|↵|C|(|x|)| |#then|→|#if| |v| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |7|↵|C|(|x|)| |#then| |8|←|←|←|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|10|,| |A|(|9|,| |B|(|10|)|)|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(w, x,) {}; class B(y,) {}; class C(z,) {}; fun complex_foo = (t,) => {let a = +(1,)(2,); let b = *(1,)(2,); let x = if t is ‹(A(x, y,)) then y; (B(x,)) then B(+(x,)(b,),); (C(x,)) then C(0,)›; let z = A(5, x,); let v = B(6,); let y = if x is ‹(A(x, y,)) then {let m = +(+(x,)(a,),)(b,); if y is ‹(A(x, y,)) then x; (B(x,)) then m; (C(x,)) then 0›}; (B(x,)) then 2; (C(x,)) then 3›; if z is ‹(A(x, y,)) then x; (B(x,)) then 4; (C(x,)) then {if v is ‹(A(x, y,)) then x; (B(x,)) then 7; (C(x,)) then 8›}›}; fun bar = () => {complex_foo(A(10, A(9, B(10,),),),)}; bar()}
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = +(1,2) -- #140
//│   in let x%1 = *(1,2) -- #139
//│     in case t%0 of -- #138
//│       A => let x%2 = t%0.x -- #14
//│         in let x%3 = t%0.w -- #13
//│           in jump j%0(x%2) -- #12
//│       B => let x%4 = t%0.y -- #26
//│         in let x%5 = +(x%4,x%1) -- #25
//│           in let x%6 = B(x%5) -- #24
//│             in jump j%0(x%6) -- #23
//│       C => let x%7 = t%0.z -- #35
//│         in let x%8 = C(0) -- #34
//│           in jump j%0(x%8) -- #33
//│ )
//│ Def(1, @join j%0, [x%9], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%10 = A(5,x%9) -- #137
//│   in let x%11 = B(6) -- #136
//│     in case x%9 of -- #135
//│       A => let x%12 = x%9.x -- #82
//│         in let x%13 = x%9.w -- #81
//│           in let x%14 = +(x%13,x%0) -- #80
//│             in let x%15 = +(x%14,x%1) -- #79
//│               in case x%12 of -- #78
//│                 A => let x%16 = x%12.x -- #65
//│                   in let x%17 = x%12.w -- #64
//│                     in jump j%2(x%17) -- #63
//│                 B => let x%18 = x%12.y -- #70
//│                   in jump j%2(x%15) -- #69
//│                 C => let x%19 = x%12.z -- #75
//│                   in jump j%2(0) -- #74
//│       B => let x%21 = x%9.y -- #87
//│         in jump j%1(2) -- #86
//│       C => let x%22 = x%9.z -- #92
//│         in jump j%1(3) -- #91
//│ )
//│ Def(2, @join j%2, [x%20], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ jump j%1(x%20) -- #77
//│ )
//│ Def(3, @join j%1, [x%23], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%10 of -- #134
//│   A => let x%24 = x%10.x -- #102
//│     in let x%25 = x%10.w -- #101
//│       in jump j%3(x%25) -- #100
//│   B => let x%26 = x%10.y -- #107
//│     in jump j%3(4) -- #106
//│   C => let x%27 = x%10.z -- #132
//│     in case x%11 of -- #131
//│       A => let x%28 = x%11.x -- #118
//│         in let x%29 = x%11.w -- #117
//│           in jump j%4(x%29) -- #116
//│       B => let x%30 = x%11.y -- #123
//│         in jump j%4(7) -- #122
//│       C => let x%31 = x%11.z -- #128
//│         in jump j%4(8) -- #127
//│ )
//│ Def(4, @join j%4, [x%32], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ jump j%3(x%32) -- #130
//│ )
//│ Def(5, @join j%3, [x%33], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x%33
//│ )
//│ Def(6, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%34 = B(10) -- #162
//│   in let x%35 = A(9,x%34) -- #161
//│     in let x%36 = A(10,x%35) -- #160
//│       in let* (x%37) = complex_foo(x%36) -- #159
//│         in x%37
//│ )
//│ },
//│ let* (x%38) = bar() -- #166
//│   in x%38)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t%0], [{<EDestruct@complex_foo:#138-case t%0 of ...>,<EDirect@complex_foo:#138-case t%0 of ...>,<ESelect(x)@complex_foo:#14-let x%2 = ...>,<ESelect(y)@complex_foo:#26-let x%4 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = +(1,2) -- #140
//│   in let x%1 = *(1,2) -- #139
//│     in case t%0 of -- #138
//│       A => let x%2 = t%0.x -- #14
//│         in jump j%0(x%2) -- #12
//│       B => let x%4 = t%0.y -- #26
//│         in let x%5 = +(x%4,x%1) -- #25
//│           in let x%6 = B(x%5) -- #24
//│             in jump j%0(x%6) -- #23
//│       C => let x%8 = C(0) -- #34
//│         in jump j%0(x%8) -- #33
//│ )
//│ Def(1, @join j%0, [x%9], [{<EDestruct@j%0:#135-case x%9 of ...>,<EDirect@j%0:#135-case x%9 of ...>,<EDirect@j%0:#137-let x%10 = ...>,<ESelect(w)@j%0:#81-let x%13 = ...>,<ESelect(x)@j%0:#82-let x%12 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(B))],[Some(ICtor(C))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%10 = A(5,x%9) -- #137
//│   in let x%11 = B(6) -- #136
//│     in case x%9 of -- #135
//│       A => let x%12 = x%9.x -- #82
//│         in let x%13 = x%9.w -- #81
//│           in let x%14 = +(x%13,x%0) -- #80
//│             in let x%15 = +(x%14,x%1) -- #79
//│               in case x%12 of -- #78
//│                 A => let x%17 = x%12.w -- #64
//│                   in let x%20 = x%17 -- #168
//│                     in jump j%1(x%20) -- #167
//│                 B => let x%20 = x%15 -- #170
//│                   in jump j%1(x%20) -- #169
//│                 C => let x%20 = 0 -- #172
//│                   in jump j%1(x%20) -- #171
//│       B => jump j%1(2) -- #86
//│       C => jump j%1(3) -- #91
//│ )
//│ Def(3, @join j%1, [x%23], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%10 of -- #134
//│   A => let x%25 = x%10.w -- #101
//│     in x%25
//│   B => 4
//│   C => case x%11 of -- #131
//│     A => let x%29 = x%11.w -- #117
//│       in let x%32 = x%29 -- #176
//│         in x%32
//│     B => let x%32 = 7 -- #178
//│       in x%32
//│     C => let x%32 = 8 -- #180
//│       in x%32
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%34 = B(10) -- #162
//│   in let x%35 = A(9,x%34) -- #161
//│     in let x%36 = A(10,x%35) -- #160
//│       in let* (x%37) = complex_foo(x%36) -- #159
//│         in x%37
//│ )
//│ },
//│ let* (x%38) = bar() -- #166
//│   in x%38)
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(1, @join j%0, [x%9], [{<EDestruct@j%0:#135-case x%9 of ...>,<EDirect@j%0:#135-case x%9 of ...>,<EDirect@j%0:#137-let x%10 = ...>,<ESelect(w)@j%0:#81-let x%13 = ...>,<ESelect(x)@j%0:#82-let x%12 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(C))],[Some(ICtor(B))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%10 = A(5,x%9) -- #137
//│   in let x%11 = B(6) -- #136
//│     in case x%9 of -- #135
//│       A => let x%12 = x%9.x -- #82
//│         in let x%13 = x%9.w -- #81
//│           in let x%14 = +(x%13,x%0) -- #80
//│             in let x%15 = +(x%14,x%1) -- #79
//│               in case x%12 of -- #78
//│                 A => let x%17 = x%12.w -- #64
//│                   in let x%20 = x%17 -- #168
//│                     in jump j%1(x%20) -- #167
//│                 B => let x%20 = x%15 -- #170
//│                   in jump j%1(x%20) -- #169
//│                 C => let x%20 = 0 -- #172
//│                   in jump j%1(x%20) -- #171
//│       B => jump j%1(2) -- #86
//│       C => jump j%1(3) -- #91
//│ )
//│ Def(3, @join j%1, [x%23], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%10 of -- #134
//│   A => let x%25 = x%10.w -- #101
//│     in x%25
//│   B => 4
//│   C => case x%11 of -- #131
//│     A => let x%29 = x%11.w -- #117
//│       in let x%32 = x%29 -- #176
//│         in x%32
//│     B => let x%32 = 7 -- #178
//│       in x%32
//│     C => let x%32 = 8 -- #180
//│       in x%32
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%34 = B(10) -- #162
//│   in let x%35 = A(9,x%34) -- #161
//│     in let x%36 = A(10,x%35) -- #160
//│       in let* (x%49,x%50,x%51) = complex_foo$P%0(x%36) -- #202
//│         in case x%49 of -- #201
//│           A => let x%55 = x%49.x -- #218
//│             in let* (x%52) = complex_foo$D%0$S%0(x%50,x%51,x%55) -- #196
//│               in x%52
//│           B => let x%56 = x%49.y -- #219
//│             in let* (x%53) = complex_foo$D%1$S%0(x%51,x%50,x%56) -- #198
//│               in x%53
//│           C => let* (x%54) = complex_foo$D%2(x%50,x%51) -- #200
//│             in x%54
//│ )
//│ Def(11, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #140
//│   in let x%1 = *(1,2) -- #139
//│     in t%0,x%0,x%1
//│ )
//│ Def(14, complex_foo$D%2, [x%0,x%1], [{<EDirect@j%0:#80-let x%14 = ...>},{<EDirect@j%0:#79-let x%15 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%8 = C(0) -- #34
//│   in jump j%0(x%8) -- #33
//│ )
//│ Def(16, complex_foo$D%1$S%0, [x%1,x%0,t%0_y], [{<EDirect@complex_foo$D%1$S%0:#25-let x%5 = ...>,<EDirect@j%0:#79-let x%15 = ...>},{<EDirect@j%0:#80-let x%14 = ...>},{<EDirect@complex_foo$D%1$S%0:#26-let x%4 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%4 = t%0_y -- #26
//│   in let x%5 = +(x%4,x%1) -- #25
//│     in let x%6 = B(x%5) -- #24
//│       in jump j%0(x%6) -- #23
//│ )
//│ Def(17, complex_foo$D%0$S%0, [x%0,x%1,t%0_x], [{<EDirect@j%0:#80-let x%14 = ...>},{<EDirect@j%0:#79-let x%15 = ...>},{<EDirect@complex_foo$D%0$S%0:#14-let x%2 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%2 = t%0_x -- #14
//│   in jump j%0(x%2) -- #12
//│ )
//│ },
//│ let* (x%38) = bar() -- #166
//│   in x%38)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(1, @join j%0, [x%9], [{<EDestruct@j%0:#135-case x%9 of ...>,<EDirect@j%0:#135-case x%9 of ...>,<EDirect@j%0:#137-let x%10 = ...>,<ESelect(w)@j%0:#81-let x%13 = ...>,<ESelect(x)@j%0:#82-let x%12 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%10 = A(5,x%9) -- #137
//│   in let x%11 = B(6) -- #136
//│     in case x%9 of -- #135
//│       A => let x%12 = x%9.x -- #82
//│         in let x%13 = x%9.w -- #81
//│           in let x%14 = +(x%13,x%0) -- #80
//│             in let x%15 = +(x%14,x%1) -- #79
//│               in case x%12 of -- #78
//│                 A => let x%17 = x%12.w -- #64
//│                   in let x%20 = x%17 -- #168
//│                     in jump j%1(x%20) -- #167
//│                 B => let x%20 = x%15 -- #170
//│                   in jump j%1(x%20) -- #169
//│                 C => let x%20 = 0 -- #172
//│                   in jump j%1(x%20) -- #171
//│       B => jump j%1(2) -- #86
//│       C => jump j%1(3) -- #91
//│ )
//│ Def(3, @join j%1, [x%23], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%10 of -- #134
//│   A => let x%25 = x%10.w -- #101
//│     in x%25
//│   B => 4
//│   C => case x%11 of -- #131
//│     A => let x%29 = x%11.w -- #117
//│       in let x%32 = x%29 -- #176
//│         in x%32
//│     B => let x%32 = 7 -- #178
//│       in x%32
//│     C => let x%32 = 8 -- #180
//│       in x%32
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%34 = B(10) -- #162
//│   in let x%35 = A(9,x%34) -- #161
//│     in let x%36 = A(10,x%35) -- #160
//│       in let* (x%49,x%50,x%51) = complex_foo$P%0(x%36) -- #202
//│         in case x%49 of -- #201
//│           A => let x%55 = x%49.x -- #218
//│             in let* (x%52) = complex_foo$D%0$S%0(x%50,x%51,x%55) -- #196
//│               in x%52
//│           B => let x%56 = x%49.y -- #219
//│             in let* (x%53) = complex_foo$D%1$S%0(x%51,x%50,x%56) -- #198
//│               in x%53
//│           C => let* (x%54) = complex_foo$D%2(x%50,x%51) -- #200
//│             in x%54
//│ )
//│ Def(11, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #140
//│   in let x%1 = *(1,2) -- #139
//│     in t%0,x%0,x%1
//│ )
//│ Def(14, complex_foo$D%2, [x%0,x%1], [{<EDirect@j%0$P%1:#x-...>},{<EDirect@j%0$P%1:#x-...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%8 = C(0) -- #34
//│   in let* (x%57,x%58,x%59,x%60,x%61) = j%0$P%1(x%8) -- #224
//│     in case x%57 of -- #223
//│       A => let x%67 = x%57.w -- #243
//│         in let x%68 = x%57.x -- #242
//│           in jump j%0$D%3$S%0(x%58,x%59,x%60,x%61,x%67,x%68) -- #220
//│       B => jump j%1(2) -- #230
//│       C => jump j%1(3) -- #233
//│ )
//│ Def(16, complex_foo$D%1$S%0, [x%1,x%0,t%0_y], [{<EDirect@complex_foo$D%1$S%0:#25-let x%5 = ...>,<EDirect@j%0$P%1:#x-...>},{<EDirect@j%0$P%1:#x-...>},{<EDirect@complex_foo$D%1$S%0:#26-let x%4 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%4 = t%0_y -- #26
//│   in let x%5 = +(x%4,x%1) -- #25
//│     in let x%6 = B(x%5) -- #24
//│       in let* (x%62,x%63,x%64,x%65,x%66) = j%0$P%1(x%6) -- #229
//│         in case x%62 of -- #228
//│           A => let x%69 = x%62.w -- #245
//│             in let x%70 = x%62.x -- #244
//│               in jump j%0$D%3$S%0(x%63,x%64,x%65,x%66,x%69,x%70) -- #225
//│           B => jump j%1(2) -- #236
//│           C => jump j%1(3) -- #239
//│ )
//│ Def(17, complex_foo$D%0$S%0, [x%0,x%1,t%0_x], [{<EDirect@j%0:#80-let x%14 = ...>},{<EDirect@j%0:#79-let x%15 = ...>},{<EDirect@complex_foo$D%0$S%0:#14-let x%2 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%2 = t%0_x -- #14
//│   in jump j%0(x%2) -- #12
//│ )
//│ Def(18, j%0$P%1, [x%9], [{<EDirect@j%0$P%1:#137-let x%10 = ...>,<EDirect@j%0$P%1:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(C))],[Some(ICtor(B))]],
//│ R: [None,None,Some(ICtor(B)),Some(ICtor(A)),None],
//│ Rec: None,
//│ 5, 
//│ let x%10 = A(5,x%9) -- #137
//│   in let x%11 = B(6) -- #136
//│     in x%9,x%0,x%11,x%10,x%1
//│ )
//│ Def(22, j%0$D%3$S%0, [x%0,x%11,x%10,x%1,x%9_w,x%9_x], [{<EDirect@j%0$D%3$S%0:#80-let x%14 = ...>},{<EDestruct@j%1:#131-case x%11 of ...>,<EDirect@j%1:#131-case x%11 of ...>,<ESelect(w)@j%1:#117-let x%29 = ...>},{<EDestruct@j%1:#134-case x%10 of ...>,<EDirect@j%1:#134-case x%10 of ...>,<ESelect(w)@j%1:#101-let x%25 = ...>},{<EDirect@j%0$D%3$S%0:#79-let x%15 = ...>},{<EDirect@j%0$D%3$S%0:#81-let x%13 = ...>},{<EDirect@j%0$D%3$S%0:#82-let x%12 = ...>}],
//│ S: None,
//│ I: [[None,None,None,None,Some(ICtor(A)),Some(ICtor(B))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%12 = x%9_x -- #82
//│   in let x%13 = x%9_w -- #81
//│     in let x%14 = +(x%13,x%0) -- #80
//│       in let x%15 = +(x%14,x%1) -- #79
//│         in case x%12 of -- #78
//│           A => let x%17 = x%12.w -- #64
//│             in let x%20 = x%17 -- #168
//│               in jump j%1(x%20) -- #167
//│           B => let x%20 = x%15 -- #170
//│             in jump j%1(x%20) -- #169
//│           C => let x%20 = 0 -- #172
//│             in jump j%1(x%20) -- #171
//│ )
//│ },
//│ let* (x%38) = bar() -- #166
//│   in x%38)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(1, @join j%0, [x%9], [{<EDestruct@j%0:#135-case x%9 of ...>,<EDirect@j%0:#135-case x%9 of ...>,<EDirect@j%0:#137-let x%10 = ...>,<ESelect(w)@j%0:#81-let x%13 = ...>,<ESelect(x)@j%0:#82-let x%12 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%10 = A(5,x%9) -- #137
//│   in let x%11 = B(6) -- #136
//│     in case x%9 of -- #135
//│       A => let x%12 = x%9.x -- #82
//│         in let x%13 = x%9.w -- #81
//│           in let x%14 = +(x%13,x%0) -- #80
//│             in let x%15 = +(x%14,x%1) -- #79
//│               in case x%12 of -- #78
//│                 A => let x%17 = x%12.w -- #64
//│                   in let x%20 = x%17 -- #168
//│                     in jump j%1(x%20) -- #167
//│                 B => let x%20 = x%15 -- #170
//│                   in jump j%1(x%20) -- #169
//│                 C => let x%20 = 0 -- #172
//│                   in jump j%1(x%20) -- #171
//│       B => jump j%1(2) -- #86
//│       C => jump j%1(3) -- #91
//│ )
//│ Def(3, @join j%1, [x%23], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%10 of -- #134
//│   A => let x%25 = x%10.w -- #101
//│     in x%25
//│   B => 4
//│   C => case x%11 of -- #131
//│     A => let x%29 = x%11.w -- #117
//│       in let x%32 = x%29 -- #176
//│         in x%32
//│     B => let x%32 = 7 -- #178
//│       in x%32
//│     C => let x%32 = 8 -- #180
//│       in x%32
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%34 = B(10) -- #162
//│   in let x%35 = A(9,x%34) -- #161
//│     in let x%36 = A(10,x%35) -- #160
//│       in let* (x%49,x%50,x%51) = complex_foo$P%0(x%36) -- #202
//│         in case x%49 of -- #201
//│           A => let x%55 = x%49.x -- #218
//│             in let* (x%52) = complex_foo$D%0$S%0(x%50,x%51,x%55) -- #196
//│               in x%52
//│           B => let x%56 = x%49.y -- #219
//│             in let* (x%53) = complex_foo$D%1$S%0(x%51,x%50,x%56) -- #198
//│               in x%53
//│           C => let* (x%54) = complex_foo$D%2(x%50,x%51) -- #200
//│             in x%54
//│ )
//│ Def(11, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #140
//│   in let x%1 = *(1,2) -- #139
//│     in t%0,x%0,x%1
//│ )
//│ Def(14, complex_foo$D%2, [x%0,x%1], [{<EDirect@j%0$P%1:#x-...>},{<EDirect@j%0$P%1:#x-...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%8 = C(0) -- #34
//│   in let* (x%57,x%58,x%59,x%60,x%61) = j%0$P%1(x%8) -- #224
//│     in case x%57 of -- #223
//│       A => let x%67 = x%57.w -- #243
//│         in let x%68 = x%57.x -- #242
//│           in let* (x%71,x%72,x%73,x%74) = j%0$D%3$S%0$P%0(x%58,x%59,x%60,x%61,x%67,x%68) -- #250
//│             in case x%71 of -- #249
//│               A => let x%79 = x%71.w -- #256
//│                 in jump j%0$D%3$S%0$D%0$S%0(x%72,x%73,x%79) -- #246
//│               B => jump j%0$D%3$S%0$D%1(x%74,x%72,x%73) -- #247
//│               C => jump j%0$D%3$S%0$D%2(x%72,x%73) -- #248
//│       B => jump j%1(2) -- #230
//│       C => jump j%1(3) -- #233
//│ )
//│ Def(16, complex_foo$D%1$S%0, [x%1,x%0,t%0_y], [{<EDirect@complex_foo$D%1$S%0:#25-let x%5 = ...>,<EDirect@j%0$P%1:#x-...>},{<EDirect@j%0$P%1:#x-...>},{<EDirect@complex_foo$D%1$S%0:#26-let x%4 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%4 = t%0_y -- #26
//│   in let x%5 = +(x%4,x%1) -- #25
//│     in let x%6 = B(x%5) -- #24
//│       in let* (x%62,x%63,x%64,x%65,x%66) = j%0$P%1(x%6) -- #229
//│         in case x%62 of -- #228
//│           A => let x%69 = x%62.w -- #245
//│             in let x%70 = x%62.x -- #244
//│               in let* (x%75,x%76,x%77,x%78) = j%0$D%3$S%0$P%0(x%63,x%64,x%65,x%66,x%69,x%70) -- #255
//│                 in case x%75 of -- #254
//│                   A => let x%80 = x%75.w -- #257
//│                     in jump j%0$D%3$S%0$D%0$S%0(x%76,x%77,x%80) -- #251
//│                   B => jump j%0$D%3$S%0$D%1(x%78,x%76,x%77) -- #252
//│                   C => jump j%0$D%3$S%0$D%2(x%76,x%77) -- #253
//│           B => jump j%1(2) -- #236
//│           C => jump j%1(3) -- #239
//│ )
//│ Def(17, complex_foo$D%0$S%0, [x%0,x%1,t%0_x], [{<EDirect@j%0:#80-let x%14 = ...>},{<EDirect@j%0:#79-let x%15 = ...>},{<EDirect@complex_foo$D%0$S%0:#14-let x%2 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%2 = t%0_x -- #14
//│   in jump j%0(x%2) -- #12
//│ )
//│ Def(18, j%0$P%1, [x%9], [{<EDirect@j%0$P%1:#137-let x%10 = ...>,<EDirect@j%0$P%1:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(C))],[Some(ICtor(B))]],
//│ R: [None,None,Some(ICtor(B)),Some(ICtor(A)),None],
//│ Rec: None,
//│ 5, 
//│ let x%10 = A(5,x%9) -- #137
//│   in let x%11 = B(6) -- #136
//│     in x%9,x%0,x%11,x%10,x%1
//│ )
//│ Def(23, j%0$D%3$S%0$P%0, [x%0,x%11,x%10,x%1,x%9_w,x%9_x], [{<EDirect@j%0$D%3$S%0$P%0:#80-let x%14 = ...>},{<EDirect@j%0$D%3$S%0$P%0:#x-...>},{<EDirect@j%0$D%3$S%0$P%0:#x-...>},{<EDirect@j%0$D%3$S%0$P%0:#79-let x%15 = ...>},{<EDirect@j%0$D%3$S%0$P%0:#81-let x%13 = ...>},{<EDirect@j%0$D%3$S%0$P%0:#82-let x%12 = ...>}],
//│ S: None,
//│ I: [[None,None,None,None,Some(ICtor(A)),Some(ICtor(B))]],
//│ R: [None,None,None,None],
//│ Rec: None,
//│ 4, 
//│ let x%12 = x%9_x -- #82
//│   in let x%13 = x%9_w -- #81
//│     in let x%14 = +(x%13,x%0) -- #80
//│       in let x%15 = +(x%14,x%1) -- #79
//│         in x%12,x%10,x%11,x%15
//│ )
//│ Def(25, j%0$D%3$S%0$D%1, [x%15,x%10,x%11], [{<EDirect@j%0$D%3$S%0$D%1:#170-let x%20 = ...>},{<EDestruct@j%1:#134-case x%10 of ...>,<EDirect@j%1:#134-case x%10 of ...>,<ESelect(w)@j%1:#101-let x%25 = ...>},{<EDestruct@j%1:#131-case x%11 of ...>,<EDirect@j%1:#131-case x%11 of ...>,<ESelect(w)@j%1:#117-let x%29 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%20 = x%15 -- #170
//│   in jump j%1(x%20) -- #169
//│ )
//│ Def(26, j%0$D%3$S%0$D%2, [x%10,x%11], [{<EDestruct@j%1:#134-case x%10 of ...>,<EDirect@j%1:#134-case x%10 of ...>,<ESelect(w)@j%1:#101-let x%25 = ...>},{<EDestruct@j%1:#131-case x%11 of ...>,<EDirect@j%1:#131-case x%11 of ...>,<ESelect(w)@j%1:#117-let x%29 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%20 = 0 -- #172
//│   in jump j%1(x%20) -- #171
//│ )
//│ Def(27, j%0$D%3$S%0$D%0$S%0, [x%10,x%11,x%12_w], [{<EDestruct@j%1:#134-case x%10 of ...>,<EDirect@j%1:#134-case x%10 of ...>,<ESelect(w)@j%1:#101-let x%25 = ...>},{<EDestruct@j%1:#131-case x%11 of ...>,<EDirect@j%1:#131-case x%11 of ...>,<ESelect(w)@j%1:#117-let x%29 = ...>},{<EDirect@j%0$D%3$S%0$D%0$S%0:#64-let x%17 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%17 = x%12_w -- #64
//│   in let x%20 = x%17 -- #168
//│     in jump j%1(x%20) -- #167
//│ )
//│ },
//│ let* (x%38) = bar() -- #166
//│   in x%38)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Fuel used: 4

:GraphInterp
:GraphOptVerbose
class A(w, x)
class B(y)
class C(z)
fun complex_foo(t) =
  let a = 1 + 2
  let b = 1 * 2
  let x = if t is
    A(x, y) then A(x, C(0))
    B(x) then B(x + b)
    C(x) then C(0)
  let z = A(5, x)
  let v = B(6)
  let y = if x is
    A(x, y) then
      let m = x + a + b
      if y is
        A(x, y) then x
        B(x) then m
        C(x) then 0
    B(x) then 2
    C(x) then 3
  if z is
    A(x, y) then x
    B(x) then 4
    C(x) then
      if v is
        A(x, y) then x
        B(x) then 7
        C(x) then 8
fun bar() =
  complex_foo(A(10, A(9, B(10))))
bar()
//│ |#class| |A|(|w|,| |x|)|↵|#class| |B|(|y|)|↵|#class| |C|(|z|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |a| |#=| |1| |+| |2|↵|#let| |b| |#=| |1| |*| |2|↵|#let| |x| |#=| |#if| |t| |is|→|A|(|x|,| |y|)| |#then| |A|(|x|,| |C|(|0|)|)|↵|B|(|x|)| |#then| |B|(|x| |+| |b|)|↵|C|(|x|)| |#then| |C|(|0|)|←|↵|#let| |z| |#=| |A|(|5|,| |x|)|↵|#let| |v| |#=| |B|(|6|)|↵|#let| |y| |#=| |#if| |x| |is|→|A|(|x|,| |y|)| |#then|→|#let| |m| |#=| |x| |+| |a| |+| |b|↵|#if| |y| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |m|↵|C|(|x|)| |#then| |0|←|←|↵|B|(|x|)| |#then| |2|↵|C|(|x|)| |#then| |3|←|↵|#if| |z| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |4|↵|C|(|x|)| |#then|→|#if| |v| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |7|↵|C|(|x|)| |#then| |8|←|←|←|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|10|,| |A|(|9|,| |B|(|10|)|)|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(w, x,) {}; class B(y,) {}; class C(z,) {}; fun complex_foo = (t,) => {let a = +(1,)(2,); let b = *(1,)(2,); let x = if t is ‹(A(x, y,)) then A(x, C(0,),); (B(x,)) then B(+(x,)(b,),); (C(x,)) then C(0,)›; let z = A(5, x,); let v = B(6,); let y = if x is ‹(A(x, y,)) then {let m = +(+(x,)(a,),)(b,); if y is ‹(A(x, y,)) then x; (B(x,)) then m; (C(x,)) then 0›}; (B(x,)) then 2; (C(x,)) then 3›; if z is ‹(A(x, y,)) then x; (B(x,)) then 4; (C(x,)) then {if v is ‹(A(x, y,)) then x; (B(x,)) then 7; (C(x,)) then 8›}›}; fun bar = () => {complex_foo(A(10, A(9, B(10,),),),)}; bar()}
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in case t%0 of -- #148
//│       A => let x%2 = t%0.x -- #24
//│         in let x%3 = t%0.w -- #23
//│           in let x%4 = C(0) -- #22
//│             in let x%5 = A(x%3,x%4) -- #21
//│               in jump j%0(x%5) -- #20
//│       B => let x%6 = t%0.y -- #36
//│         in let x%7 = +(x%6,x%1) -- #35
//│           in let x%8 = B(x%7) -- #34
//│             in jump j%0(x%8) -- #33
//│       C => let x%9 = t%0.z -- #45
//│         in let x%10 = C(0) -- #44
//│           in jump j%0(x%10) -- #43
//│ )
//│ Def(1, @join j%0, [x%11], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%12 = A(5,x%11) -- #147
//│   in let x%13 = B(6) -- #146
//│     in case x%11 of -- #145
//│       A => let x%14 = x%11.x -- #92
//│         in let x%15 = x%11.w -- #91
//│           in let x%16 = +(x%15,x%0) -- #90
//│             in let x%17 = +(x%16,x%1) -- #89
//│               in case x%14 of -- #88
//│                 A => let x%18 = x%14.x -- #75
//│                   in let x%19 = x%14.w -- #74
//│                     in jump j%2(x%19) -- #73
//│                 B => let x%20 = x%14.y -- #80
//│                   in jump j%2(x%17) -- #79
//│                 C => let x%21 = x%14.z -- #85
//│                   in jump j%2(0) -- #84
//│       B => let x%23 = x%11.y -- #97
//│         in jump j%1(2) -- #96
//│       C => let x%24 = x%11.z -- #102
//│         in jump j%1(3) -- #101
//│ )
//│ Def(2, @join j%2, [x%22], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ jump j%1(x%22) -- #87
//│ )
//│ Def(3, @join j%1, [x%25], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%12 of -- #144
//│   A => let x%26 = x%12.x -- #112
//│     in let x%27 = x%12.w -- #111
//│       in jump j%3(x%27) -- #110
//│   B => let x%28 = x%12.y -- #117
//│     in jump j%3(4) -- #116
//│   C => let x%29 = x%12.z -- #142
//│     in case x%13 of -- #141
//│       A => let x%30 = x%13.x -- #128
//│         in let x%31 = x%13.w -- #127
//│           in jump j%4(x%31) -- #126
//│       B => let x%32 = x%13.y -- #133
//│         in jump j%4(7) -- #132
//│       C => let x%33 = x%13.z -- #138
//│         in jump j%4(8) -- #137
//│ )
//│ Def(4, @join j%4, [x%34], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ jump j%3(x%34) -- #140
//│ )
//│ Def(5, @join j%3, [x%35], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x%35
//│ )
//│ Def(6, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%39) = complex_foo(x%38) -- #169
//│         in x%39
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t%0], [{<EDestruct@complex_foo:#148-case t%0 of ...>,<EDirect@complex_foo:#148-case t%0 of ...>,<ESelect(w)@complex_foo:#23-let x%3 = ...>,<ESelect(y)@complex_foo:#36-let x%6 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in case t%0 of -- #148
//│       A => let x%3 = t%0.w -- #23
//│         in let x%4 = C(0) -- #22
//│           in let x%5 = A(x%3,x%4) -- #21
//│             in jump j%0(x%5) -- #20
//│       B => let x%6 = t%0.y -- #36
//│         in let x%7 = +(x%6,x%1) -- #35
//│           in let x%8 = B(x%7) -- #34
//│             in jump j%0(x%8) -- #33
//│       C => let x%10 = C(0) -- #44
//│         in jump j%0(x%10) -- #43
//│ )
//│ Def(1, @join j%0, [x%11], [{<EDestruct@j%0:#145-case x%11 of ...>,<EDirect@j%0:#145-case x%11 of ...>,<EDirect@j%0:#147-let x%12 = ...>,<ESelect(w)@j%0:#91-let x%15 = ...>,<ESelect(x)@j%0:#92-let x%14 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))],[Some(ICtor(B))],[Some(ICtor(C))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%12 = A(5,x%11) -- #147
//│   in let x%13 = B(6) -- #146
//│     in case x%11 of -- #145
//│       A => let x%14 = x%11.x -- #92
//│         in let x%15 = x%11.w -- #91
//│           in let x%16 = +(x%15,x%0) -- #90
//│             in let x%17 = +(x%16,x%1) -- #89
//│               in case x%14 of -- #88
//│                 A => let x%19 = x%14.w -- #74
//│                   in let x%22 = x%19 -- #178
//│                     in jump j%1(x%22) -- #177
//│                 B => let x%22 = x%17 -- #180
//│                   in jump j%1(x%22) -- #179
//│                 C => let x%22 = 0 -- #182
//│                   in jump j%1(x%22) -- #181
//│       B => jump j%1(2) -- #96
//│       C => jump j%1(3) -- #101
//│ )
//│ Def(3, @join j%1, [x%25], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%12 of -- #144
//│   A => let x%27 = x%12.w -- #111
//│     in x%27
//│   B => 4
//│   C => case x%13 of -- #141
//│     A => let x%31 = x%13.w -- #127
//│       in let x%34 = x%31 -- #186
//│         in x%34
//│     B => let x%34 = 7 -- #188
//│       in x%34
//│     C => let x%34 = 8 -- #190
//│       in x%34
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%39) = complex_foo(x%38) -- #169
//│         in x%39
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(1, @join j%0, [x%11], [{<EDestruct@j%0:#145-case x%11 of ...>,<EDirect@j%0:#145-case x%11 of ...>,<EDirect@j%0:#147-let x%12 = ...>,<ESelect(w)@j%0:#91-let x%15 = ...>,<ESelect(x)@j%0:#92-let x%14 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(C))],[Some(ICtor(A))],[Some(ICtor(B))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%12 = A(5,x%11) -- #147
//│   in let x%13 = B(6) -- #146
//│     in case x%11 of -- #145
//│       A => let x%14 = x%11.x -- #92
//│         in let x%15 = x%11.w -- #91
//│           in let x%16 = +(x%15,x%0) -- #90
//│             in let x%17 = +(x%16,x%1) -- #89
//│               in case x%14 of -- #88
//│                 A => let x%19 = x%14.w -- #74
//│                   in let x%22 = x%19 -- #178
//│                     in jump j%1(x%22) -- #177
//│                 B => let x%22 = x%17 -- #180
//│                   in jump j%1(x%22) -- #179
//│                 C => let x%22 = 0 -- #182
//│                   in jump j%1(x%22) -- #181
//│       B => jump j%1(2) -- #96
//│       C => jump j%1(3) -- #101
//│ )
//│ Def(3, @join j%1, [x%25], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%12 of -- #144
//│   A => let x%27 = x%12.w -- #111
//│     in x%27
//│   B => 4
//│   C => case x%13 of -- #141
//│     A => let x%31 = x%13.w -- #127
//│       in let x%34 = x%31 -- #186
//│         in x%34
//│     B => let x%34 = 7 -- #188
//│       in x%34
//│     C => let x%34 = 8 -- #190
//│       in x%34
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%56,x%57,x%58) = complex_foo$P%0(x%38) -- #217
//│         in case x%56 of -- #216
//│           A => let x%62 = x%56.w -- #239
//│             in let* (x%59) = complex_foo$D%0$S%0(x%57,x%58,x%62) -- #211
//│               in x%59
//│           B => let x%63 = x%56.y -- #240
//│             in let* (x%60) = complex_foo$D%1$S%0(x%58,x%57,x%63) -- #213
//│               in x%60
//│           C => let* (x%61) = complex_foo$D%2(x%57,x%58) -- #215
//│             in x%61
//│ )
//│ Def(7, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in t%0,x%0,x%1
//│ )
//│ Def(10, complex_foo$D%2, [x%0,x%1], [{<EDirect@j%0:#90-let x%16 = ...>},{<EDirect@j%0:#89-let x%17 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%10 = C(0) -- #44
//│   in jump j%0(x%10) -- #43
//│ )
//│ Def(16, complex_foo$D%1$S%0, [x%1,x%0,t%0_y], [{<EDirect@complex_foo$D%1$S%0:#35-let x%7 = ...>,<EDirect@j%0:#89-let x%17 = ...>},{<EDirect@j%0:#90-let x%16 = ...>},{<EDirect@complex_foo$D%1$S%0:#36-let x%6 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%6 = t%0_y -- #36
//│   in let x%7 = +(x%6,x%1) -- #35
//│     in let x%8 = B(x%7) -- #34
//│       in jump j%0(x%8) -- #33
//│ )
//│ Def(17, complex_foo$D%0$S%0, [x%0,x%1,t%0_w], [{<EDirect@j%0:#90-let x%16 = ...>},{<EDirect@j%0:#89-let x%17 = ...>},{<EDirect@complex_foo$D%0$S%0:#23-let x%3 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%3 = t%0_w -- #23
//│   in let x%4 = C(0) -- #22
//│     in let x%5 = A(x%3,x%4) -- #21
//│       in jump j%0(x%5) -- #20
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(3, @join j%1, [x%25], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%12 of -- #144
//│   A => let x%27 = x%12.w -- #111
//│     in x%27
//│   B => 4
//│   C => case x%13 of -- #141
//│     A => let x%31 = x%13.w -- #127
//│       in let x%34 = x%31 -- #186
//│         in x%34
//│     B => let x%34 = 7 -- #188
//│       in x%34
//│     C => let x%34 = 8 -- #190
//│       in x%34
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%56,x%57,x%58) = complex_foo$P%0(x%38) -- #217
//│         in case x%56 of -- #216
//│           A => let x%62 = x%56.w -- #239
//│             in let* (x%59) = complex_foo$D%0$S%0(x%57,x%58,x%62) -- #211
//│               in x%59
//│           B => let x%63 = x%56.y -- #240
//│             in let* (x%60) = complex_foo$D%1$S%0(x%58,x%57,x%63) -- #213
//│               in x%60
//│           C => let* (x%61) = complex_foo$D%2(x%57,x%58) -- #215
//│             in x%61
//│ )
//│ Def(7, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in t%0,x%0,x%1
//│ )
//│ Def(10, complex_foo$D%2, [x%0,x%1], [{<EDirect@j%0$P%1:#x-...>},{<EDirect@j%0$P%1:#x-...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%10 = C(0) -- #44
//│   in let* (x%64,x%65,x%66,x%67,x%68) = j%0$P%1(x%10) -- #245
//│     in case x%68 of -- #244
//│       A => let x%79 = x%68.w -- #275
//│         in let x%80 = x%68.x -- #274
//│           in jump j%0$D%3$S%0(x%64,x%65,x%66,x%67,x%79,x%80) -- #241
//│       B => jump j%1(2) -- #256
//│       C => jump j%1(3) -- #259
//│ )
//│ Def(16, complex_foo$D%1$S%0, [x%1,x%0,t%0_y], [{<EDirect@complex_foo$D%1$S%0:#35-let x%7 = ...>,<EDirect@j%0$P%1:#x-...>},{<EDirect@j%0$P%1:#x-...>},{<EDirect@complex_foo$D%1$S%0:#36-let x%6 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%6 = t%0_y -- #36
//│   in let x%7 = +(x%6,x%1) -- #35
//│     in let x%8 = B(x%7) -- #34
//│       in let* (x%74,x%75,x%76,x%77,x%78) = j%0$P%1(x%8) -- #255
//│         in case x%78 of -- #254
//│           A => let x%83 = x%78.w -- #279
//│             in let x%84 = x%78.x -- #278
//│               in jump j%0$D%3$S%0(x%74,x%75,x%76,x%77,x%83,x%84) -- #251
//│           B => jump j%1(2) -- #268
//│           C => jump j%1(3) -- #271
//│ )
//│ Def(17, complex_foo$D%0$S%0, [x%0,x%1,t%0_w], [{<EDirect@j%0$P%1:#x-...>},{<EDirect@j%0$P%1:#x-...>},{<EDirect@complex_foo$D%0$S%0:#23-let x%3 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%3 = t%0_w -- #23
//│   in let x%4 = C(0) -- #22
//│     in let x%5 = A(x%3,x%4) -- #21
//│       in let* (x%69,x%70,x%71,x%72,x%73) = j%0$P%1(x%5) -- #250
//│         in case x%73 of -- #249
//│           A => let x%81 = x%73.w -- #277
//│             in let x%82 = x%73.x -- #276
//│               in jump j%0$D%3$S%0(x%69,x%70,x%71,x%72,x%81,x%82) -- #246
//│           B => jump j%1(2) -- #262
//│           C => jump j%1(3) -- #265
//│ )
//│ Def(18, j%0$P%1, [x%11], [{<EDirect@j%0$P%1:#147-let x%12 = ...>,<EDirect@j%0$P%1:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(C))],[Some(ICtor(A))],[Some(ICtor(B))]],
//│ R: [Some(ICtor(A)),None,None,Some(ICtor(B)),None],
//│ Rec: None,
//│ 5, 
//│ let x%12 = A(5,x%11) -- #147
//│   in let x%13 = B(6) -- #146
//│     in x%12,x%1,x%0,x%13,x%11
//│ )
//│ Def(22, j%0$D%3$S%0, [x%12,x%1,x%0,x%13,x%11_w,x%11_x], [{<EDestruct@j%1:#144-case x%12 of ...>,<EDirect@j%1:#144-case x%12 of ...>,<ESelect(w)@j%1:#111-let x%27 = ...>},{<EDirect@j%0$D%3$S%0:#89-let x%17 = ...>},{<EDirect@j%0$D%3$S%0:#90-let x%16 = ...>},{<EDestruct@j%1:#141-case x%13 of ...>,<EDirect@j%1:#141-case x%13 of ...>,<ESelect(w)@j%1:#127-let x%31 = ...>},{<EDirect@j%0$D%3$S%0:#91-let x%15 = ...>},{<EDirect@j%0$D%3$S%0:#92-let x%14 = ...>}],
//│ S: None,
//│ I: [[None,None,None,None,Some(ICtor(A)),Some(ICtor(B))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%14 = x%11_x -- #92
//│   in let x%15 = x%11_w -- #91
//│     in let x%16 = +(x%15,x%0) -- #90
//│       in let x%17 = +(x%16,x%1) -- #89
//│         in case x%14 of -- #88
//│           A => let x%19 = x%14.w -- #74
//│             in let x%22 = x%19 -- #178
//│               in jump j%1(x%22) -- #177
//│           B => let x%22 = x%17 -- #180
//│             in jump j%1(x%22) -- #179
//│           C => let x%22 = 0 -- #182
//│             in jump j%1(x%22) -- #181
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(3, @join j%1, [x%25], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%12 of -- #144
//│   A => let x%27 = x%12.w -- #111
//│     in x%27
//│   B => 4
//│   C => case x%13 of -- #141
//│     A => let x%31 = x%13.w -- #127
//│       in let x%34 = x%31 -- #186
//│         in x%34
//│     B => let x%34 = 7 -- #188
//│       in x%34
//│     C => let x%34 = 8 -- #190
//│       in x%34
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%56,x%57,x%58) = complex_foo$P%0(x%38) -- #217
//│         in case x%56 of -- #216
//│           A => let x%62 = x%56.w -- #239
//│             in let* (x%59) = complex_foo$D%0$S%0(x%57,x%58,x%62) -- #211
//│               in x%59
//│           B => let x%63 = x%56.y -- #240
//│             in let* (x%60) = complex_foo$D%1$S%0(x%58,x%57,x%63) -- #213
//│               in x%60
//│           C => let* (x%61) = complex_foo$D%2(x%57,x%58) -- #215
//│             in x%61
//│ )
//│ Def(7, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in t%0,x%0,x%1
//│ )
//│ Def(10, complex_foo$D%2, [x%0,x%1], [{<EDirect@j%0$P%1:#x-...>},{<EDirect@j%0$P%1:#x-...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%10 = C(0) -- #44
//│   in let* (x%64,x%65,x%66,x%67,x%68) = j%0$P%1(x%10) -- #245
//│     in case x%68 of -- #244
//│       A => let x%79 = x%68.w -- #275
//│         in let x%80 = x%68.x -- #274
//│           in let* (x%85,x%86,x%87,x%88) = j%0$D%3$S%0$P%0(x%64,x%65,x%66,x%67,x%79,x%80) -- #284
//│             in case x%85 of -- #283
//│               A => let x%97 = x%85.w -- #295
//│                 in jump j%0$D%3$S%0$D%0$S%0(x%86,x%87,x%97) -- #280
//│               B => jump j%0$D%3$S%0$D%1(x%88,x%86,x%87) -- #281
//│               C => jump j%0$D%3$S%0$D%2(x%86,x%87) -- #282
//│       B => jump j%1(2) -- #256
//│       C => jump j%1(3) -- #259
//│ )
//│ Def(16, complex_foo$D%1$S%0, [x%1,x%0,t%0_y], [{<EDirect@complex_foo$D%1$S%0:#35-let x%7 = ...>,<EDirect@j%0$P%1:#x-...>},{<EDirect@j%0$P%1:#x-...>},{<EDirect@complex_foo$D%1$S%0:#36-let x%6 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%6 = t%0_y -- #36
//│   in let x%7 = +(x%6,x%1) -- #35
//│     in let x%8 = B(x%7) -- #34
//│       in let* (x%74,x%75,x%76,x%77,x%78) = j%0$P%1(x%8) -- #255
//│         in case x%78 of -- #254
//│           A => let x%83 = x%78.w -- #279
//│             in let x%84 = x%78.x -- #278
//│               in let* (x%93,x%94,x%95,x%96) = j%0$D%3$S%0$P%0(x%74,x%75,x%76,x%77,x%83,x%84) -- #294
//│                 in case x%93 of -- #293
//│                   A => let x%99 = x%93.w -- #297
//│                     in jump j%0$D%3$S%0$D%0$S%0(x%94,x%95,x%99) -- #290
//│                   B => jump j%0$D%3$S%0$D%1(x%96,x%94,x%95) -- #291
//│                   C => jump j%0$D%3$S%0$D%2(x%94,x%95) -- #292
//│           B => jump j%1(2) -- #268
//│           C => jump j%1(3) -- #271
//│ )
//│ Def(17, complex_foo$D%0$S%0, [x%0,x%1,t%0_w], [{<EDirect@j%0$P%1:#x-...>},{<EDirect@j%0$P%1:#x-...>},{<EDirect@complex_foo$D%0$S%0:#23-let x%3 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%3 = t%0_w -- #23
//│   in let x%4 = C(0) -- #22
//│     in let x%5 = A(x%3,x%4) -- #21
//│       in let* (x%69,x%70,x%71,x%72,x%73) = j%0$P%1(x%5) -- #250
//│         in case x%73 of -- #249
//│           A => let x%81 = x%73.w -- #277
//│             in let x%82 = x%73.x -- #276
//│               in let* (x%89,x%90,x%91,x%92) = j%0$D%3$S%0$P%0(x%69,x%70,x%71,x%72,x%81,x%82) -- #289
//│                 in case x%89 of -- #288
//│                   A => let x%98 = x%89.w -- #296
//│                     in jump j%0$D%3$S%0$D%0$S%0(x%90,x%91,x%98) -- #285
//│                   B => jump j%0$D%3$S%0$D%1(x%92,x%90,x%91) -- #286
//│                   C => jump j%0$D%3$S%0$D%2(x%90,x%91) -- #287
//│           B => jump j%1(2) -- #262
//│           C => jump j%1(3) -- #265
//│ )
//│ Def(18, j%0$P%1, [x%11], [{<EDirect@j%0$P%1:#147-let x%12 = ...>,<EDirect@j%0$P%1:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(C))],[Some(ICtor(A))],[Some(ICtor(B))]],
//│ R: [Some(ICtor(A)),None,None,Some(ICtor(B)),None],
//│ Rec: None,
//│ 5, 
//│ let x%12 = A(5,x%11) -- #147
//│   in let x%13 = B(6) -- #146
//│     in x%12,x%1,x%0,x%13,x%11
//│ )
//│ Def(23, j%0$D%3$S%0$P%0, [x%12,x%1,x%0,x%13,x%11_w,x%11_x], [{<EDirect@j%0$D%3$S%0$P%0:#x-...>},{<EDirect@j%0$D%3$S%0$P%0:#89-let x%17 = ...>},{<EDirect@j%0$D%3$S%0$P%0:#90-let x%16 = ...>},{<EDirect@j%0$D%3$S%0$P%0:#x-...>},{<EDirect@j%0$D%3$S%0$P%0:#91-let x%15 = ...>},{<EDirect@j%0$D%3$S%0$P%0:#92-let x%14 = ...>}],
//│ S: None,
//│ I: [[None,None,None,None,Some(ICtor(A)),Some(ICtor(B))]],
//│ R: [None,None,None,None],
//│ Rec: None,
//│ 4, 
//│ let x%14 = x%11_x -- #92
//│   in let x%15 = x%11_w -- #91
//│     in let x%16 = +(x%15,x%0) -- #90
//│       in let x%17 = +(x%16,x%1) -- #89
//│         in x%14,x%12,x%13,x%17
//│ )
//│ Def(25, j%0$D%3$S%0$D%1, [x%17,x%12,x%13], [{<EDirect@j%0$D%3$S%0$D%1:#180-let x%22 = ...>},{<EDestruct@j%1:#144-case x%12 of ...>,<EDirect@j%1:#144-case x%12 of ...>,<ESelect(w)@j%1:#111-let x%27 = ...>},{<EDestruct@j%1:#141-case x%13 of ...>,<EDirect@j%1:#141-case x%13 of ...>,<ESelect(w)@j%1:#127-let x%31 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%22 = x%17 -- #180
//│   in jump j%1(x%22) -- #179
//│ )
//│ Def(26, j%0$D%3$S%0$D%2, [x%12,x%13], [{<EDestruct@j%1:#144-case x%12 of ...>,<EDirect@j%1:#144-case x%12 of ...>,<ESelect(w)@j%1:#111-let x%27 = ...>},{<EDestruct@j%1:#141-case x%13 of ...>,<EDirect@j%1:#141-case x%13 of ...>,<ESelect(w)@j%1:#127-let x%31 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%22 = 0 -- #182
//│   in jump j%1(x%22) -- #181
//│ )
//│ Def(27, j%0$D%3$S%0$D%0$S%0, [x%12,x%13,x%14_w], [{<EDestruct@j%1:#144-case x%12 of ...>,<EDirect@j%1:#144-case x%12 of ...>,<ESelect(w)@j%1:#111-let x%27 = ...>},{<EDestruct@j%1:#141-case x%13 of ...>,<EDirect@j%1:#141-case x%13 of ...>,<ESelect(w)@j%1:#127-let x%31 = ...>},{<EDirect@j%0$D%3$S%0$D%0$S%0:#74-let x%19 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%19 = x%14_w -- #74
//│   in let x%22 = x%19 -- #178
//│     in jump j%1(x%22) -- #177
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Fuel used: 4
