:NewParser
:ParseOnly

:GraphInterp
:GraphOpt
class A(x, y, z)
class B(m, n)
fun complex_foo(t) =
  let r = if t is
    A(x, y, z) then x + y * z
    B(m, n) then m - n
  let s = B(1, 2)
  let u = if s is
    A(x, y, z) then 3
    B(m, n) then 4
  r + u
fun bar() =
  complex_foo(A(6, 7, 8))
  complex_foo(B(9, 10))
bar()
//│ |#class| |A|(|x|,| |y|,| |z|)|↵|#class| |B|(|m|,| |n|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |r| |#=| |#if| |t| |is|→|A|(|x|,| |y|,| |z|)| |#then| |x| |+| |y| |*| |z|↵|B|(|m|,| |n|)| |#then| |m| |-| |n|←|↵|#let| |s| |#=| |B|(|1|,| |2|)|↵|#let| |u| |#=| |#if| |s| |is|→|A|(|x|,| |y|,| |z|)| |#then| |3|↵|B|(|m|,| |n|)| |#then| |4|←|↵|r| |+| |u|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|6|,| |7|,| |8|)|)|↵|complex_foo|(|B|(|9|,| |10|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(x, y, z,) {}; class B(m, n,) {}; fun complex_foo = (t,) => {let r = if t is ‹(A(x, y, z,)) then +(x,)(*(y,)(z,),); (B(m, n,)) then -(m,)(n,)›; let s = B(1, 2,); let u = if s is ‹(A(x, y, z,)) then 3; (B(m, n,)) then 4›; +(r,)(u,)}; fun bar = () => {complex_foo(A(6, 7, 8,),); complex_foo(B(9, 10,),)}; bar()}
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(0, complex_foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case t%0 of -- #63
//│   A => let x%9 = t%0.z -- #51
//│     in let x%10 = t%0.y -- #50
//│       in let x%11 = t%0.x -- #49
//│         in let x%12 = *(x%10,x%9) -- #48
//│           in let x%13 = +(x%11,x%12) -- #47
//│             in jump j%0(x%13) -- #46
//│   B => let x%14 = t%0.n -- #62
//│     in let x%15 = t%0.m -- #61
//│       in let x%16 = -(x%15,x%14) -- #60
//│         in jump j%0(x%16) -- #59
//│ )
//│ Def(1, @join j%1, [x%2,x%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%3 = +(x%0,x%2) -- #13
//│   in x%3
//│ )
//│ Def(2, @join j%0, [x%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%1 = B(1,2) -- #34
//│   in case x%1 of -- #33
//│     A => let x%4 = x%1.z -- #24
//│       in let x%5 = x%1.y -- #23
//│         in let x%6 = x%1.x -- #22
//│           in jump j%1(3,x%0) -- #21
//│     B => let x%7 = x%1.n -- #32
//│       in let x%8 = x%1.m -- #31
//│         in jump j%1(4,x%0) -- #30
//│ )
//│ Def(3, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%17 = A(6,7,8) -- #89
//│   in let* (x%18) = complex_foo(x%17) -- #88
//│     in let x%19 = B(9,10) -- #87
//│       in let* (x%20) = complex_foo(x%19) -- #86
//│         in x%20
//│ )
//│ },
//│ let* (x%21) = bar() -- #93
//│   in x%21)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(0, complex_foo, [t%0], [{<EDestruct@complex_foo:#63-case t%0 of ...>,<EDirect@complex_foo:#63-case t%0 of ...>,<ESelect(m)@complex_foo:#61-let x%15 = ...>,<ESelect(n)@complex_foo:#62-let x%14 = ...>,<ESelect(x)@complex_foo:#49-let x%11 = ...>,<ESelect(y)@complex_foo:#50-let x%10 = ...>,<ESelect(z)@complex_foo:#51-let x%9 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))],[Some(ICtor(B))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case t%0 of -- #63
//│   A => let x%9 = t%0.z -- #51
//│     in let x%10 = t%0.y -- #50
//│       in let x%11 = t%0.x -- #49
//│         in let x%12 = *(x%10,x%9) -- #48
//│           in let x%13 = +(x%11,x%12) -- #47
//│             in let x%3 = +(x%13,4) -- #96
//│               in x%3
//│   B => let x%14 = t%0.n -- #62
//│     in let x%15 = t%0.m -- #61
//│       in let x%16 = -(x%15,x%14) -- #60
//│         in let x%3 = +(x%16,4) -- #97
//│           in x%3
//│ )
//│ Def(3, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%17 = A(6,7,8) -- #89
//│   in let* (x%18) = complex_foo(x%17) -- #88
//│     in let x%19 = B(9,10) -- #87
//│       in let* (x%20) = complex_foo(x%19) -- #86
//│         in x%20
//│ )
//│ },
//│ let* (x%21) = bar() -- #93
//│   in x%21)
//│ 
//│ Interpreted ------------------------------
//│ 3
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(0, complex_foo, [t%0], [{<EDestruct@complex_foo:#63-case t%0 of ...>,<EDirect@complex_foo:#63-case t%0 of ...>,<ESelect(m)@complex_foo:#61-let x%15 = ...>,<ESelect(n)@complex_foo:#62-let x%14 = ...>,<ESelect(x)@complex_foo:#49-let x%11 = ...>,<ESelect(y)@complex_foo:#50-let x%10 = ...>,<ESelect(z)@complex_foo:#51-let x%9 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(B))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case t%0 of -- #63
//│   A => let x%9 = t%0.z -- #51
//│     in let x%10 = t%0.y -- #50
//│       in let x%11 = t%0.x -- #49
//│         in let x%12 = *(x%10,x%9) -- #48
//│           in let x%13 = +(x%11,x%12) -- #47
//│             in let x%3 = +(x%13,4) -- #96
//│               in x%3
//│   B => let x%14 = t%0.n -- #62
//│     in let x%15 = t%0.m -- #61
//│       in let x%16 = -(x%15,x%14) -- #60
//│         in let x%3 = +(x%16,4) -- #97
//│           in x%3
//│ )
//│ Def(3, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x%24) = complex_foo$D%0$S%0(8,7,6) -- #99
//│   in jump bar$M%0() -- #98
//│ )
//│ Def(7, @join bar$M%0, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%19 = B(9,10) -- #87
//│   in let* (x%20) = complex_foo(x%19) -- #86
//│     in x%20
//│ )
//│ Def(8, complex_foo$D%0$S%0, [t%0_z,t%0_y,t%0_x], [{<EDirect@complex_foo$D%0$S%0:#48-let x%12 = ...>},{<EDirect@complex_foo$D%0$S%0:#48-let x%12 = ...>},{<EDirect@complex_foo$D%0$S%0:#47-let x%13 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%12 = *(t%0_y,t%0_z) -- #48
//│   in let x%13 = +(t%0_x,x%12) -- #47
//│     in let x%3 = +(x%13,4) -- #96
//│       in x%3
//│ )
//│ },
//│ let* (x%21) = bar() -- #93
//│   in x%21)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [x,y,z]),ClassInfo(1, B, [m,n])}, {
//│ Def(3, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x%24) = complex_foo$D%0$S%0(8,7,6) -- #99
//│   in jump bar$M%0() -- #98
//│ )
//│ Def(7, @join bar$M%0, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x%33) = complex_foo$D%3$S%0(9,10) -- #113
//│   in x%33
//│ )
//│ Def(8, complex_foo$D%0$S%0, [t%0_z,t%0_y,t%0_x], [{<EDirect@complex_foo$D%0$S%0:#48-let x%12 = ...>},{<EDirect@complex_foo$D%0$S%0:#48-let x%12 = ...>},{<EDirect@complex_foo$D%0$S%0:#47-let x%13 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%12 = *(t%0_y,t%0_z) -- #48
//│   in let x%13 = +(t%0_x,x%12) -- #47
//│     in let x%3 = +(x%13,4) -- #96
//│       in x%3
//│ )
//│ Def(14, complex_foo$D%3$S%0, [t%0_m,t%0_n], [{<EDirect@complex_foo$D%3$S%0:#60-let x%16 = ...>},{<EDirect@complex_foo$D%3$S%0:#60-let x%16 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%16 = -(t%0_m,t%0_n) -- #60
//│   in let x%3 = +(x%16,4) -- #97
//│     in x%3
//│ )
//│ },
//│ let* (x%21) = bar() -- #93
//│   in x%21)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 3
//│ 
//│ 
//│ Fuel used: 3

:GraphInterp
:GraphOpt
class A(w, x)
class B(y)
class C(z)
fun complex_foo(t) =
  let a = 1 + 2
  let b = 1 * 2
  let x = if t is
    A(x, y) then y
    B(x) then B(x + b)
    C(x) then C(0)
  let z = A(5, x)
  let v = B(6)
  let y = if x is
    A(x, y) then
      let m = x + a + b
      if y is
        A(x, y) then x
        B(x) then m
        C(x) then 0
    B(x) then 2
    C(x) then 3
  if z is
    A(x, y) then x
    B(x) then 4
    C(x) then
      if v is
        A(x, y) then x
        B(x) then 7
        C(x) then 8
fun bar() =
  complex_foo(A(10, A(9, B(10))))
bar()
//│ |#class| |A|(|w|,| |x|)|↵|#class| |B|(|y|)|↵|#class| |C|(|z|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |a| |#=| |1| |+| |2|↵|#let| |b| |#=| |1| |*| |2|↵|#let| |x| |#=| |#if| |t| |is|→|A|(|x|,| |y|)| |#then| |y|↵|B|(|x|)| |#then| |B|(|x| |+| |b|)|↵|C|(|x|)| |#then| |C|(|0|)|←|↵|#let| |z| |#=| |A|(|5|,| |x|)|↵|#let| |v| |#=| |B|(|6|)|↵|#let| |y| |#=| |#if| |x| |is|→|A|(|x|,| |y|)| |#then|→|#let| |m| |#=| |x| |+| |a| |+| |b|↵|#if| |y| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |m|↵|C|(|x|)| |#then| |0|←|←|↵|B|(|x|)| |#then| |2|↵|C|(|x|)| |#then| |3|←|↵|#if| |z| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |4|↵|C|(|x|)| |#then|→|#if| |v| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |7|↵|C|(|x|)| |#then| |8|←|←|←|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|10|,| |A|(|9|,| |B|(|10|)|)|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(w, x,) {}; class B(y,) {}; class C(z,) {}; fun complex_foo = (t,) => {let a = +(1,)(2,); let b = *(1,)(2,); let x = if t is ‹(A(x, y,)) then y; (B(x,)) then B(+(x,)(b,),); (C(x,)) then C(0,)›; let z = A(5, x,); let v = B(6,); let y = if x is ‹(A(x, y,)) then {let m = +(+(x,)(a,),)(b,); if y is ‹(A(x, y,)) then x; (B(x,)) then m; (C(x,)) then 0›}; (B(x,)) then 2; (C(x,)) then 3›; if z is ‹(A(x, y,)) then x; (B(x,)) then 4; (C(x,)) then {if v is ‹(A(x, y,)) then x; (B(x,)) then 7; (C(x,)) then 8›}›}; fun bar = () => {complex_foo(A(10, A(9, B(10,),),),)}; bar()}
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = +(1,2) -- #140
//│   in let x%1 = *(1,2) -- #139
//│     in case t%0 of -- #138
//│       A => let x%27 = t%0.x -- #116
//│         in let x%28 = t%0.w -- #115
//│           in jump j%0(x%27,x%0,x%1) -- #114
//│       B => let x%29 = t%0.y -- #128
//│         in let x%30 = +(x%29,x%1) -- #127
//│           in let x%31 = B(x%30) -- #126
//│             in jump j%0(x%31,x%0,x%1) -- #125
//│       C => let x%32 = t%0.z -- #137
//│         in let x%33 = C(0) -- #136
//│           in jump j%0(x%33,x%0,x%1) -- #135
//│ )
//│ Def(1, @join j%2, [x%6], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x%6
//│ )
//│ Def(2, @join j%3, [x%11], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ jump j%2(x%11) -- #39
//│ )
//│ Def(3, @join j%1, [x%5,x%3,x%4], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%3 of -- #60
//│   A => let x%7 = x%3.x -- #29
//│     in let x%8 = x%3.w -- #28
//│       in jump j%2(x%8) -- #27
//│   B => let x%9 = x%3.y -- #34
//│     in jump j%2(4) -- #33
//│   C => let x%10 = x%3.z -- #59
//│     in case x%4 of -- #58
//│       A => let x%12 = x%4.x -- #47
//│         in let x%13 = x%4.w -- #46
//│           in jump j%3(x%13) -- #45
//│       B => let x%14 = x%4.y -- #52
//│         in jump j%3(7) -- #51
//│       C => let x%15 = x%4.z -- #57
//│         in jump j%3(8) -- #56
//│ )
//│ Def(4, @join j%4, [x%20,x%3,x%4], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ jump j%1(x%20,x%3,x%4) -- #72
//│ )
//│ Def(5, @join j%0, [x%2,x%0,x%1], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%3 = A(5,x%2) -- #108
//│   in let x%4 = B(6) -- #107
//│     in case x%2 of -- #106
//│       A => let x%16 = x%2.x -- #95
//│         in let x%17 = x%2.w -- #94
//│           in let x%18 = +(x%17,x%0) -- #93
//│             in let x%19 = +(x%18,x%1) -- #92
//│               in case x%16 of -- #91
//│                 A => let x%21 = x%16.x -- #80
//│                   in let x%22 = x%16.w -- #79
//│                     in jump j%4(x%22,x%3,x%4) -- #78
//│                 B => let x%23 = x%16.y -- #85
//│                   in jump j%4(x%19,x%3,x%4) -- #84
//│                 C => let x%24 = x%16.z -- #90
//│                   in jump j%4(0,x%3,x%4) -- #89
//│       B => let x%25 = x%2.y -- #100
//│         in jump j%1(2,x%3,x%4) -- #99
//│       C => let x%26 = x%2.z -- #105
//│         in jump j%1(3,x%3,x%4) -- #104
//│ )
//│ Def(6, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%34 = B(10) -- #162
//│   in let x%35 = A(9,x%34) -- #161
//│     in let x%36 = A(10,x%35) -- #160
//│       in let* (x%37) = complex_foo(x%36) -- #159
//│         in x%37
//│ )
//│ },
//│ let* (x%38) = bar() -- #166
//│   in x%38)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t%0], [{<EDestruct@complex_foo:#138-case t%0 of ...>,<EDirect@complex_foo:#138-case t%0 of ...>,<ESelect(x)@complex_foo:#116-let x%27 = ...>,<ESelect(y)@complex_foo:#128-let x%29 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = +(1,2) -- #140
//│   in let x%1 = *(1,2) -- #139
//│     in case t%0 of -- #138
//│       A => let x%27 = t%0.x -- #116
//│         in jump j%0(x%27,x%0,x%1) -- #114
//│       B => let x%29 = t%0.y -- #128
//│         in let x%30 = +(x%29,x%1) -- #127
//│           in let x%31 = B(x%30) -- #126
//│             in jump j%0(x%31,x%0,x%1) -- #125
//│       C => let x%33 = C(0) -- #136
//│         in jump j%0(x%33,x%0,x%1) -- #135
//│ )
//│ Def(3, @join j%1, [x%5,x%3,x%4], [{},{<EDestruct@j%1:#60-case x%3 of ...>,<EDirect@j%1:#60-case x%3 of ...>,<ESelect(w)@j%1:#28-let x%8 = ...>},{<EDestruct@j%1:#58-case x%4 of ...>,<EDirect@j%1:#58-case x%4 of ...>,<ESelect(w)@j%1:#46-let x%13 = ...>}],
//│ S: None,
//│ I: [[None,Some(ICtor(A)),Some(ICtor(B))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%3 of -- #60
//│   A => let x%8 = x%3.w -- #28
//│     in x%8
//│   B => 4
//│   C => case x%4 of -- #58
//│     A => let x%13 = x%4.w -- #46
//│       in x%13
//│     B => 7
//│     C => 8
//│ )
//│ Def(5, @join j%0, [x%2,x%0,x%1], [{<EDestruct@j%0:#106-case x%2 of ...>,<EDirect@j%0:#106-case x%2 of ...>,<EDirect@j%0:#108-let x%3 = ...>,<ESelect(w)@j%0:#94-let x%17 = ...>,<ESelect(x)@j%0:#95-let x%16 = ...>},{<EDirect@j%0:#93-let x%18 = ...>},{<EDirect@j%0:#92-let x%19 = ...>}],
//│ S: None,
//│ I: [[None,None,Some(ICtor(B))],[None,None,Some(ICtor(C))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%3 = A(5,x%2) -- #108
//│   in let x%4 = B(6) -- #107
//│     in case x%2 of -- #106
//│       A => let x%16 = x%2.x -- #95
//│         in let x%17 = x%2.w -- #94
//│           in let x%18 = +(x%17,x%0) -- #93
//│             in let x%19 = +(x%18,x%1) -- #92
//│               in case x%16 of -- #91
//│                 A => let x%22 = x%16.w -- #79
//│                   in jump j%1(x%22,x%3,x%4) -- #167
//│                 B => jump j%1(x%19,x%3,x%4) -- #171
//│                 C => jump j%1(0,x%3,x%4) -- #175
//│       B => jump j%1(2,x%3,x%4) -- #99
//│       C => jump j%1(3,x%3,x%4) -- #104
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%34 = B(10) -- #162
//│   in let x%35 = A(9,x%34) -- #161
//│     in let x%36 = A(10,x%35) -- #160
//│       in let* (x%37) = complex_foo(x%36) -- #159
//│         in x%37
//│ )
//│ },
//│ let* (x%38) = bar() -- #166
//│   in x%38)
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(5, @join j%0, [x%2,x%0,x%1], [{<EDestruct@j%0:#106-case x%2 of ...>,<EDirect@j%0:#106-case x%2 of ...>,<ESelect(x)@j%0:#95-let x%16 = ...>},{},{}],
//│ S: None,
//│ I: [[None,None,Some(ICtor(B))],[None,None,Some(ICtor(C))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%2 of -- #106
//│   A => let x%16 = x%2.x -- #95
//│     in case x%16 of -- #91
//│       A => 5
//│       B => 5
//│       C => 5
//│   B => 5
//│   C => 5
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%34 = B(10) -- #162
//│   in let x%35 = A(9,x%34) -- #161
//│     in let x%36 = A(10,x%35) -- #160
//│       in let* (x%59,x%60,x%61) = complex_foo$P%0(x%36) -- #233
//│         in case x%59 of -- #232
//│           A => let x%65 = x%59.x -- #269
//│             in let* (x%62) = complex_foo$D%0$S%0(x%60,x%61,x%65) -- #227
//│               in x%62
//│           B => let x%66 = x%59.y -- #270
//│             in let* (x%63) = complex_foo$D%1$S%0(x%61,x%60,x%66) -- #229
//│               in x%63
//│           C => let* (x%64) = complex_foo$D%2(x%60,x%61) -- #231
//│             in x%64
//│ )
//│ Def(15, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #140
//│   in let x%1 = *(1,2) -- #139
//│     in t%0,x%0,x%1
//│ )
//│ Def(18, complex_foo$D%2, [x%0,x%1], [{<EDirect@complex_foo$D%2:#135-jump j%0 ...>},{<EDirect@complex_foo$D%2:#135-jump j%0 ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%33 = C(0) -- #136
//│   in jump j%0(x%33,x%0,x%1) -- #135
//│ )
//│ Def(20, complex_foo$D%1$S%0, [x%1,x%0,t%0_y], [{<EDirect@complex_foo$D%1$S%0:#125-jump j%0 ...>,<EDirect@complex_foo$D%1$S%0:#127-let x%30 = ...>},{<EDirect@complex_foo$D%1$S%0:#125-jump j%0 ...>},{<EDirect@complex_foo$D%1$S%0:#127-let x%30 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%30 = +(t%0_y,x%1) -- #127
//│   in let x%31 = B(x%30) -- #126
//│     in jump j%0(x%31,x%0,x%1) -- #125
//│ )
//│ Def(21, complex_foo$D%0$S%0, [x%0,x%1,t%0_x], [{<EDirect@complex_foo$D%0$S%0:#114-jump j%0 ...>},{<EDirect@complex_foo$D%0$S%0:#114-jump j%0 ...>},{<EDirect@complex_foo$D%0$S%0:#114-jump j%0 ...>,<EIndirectDestruct@complex_foo$D%0$S%0:#114-jump j%0 ...>,<ESelect(x)@j%0:#95-let x%16 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ jump j%0(t%0_x,x%0,x%1) -- #114
//│ )
//│ },
//│ let* (x%38) = bar() -- #166
//│   in x%38)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(5, @join j%0, [x%2,x%0,x%1], [{<EDestruct@j%0:#106-case x%2 of ...>,<EDirect@j%0:#106-case x%2 of ...>,<ESelect(x)@j%0:#95-let x%16 = ...>},{},{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%2 of -- #106
//│   A => let x%16 = x%2.x -- #95
//│     in case x%16 of -- #91
//│       A => 5
//│       B => 5
//│       C => 5
//│   B => 5
//│   C => 5
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%34 = B(10) -- #162
//│   in let x%35 = A(9,x%34) -- #161
//│     in let x%36 = A(10,x%35) -- #160
//│       in let* (x%59,x%60,x%61) = complex_foo$P%0(x%36) -- #233
//│         in case x%59 of -- #232
//│           A => let x%65 = x%59.x -- #269
//│             in let* (x%62) = complex_foo$D%0$S%0(x%60,x%61,x%65) -- #227
//│               in x%62
//│           B => 5
//│           C => 5
//│ )
//│ Def(15, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #140
//│   in let x%1 = *(1,2) -- #139
//│     in t%0,x%0,x%1
//│ )
//│ Def(21, complex_foo$D%0$S%0, [x%0,x%1,t%0_x], [{<EDirect@complex_foo$D%0$S%0:#114-jump j%0 ...>},{<EDirect@complex_foo$D%0$S%0:#114-jump j%0 ...>},{<EDirect@complex_foo$D%0$S%0:#114-jump j%0 ...>,<EIndirectDestruct@complex_foo$D%0$S%0:#114-jump j%0 ...>,<ESelect(x)@j%0:#95-let x%16 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ jump j%0(t%0_x,x%0,x%1) -- #114
//│ )
//│ },
//│ let* (x%38) = bar() -- #166
//│   in x%38)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Fuel used: 3

:GraphInterp
:GraphOpt
class A(w, x)
class B(y)
class C(z)
fun complex_foo(t) =
  let a = 1 + 2
  let b = 1 * 2
  let x = if t is
    A(x, y) then A(x, C(0))
    B(x) then B(x + b)
    C(x) then C(0)
  let z = A(5, x)
  let v = B(6)
  let y = if x is
    A(x, y) then
      let m = x + a + b
      if y is
        A(x, y) then x
        B(x) then m
        C(x) then 0
    B(x) then 2
    C(x) then 3
  if z is
    A(x, y) then x
    B(x) then 4
    C(x) then
      if v is
        A(x, y) then x
        B(x) then 7
        C(x) then 8
fun bar() =
  complex_foo(A(10, A(9, B(10))))
bar()
//│ |#class| |A|(|w|,| |x|)|↵|#class| |B|(|y|)|↵|#class| |C|(|z|)|↵|#fun| |complex_foo|(|t|)| |#=|→|#let| |a| |#=| |1| |+| |2|↵|#let| |b| |#=| |1| |*| |2|↵|#let| |x| |#=| |#if| |t| |is|→|A|(|x|,| |y|)| |#then| |A|(|x|,| |C|(|0|)|)|↵|B|(|x|)| |#then| |B|(|x| |+| |b|)|↵|C|(|x|)| |#then| |C|(|0|)|←|↵|#let| |z| |#=| |A|(|5|,| |x|)|↵|#let| |v| |#=| |B|(|6|)|↵|#let| |y| |#=| |#if| |x| |is|→|A|(|x|,| |y|)| |#then|→|#let| |m| |#=| |x| |+| |a| |+| |b|↵|#if| |y| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |m|↵|C|(|x|)| |#then| |0|←|←|↵|B|(|x|)| |#then| |2|↵|C|(|x|)| |#then| |3|←|↵|#if| |z| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |4|↵|C|(|x|)| |#then|→|#if| |v| |is|→|A|(|x|,| |y|)| |#then| |x|↵|B|(|x|)| |#then| |7|↵|C|(|x|)| |#then| |8|←|←|←|←|↵|#fun| |bar|(||)| |#=|→|complex_foo|(|A|(|10|,| |A|(|9|,| |B|(|10|)|)|)|)|←|↵|bar|(||)|
//│ Parsed: {class A(w, x,) {}; class B(y,) {}; class C(z,) {}; fun complex_foo = (t,) => {let a = +(1,)(2,); let b = *(1,)(2,); let x = if t is ‹(A(x, y,)) then A(x, C(0,),); (B(x,)) then B(+(x,)(b,),); (C(x,)) then C(0,)›; let z = A(5, x,); let v = B(6,); let y = if x is ‹(A(x, y,)) then {let m = +(+(x,)(a,),)(b,); if y is ‹(A(x, y,)) then x; (B(x,)) then m; (C(x,)) then 0›}; (B(x,)) then 2; (C(x,)) then 3›; if z is ‹(A(x, y,)) then x; (B(x,)) then 4; (C(x,)) then {if v is ‹(A(x, y,)) then x; (B(x,)) then 7; (C(x,)) then 8›}›}; fun bar = () => {complex_foo(A(10, A(9, B(10,),),),)}; bar()}
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in case t%0 of -- #148
//│       A => let x%27 = t%0.x -- #126
//│         in let x%28 = t%0.w -- #125
//│           in let x%29 = C(0) -- #124
//│             in let x%30 = A(x%28,x%29) -- #123
//│               in jump j%0(x%30,x%0,x%1) -- #122
//│       B => let x%31 = t%0.y -- #138
//│         in let x%32 = +(x%31,x%1) -- #137
//│           in let x%33 = B(x%32) -- #136
//│             in jump j%0(x%33,x%0,x%1) -- #135
//│       C => let x%34 = t%0.z -- #147
//│         in let x%35 = C(0) -- #146
//│           in jump j%0(x%35,x%0,x%1) -- #145
//│ )
//│ Def(1, @join j%2, [x%6], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x%6
//│ )
//│ Def(2, @join j%3, [x%11], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ jump j%2(x%11) -- #39
//│ )
//│ Def(3, @join j%1, [x%5,x%3,x%4], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%3 of -- #60
//│   A => let x%7 = x%3.x -- #29
//│     in let x%8 = x%3.w -- #28
//│       in jump j%2(x%8) -- #27
//│   B => let x%9 = x%3.y -- #34
//│     in jump j%2(4) -- #33
//│   C => let x%10 = x%3.z -- #59
//│     in case x%4 of -- #58
//│       A => let x%12 = x%4.x -- #47
//│         in let x%13 = x%4.w -- #46
//│           in jump j%3(x%13) -- #45
//│       B => let x%14 = x%4.y -- #52
//│         in jump j%3(7) -- #51
//│       C => let x%15 = x%4.z -- #57
//│         in jump j%3(8) -- #56
//│ )
//│ Def(4, @join j%4, [x%20,x%3,x%4], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ jump j%1(x%20,x%3,x%4) -- #72
//│ )
//│ Def(5, @join j%0, [x%2,x%0,x%1], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%3 = A(5,x%2) -- #108
//│   in let x%4 = B(6) -- #107
//│     in case x%2 of -- #106
//│       A => let x%16 = x%2.x -- #95
//│         in let x%17 = x%2.w -- #94
//│           in let x%18 = +(x%17,x%0) -- #93
//│             in let x%19 = +(x%18,x%1) -- #92
//│               in case x%16 of -- #91
//│                 A => let x%21 = x%16.x -- #80
//│                   in let x%22 = x%16.w -- #79
//│                     in jump j%4(x%22,x%3,x%4) -- #78
//│                 B => let x%23 = x%16.y -- #85
//│                   in jump j%4(x%19,x%3,x%4) -- #84
//│                 C => let x%24 = x%16.z -- #90
//│                   in jump j%4(0,x%3,x%4) -- #89
//│       B => let x%25 = x%2.y -- #100
//│         in jump j%1(2,x%3,x%4) -- #99
//│       C => let x%26 = x%2.z -- #105
//│         in jump j%1(3,x%3,x%4) -- #104
//│ )
//│ Def(6, bar, [], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%39) = complex_foo(x%38) -- #169
//│         in x%39
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(0, complex_foo, [t%0], [{<EDestruct@complex_foo:#148-case t%0 of ...>,<EDirect@complex_foo:#148-case t%0 of ...>,<ESelect(w)@complex_foo:#125-let x%28 = ...>,<ESelect(y)@complex_foo:#138-let x%31 = ...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in case t%0 of -- #148
//│       A => let x%28 = t%0.w -- #125
//│         in let x%29 = C(0) -- #124
//│           in let x%30 = A(x%28,x%29) -- #123
//│             in jump j%0(x%30,x%0,x%1) -- #122
//│       B => let x%31 = t%0.y -- #138
//│         in let x%32 = +(x%31,x%1) -- #137
//│           in let x%33 = B(x%32) -- #136
//│             in jump j%0(x%33,x%0,x%1) -- #135
//│       C => let x%35 = C(0) -- #146
//│         in jump j%0(x%35,x%0,x%1) -- #145
//│ )
//│ Def(3, @join j%1, [x%5,x%3,x%4], [{},{<EDestruct@j%1:#60-case x%3 of ...>,<EDirect@j%1:#60-case x%3 of ...>,<ESelect(w)@j%1:#28-let x%8 = ...>},{<EDestruct@j%1:#58-case x%4 of ...>,<EDirect@j%1:#58-case x%4 of ...>,<ESelect(w)@j%1:#46-let x%13 = ...>}],
//│ S: None,
//│ I: [[None,Some(ICtor(A)),Some(ICtor(B))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%3 of -- #60
//│   A => let x%8 = x%3.w -- #28
//│     in x%8
//│   B => 4
//│   C => case x%4 of -- #58
//│     A => let x%13 = x%4.w -- #46
//│       in x%13
//│     B => 7
//│     C => 8
//│ )
//│ Def(5, @join j%0, [x%2,x%0,x%1], [{<EDestruct@j%0:#106-case x%2 of ...>,<EDirect@j%0:#106-case x%2 of ...>,<EDirect@j%0:#108-let x%3 = ...>,<ESelect(w)@j%0:#94-let x%17 = ...>,<ESelect(x)@j%0:#95-let x%16 = ...>},{<EDirect@j%0:#93-let x%18 = ...>},{<EDirect@j%0:#92-let x%19 = ...>}],
//│ S: None,
//│ I: [[None,None,Some(ICtor(A))],[None,None,Some(ICtor(B))],[None,None,Some(ICtor(C))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%3 = A(5,x%2) -- #108
//│   in let x%4 = B(6) -- #107
//│     in case x%2 of -- #106
//│       A => let x%16 = x%2.x -- #95
//│         in let x%17 = x%2.w -- #94
//│           in let x%18 = +(x%17,x%0) -- #93
//│             in let x%19 = +(x%18,x%1) -- #92
//│               in case x%16 of -- #91
//│                 A => let x%22 = x%16.w -- #79
//│                   in jump j%1(x%22,x%3,x%4) -- #177
//│                 B => jump j%1(x%19,x%3,x%4) -- #181
//│                 C => jump j%1(0,x%3,x%4) -- #185
//│       B => jump j%1(2,x%3,x%4) -- #99
//│       C => jump j%1(3,x%3,x%4) -- #104
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%39) = complex_foo(x%38) -- #169
//│         in x%39
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(5, @join j%0, [x%2,x%0,x%1], [{<EDestruct@j%0:#106-case x%2 of ...>,<EDirect@j%0:#106-case x%2 of ...>,<ESelect(x)@j%0:#95-let x%16 = ...>},{},{}],
//│ S: None,
//│ I: [[None,None,Some(ICtor(B))],[None,None,Some(ICtor(A))],[None,None,Some(ICtor(C))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%2 of -- #106
//│   A => let x%16 = x%2.x -- #95
//│     in case x%16 of -- #91
//│       A => 5
//│       B => 5
//│       C => 5
//│   B => 5
//│   C => 5
//│ )
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%66,x%67,x%68) = complex_foo$P%0(x%38) -- #248
//│         in case x%66 of -- #247
//│           A => let x%72 = x%66.w -- #290
//│             in let* (x%69) = complex_foo$D%0$S%0(x%67,x%68,x%72) -- #242
//│               in x%69
//│           B => let x%73 = x%66.y -- #291
//│             in let* (x%70) = complex_foo$D%1$S%0(x%68,x%67,x%73) -- #244
//│               in x%70
//│           C => let* (x%71) = complex_foo$D%2(x%67,x%68) -- #246
//│             in x%71
//│ )
//│ Def(15, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in t%0,x%0,x%1
//│ )
//│ Def(18, complex_foo$D%2, [x%0,x%1], [{<EDirect@complex_foo$D%2:#145-jump j%0 ...>},{<EDirect@complex_foo$D%2:#145-jump j%0 ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%35 = C(0) -- #146
//│   in jump j%0(x%35,x%0,x%1) -- #145
//│ )
//│ Def(20, complex_foo$D%1$S%0, [x%1,x%0,t%0_y], [{<EDirect@complex_foo$D%1$S%0:#135-jump j%0 ...>,<EDirect@complex_foo$D%1$S%0:#137-let x%32 = ...>},{<EDirect@complex_foo$D%1$S%0:#135-jump j%0 ...>},{<EDirect@complex_foo$D%1$S%0:#137-let x%32 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%32 = +(t%0_y,x%1) -- #137
//│   in let x%33 = B(x%32) -- #136
//│     in jump j%0(x%33,x%0,x%1) -- #135
//│ )
//│ Def(21, complex_foo$D%0$S%0, [x%0,x%1,t%0_w], [{<EDirect@complex_foo$D%0$S%0:#122-jump j%0 ...>},{<EDirect@complex_foo$D%0$S%0:#122-jump j%0 ...>},{<EDirect@complex_foo$D%0$S%0:#123-let x%30 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%29 = C(0) -- #124
//│   in let x%30 = A(t%0_w,x%29) -- #123
//│     in jump j%0(x%30,x%0,x%1) -- #122
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%66,x%67,x%68) = complex_foo$P%0(x%38) -- #248
//│         in case x%66 of -- #247
//│           A => let x%72 = x%66.w -- #290
//│             in let* (x%69) = complex_foo$D%0$S%0(x%67,x%68,x%72) -- #242
//│               in x%69
//│           B => 5
//│           C => 5
//│ )
//│ Def(15, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in t%0,x%0,x%1
//│ )
//│ Def(21, complex_foo$D%0$S%0, [x%0,x%1,t%0_w], [{},{},{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%29 = C(0) -- #124
//│   in jump j%0$D%3$S%0(x%29) -- #297
//│ )
//│ Def(26, j%0$D%3$S%0, [x%2_x], [{<EDestruct@j%0$D%3$S%0:#91-case x%2_x of ...>,<EDirect@j%0$D%3$S%0:#91-case x%2_x of ...>}],
//│ S: None,
//│ I: [[Some(ICtor(C))]],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case x%2_x of -- #91
//│   A => 5
//│   B => 5
//│   C => 5
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%66,x%67,x%68) = complex_foo$P%0(x%38) -- #248
//│         in case x%66 of -- #247
//│           A => let x%72 = x%66.w -- #290
//│             in let* (x%69) = complex_foo$D%0$S%0(x%67,x%68,x%72) -- #242
//│               in x%69
//│           B => 5
//│           C => 5
//│ )
//│ Def(15, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in t%0,x%0,x%1
//│ )
//│ Def(21, complex_foo$D%0$S%0, [x%0,x%1,t%0_w], [{},{},{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ 5
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, A, [w,x]),ClassInfo(1, B, [y]),ClassInfo(2, C, [z])}, {
//│ Def(6, bar, [], [],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%36 = B(10) -- #172
//│   in let x%37 = A(9,x%36) -- #171
//│     in let x%38 = A(10,x%37) -- #170
//│       in let* (x%66,x%67,x%68) = complex_foo$P%0(x%38) -- #248
//│         in case x%66 of -- #247
//│           A => 5
//│           B => 5
//│           C => 5
//│ )
//│ Def(15, complex_foo$P%0, [t%0], [{<EDirect@complex_foo$P%0:#x-...>}],
//│ S: None,
//│ I: [[Some(ICtor(A))]],
//│ R: [None,None,None],
//│ Rec: None,
//│ 3, 
//│ let x%0 = +(1,2) -- #150
//│   in let x%1 = *(1,2) -- #149
//│     in t%0,x%0,x%1
//│ )
//│ },
//│ let* (x%40) = bar() -- #176
//│   in x%40)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ 5
//│ 
//│ 
//│ Fuel used: 5
