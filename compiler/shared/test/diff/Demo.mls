:NewParser
:ParseOnly

:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun list_of_n(n) =
  if n == 0 then Nil else Cons(0, list_of_n(n - 1))
fun last(l) =
  if l is
    Nil then None
    Cons(h, t) then
      if t is
        Nil then Some(h)
        Cons(h2, t2) then last(t)
fun main() =
  last(list_of_n(10))
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |Cons|(|h|,| |t|)|↵|#class| |Nil|↵|#class| |Some|(|x|)|↵|#class| |None|↵|#fun| |list_of_n|(|n|)| |#=|→|#if| |n| |==| |0| |#then| |Nil| |#else| |Cons|(|0|,| |list_of_n|(|n| |-| |1|)|)|←|↵|#fun| |last|(|l|)| |#=|→|#if| |l| |is|→|Nil| |#then| |None|↵|Cons|(|h|,| |t|)| |#then|→|#if| |t| |is|→|Nil| |#then| |Some|(|h|)|↵|Cons|(|h2|,| |t2|)| |#then| |last|(|t|)|←|←|←|←|↵|#fun| |main|(||)| |#=|→|last|(|list_of_n|(|10|)|)|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class Cons(h, t,) {}; class Nil {}; class Some(x,) {}; class None {}; fun list_of_n = (n,) => {if (==(n,)(0,)) then Nil else Cons(0, list_of_n(-(n,)(1,),),)}; fun last = (l,) => {if l is ‹(Nil) then None; (Cons(h, t,)) then {if t is ‹(Nil) then Some(h,); (Cons(h2, t2,)) then last(t,)›}›}; fun main = () => {last(list_of_n(10,),)}; main()}
//│ 
//│ 
//│ GraphOpt:
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, list_of_n, [n$0],
//│ S: None,
//│ 1, 
//│ let x$0 = ==(n$0,0) -- #24
//│   in if x$0 -- #23
//│     true => let x$2 = Nil() -- #6
//│       in jump j$0(x$2) -- #5
//│     false => let x$3 = -(n$0,1) -- #22
//│       in let* (x$4) = list_of_n(x$3) -- #21
//│         in let x$5 = Cons(0,x$4) -- #20
//│           in jump j$0(x$5) -- #19
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #3
//│ )
//│ Def(2, last, [l$0],
//│ S: None,
//│ 1, 
//│ case l$0 of -- #59
//│   Nil => let x$7 = None() -- #29
//│     in jump j$1(x$7) -- #28
//│   Cons => let x$8 = l$0.t -- #58
//│     in let x$9 = l$0.h -- #57
//│       in case x$8 of -- #56
//│         Nil => let x$11 = Some(x$9) -- #42
//│           in jump j$2(x$11) -- #41
//│         Cons => let x$12 = x$8.t -- #55
//│           in let x$13 = x$8.h -- #54
//│             in let* (x$14) = last(x$8) -- #53
//│               in jump j$2(x$14) -- #52
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #26
//│ )
//│ Def(4, j$2, [x$10],
//│ S: None,
//│ 1, 
//│ jump j$1(x$10) -- #36
//│ )
//│ Def(5, main, [],
//│ S: None,
//│ 1, 
//│ let* (x$15) = list_of_n(10) -- #70
//│   in let* (x$16) = last(x$15) -- #69
//│     in x$16 -- #68
//│ )
//│ },
//│ let* (x$17) = main() -- #74
//│   in x$17 -- #73)
//│ 
//│ Promoted ------------------------------------
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, list_of_n, [n$0],
//│ S: None,
//│ 1, 
//│ let x$0 = ==(n$0,0) -- #24
//│   in if x$0 -- #23
//│     true => let x$2 = Nil() -- #6
//│       in jump j$0(x$2) -- #5
//│     false => let x$3 = -(n$0,1) -- #22
//│       in let* (x$4) = list_of_n(x$3) -- #21
//│         in let x$5 = Cons(0,x$4) -- #20
//│           in jump j$0(x$5) -- #19
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #3
//│ )
//│ Def(2, last, [l$0],
//│ S: None,
//│ 1, 
//│ case l$0 of -- #59
//│   Nil => let x$7 = None() -- #29
//│     in jump j$1(x$7) -- #28
//│   Cons => let x$8 = l$0.t -- #58
//│     in let x$9 = l$0.h -- #57
//│       in case x$8 of -- #56
//│         Nil => let x$11 = Some(x$9) -- #42
//│           in jump j$2(x$11) -- #41
//│         Cons => let x$12 = x$8.t -- #55
//│           in let x$13 = x$8.h -- #54
//│             in let* (x$14) = last(x$8) -- #53
//│               in jump j$2(x$14) -- #52
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #26
//│ )
//│ Def(4, j$2, [x$10],
//│ S: None,
//│ 1, 
//│ jump j$1(x$10) -- #36
//│ )
//│ Def(5, main, [],
//│ S: None,
//│ 1, 
//│ let* (x$15) = list_of_n(10) -- #70
//│   in let* (x$16) = last(x$15) -- #69
//│     in x$16 -- #68
//│ )
//│ },
//│ let* (x$17) = main() -- #74
//│   in x$17 -- #73)
//│ 
//│ Interpreted ------------------------------
//│ Some(0)


:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun list_of_n(n) =
  if n == 0 then Nil else Cons(0, list_of_n(n - 1))
fun last(l) =
  if l is
    Nil then None
    Cons(h, t) then
      if t is
        Nil then Some(h)
        Cons(h2, t2) then last(t)
fun main() =
  last(Cons(0, Cons(1, Cons(2, Nil))))
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |Cons|(|h|,| |t|)|↵|#class| |Nil|↵|#class| |Some|(|x|)|↵|#class| |None|↵|#fun| |list_of_n|(|n|)| |#=|→|#if| |n| |==| |0| |#then| |Nil| |#else| |Cons|(|0|,| |list_of_n|(|n| |-| |1|)|)|←|↵|#fun| |last|(|l|)| |#=|→|#if| |l| |is|→|Nil| |#then| |None|↵|Cons|(|h|,| |t|)| |#then|→|#if| |t| |is|→|Nil| |#then| |Some|(|h|)|↵|Cons|(|h2|,| |t2|)| |#then| |last|(|t|)|←|←|←|←|↵|#fun| |main|(||)| |#=|→|last|(|Cons|(|0|,| |Cons|(|1|,| |Cons|(|2|,| |Nil|)|)|)|)|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class Cons(h, t,) {}; class Nil {}; class Some(x,) {}; class None {}; fun list_of_n = (n,) => {if (==(n,)(0,)) then Nil else Cons(0, list_of_n(-(n,)(1,),),)}; fun last = (l,) => {if l is ‹(Nil) then None; (Cons(h, t,)) then {if t is ‹(Nil) then Some(h,); (Cons(h2, t2,)) then last(t,)›}›}; fun main = () => {last(Cons(0, Cons(1, Cons(2, Nil,),),),)}; main()}
//│ 
//│ 
//│ GraphOpt:
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, list_of_n, [n$0],
//│ S: None,
//│ 1, 
//│ let x$0 = ==(n$0,0) -- #24
//│   in if x$0 -- #23
//│     true => let x$2 = Nil() -- #6
//│       in jump j$0(x$2) -- #5
//│     false => let x$3 = -(n$0,1) -- #22
//│       in let* (x$4) = list_of_n(x$3) -- #21
//│         in let x$5 = Cons(0,x$4) -- #20
//│           in jump j$0(x$5) -- #19
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #3
//│ )
//│ Def(2, last, [l$0],
//│ S: None,
//│ 1, 
//│ case l$0 of -- #59
//│   Nil => let x$7 = None() -- #29
//│     in jump j$1(x$7) -- #28
//│   Cons => let x$8 = l$0.t -- #58
//│     in let x$9 = l$0.h -- #57
//│       in case x$8 of -- #56
//│         Nil => let x$11 = Some(x$9) -- #42
//│           in jump j$2(x$11) -- #41
//│         Cons => let x$12 = x$8.t -- #55
//│           in let x$13 = x$8.h -- #54
//│             in let* (x$14) = last(x$8) -- #53
//│               in jump j$2(x$14) -- #52
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #26
//│ )
//│ Def(4, j$2, [x$10],
//│ S: None,
//│ 1, 
//│ jump j$1(x$10) -- #36
//│ )
//│ Def(5, main, [],
//│ S: None,
//│ 1, 
//│ let x$15 = Nil() -- #84
//│   in let x$16 = Cons(2,x$15) -- #83
//│     in let x$17 = Cons(1,x$16) -- #82
//│       in let x$18 = Cons(0,x$17) -- #81
//│         in let* (x$19) = last(x$18) -- #80
//│           in x$19 -- #79
//│ )
//│ },
//│ let* (x$20) = main() -- #88
//│   in x$20 -- #87)
//│ 
//│ Promoted ------------------------------------
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, list_of_n, [n$0],
//│ S: None,
//│ 1, 
//│ let x$0 = ==(n$0,0) -- #24
//│   in if x$0 -- #23
//│     true => let x$2 = Nil() -- #6
//│       in jump j$0(x$2) -- #5
//│     false => let x$3 = -(n$0,1) -- #22
//│       in let* (x$4) = list_of_n(x$3) -- #21
//│         in let x$5 = Cons(0,x$4) -- #20
//│           in jump j$0(x$5) -- #19
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #3
//│ )
//│ Def(2, last, [l$0],
//│ S: None,
//│ 1, 
//│ case l$0 of -- #59
//│   Nil => let x$7 = None() -- #29
//│     in jump j$1(x$7) -- #28
//│   Cons => let x$8 = l$0.t -- #58
//│     in let x$9 = l$0.h -- #57
//│       in case x$8 of -- #56
//│         Nil => let x$11 = Some(x$9) -- #42
//│           in jump j$2(x$11) -- #41
//│         Cons => let x$12 = x$8.t -- #55
//│           in let x$13 = x$8.h -- #54
//│             in let* (x$14) = last(x$8) -- #53
//│               in jump j$2(x$14) -- #52
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #26
//│ )
//│ Def(4, j$2, [x$10],
//│ S: None,
//│ 1, 
//│ jump j$1(x$10) -- #36
//│ )
//│ Def(5, main, [],
//│ S: None,
//│ 1, 
//│ let x$15 = Nil() -- #84
//│   in let x$16 = Cons(2,x$15) -- #83
//│     in let x$17 = Cons(1,x$16) -- #82
//│       in let x$18 = Cons(0,x$17) -- #81
//│         in let* (x$19) = last(x$18) -- #80
//│           in x$19 -- #79
//│ )
//│ },
//│ let* (x$20) = main() -- #88
//│   in x$20 -- #87)
//│ 
//│ Interpreted ------------------------------
//│ Some(2)

:GraphInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun foo() = odd(S(S(S(O))))
foo()
//│ |#class| |True|↵|#class| |False|↵|#class| |S|(|s|)|↵|#class| |O|↵|#fun| |odd|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |False|↵|S|(|s|)| |#then| |even|(|s|)|←|←|↵|#fun| |even|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |True|↵|S|(|s|)| |#then| |odd|(|s|)|←|←|↵|#fun| |foo|(||)| |#=| |odd|(|S|(|S|(|S|(|O|)|)|)|)|↵|foo|(||)|
//│ Parsed: {class True {}; class False {}; class S(s,) {}; class O {}; fun odd = (x,) => {if x is ‹(O) then False; (S(s,)) then even(s,)›}; fun even = (x,) => {if x is ‹(O) then True; (S(s,)) then odd(s,)›}; fun foo = () => odd(S(S(S(O,),),),); foo()}
//│ 
//│ 
//│ GraphOpt:
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x$0],
//│ S: None,
//│ 1, 
//│ case x$0 of -- #15
//│   O => let x$2 = False() -- #4
//│     in jump j$0(x$2) -- #3
//│   S => let x$3 = x$0.s -- #14
//│     in let* (x$4) = even(x$3) -- #13
//│       in jump j$0(x$4) -- #12
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #1
//│ )
//│ Def(2, even, [x$5],
//│ S: None,
//│ 1, 
//│ case x$5 of -- #31
//│   O => let x$7 = True() -- #20
//│     in jump j$1(x$7) -- #19
//│   S => let x$8 = x$5.s -- #30
//│     in let* (x$9) = odd(x$8) -- #29
//│       in jump j$1(x$9) -- #28
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #17
//│ )
//│ Def(4, foo, [],
//│ S: None,
//│ 1, 
//│ let x$10 = O() -- #50
//│   in let x$11 = S(x$10) -- #49
//│     in let x$12 = S(x$11) -- #48
//│       in let x$13 = S(x$12) -- #47
//│         in let* (x$14) = odd(x$13) -- #46
//│           in x$14 -- #45
//│ )
//│ },
//│ let* (x$15) = foo() -- #54
//│   in x$15 -- #53)
//│ 
//│ Promoted ------------------------------------
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x$0],
//│ S: None,
//│ 1, 
//│ case x$0 of -- #15
//│   O => let x$2 = False() -- #4
//│     in jump j$0(x$2) -- #3
//│   S => let x$3 = x$0.s -- #14
//│     in let* (x$4) = even(x$3) -- #13
//│       in jump j$0(x$4) -- #12
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #1
//│ )
//│ Def(2, even, [x$5],
//│ S: None,
//│ 1, 
//│ case x$5 of -- #31
//│   O => let x$7 = True() -- #20
//│     in jump j$1(x$7) -- #19
//│   S => let x$8 = x$5.s -- #30
//│     in let* (x$9) = odd(x$8) -- #29
//│       in jump j$1(x$9) -- #28
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #17
//│ )
//│ Def(4, foo, [],
//│ S: None,
//│ 1, 
//│ let x$10 = O() -- #50
//│   in let x$11 = S(x$10) -- #49
//│     in let x$12 = S(x$11) -- #48
//│       in let x$13 = S(x$12) -- #47
//│         in let* (x$14) = odd(x$13) -- #46
//│           in x$14 -- #45
//│ )
//│ },
//│ let* (x$15) = foo() -- #54
//│   in x$15 -- #53)
//│ 
//│ Interpreted ------------------------------
//│ True()

:GraphInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun nat(n) = if n > 0 then S(nat(n - 1)) else O
fun foo() = odd(nat(10))
foo()
//│ |#class| |True|↵|#class| |False|↵|#class| |S|(|s|)|↵|#class| |O|↵|#fun| |odd|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |False|↵|S|(|s|)| |#then| |even|(|s|)|←|←|↵|#fun| |even|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |True|↵|S|(|s|)| |#then| |odd|(|s|)|←|←|↵|#fun| |nat|(|n|)| |#=| |#if| |n| |>| |0| |#then| |S|(|nat|(|n| |-| |1|)|)| |#else| |O|↵|#fun| |foo|(||)| |#=| |odd|(|nat|(|10|)|)|↵|foo|(||)|
//│ Parsed: {class True {}; class False {}; class S(s,) {}; class O {}; fun odd = (x,) => {if x is ‹(O) then False; (S(s,)) then even(s,)›}; fun even = (x,) => {if x is ‹(O) then True; (S(s,)) then odd(s,)›}; fun nat = (n,) => if (>(n,)(0,)) then S(nat(-(n,)(1,),),) else O; fun foo = () => odd(nat(10,),); foo()}
//│ 
//│ 
//│ GraphOpt:
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x$0],
//│ S: None,
//│ 1, 
//│ case x$0 of -- #15
//│   O => let x$2 = False() -- #4
//│     in jump j$0(x$2) -- #3
//│   S => let x$3 = x$0.s -- #14
//│     in let* (x$4) = even(x$3) -- #13
//│       in jump j$0(x$4) -- #12
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #1
//│ )
//│ Def(2, even, [x$5],
//│ S: None,
//│ 1, 
//│ case x$5 of -- #31
//│   O => let x$7 = True() -- #20
//│     in jump j$1(x$7) -- #19
//│   S => let x$8 = x$5.s -- #30
//│     in let* (x$9) = odd(x$8) -- #29
//│       in jump j$1(x$9) -- #28
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #17
//│ )
//│ Def(4, nat, [n$0],
//│ S: None,
//│ 1, 
//│ let x$10 = >(n$0,0) -- #54
//│   in if x$10 -- #53
//│     true => let x$12 = -(n$0,1) -- #49
//│       in let* (x$13) = nat(x$12) -- #48
//│         in let x$14 = S(x$13) -- #47
//│           in jump j$2(x$14) -- #46
//│     false => let x$15 = O() -- #52
//│       in jump j$2(x$15) -- #51
//│ )
//│ Def(5, j$2, [x$11],
//│ S: None,
//│ 1, 
//│ x$11 -- #35
//│ )
//│ Def(6, foo, [],
//│ S: None,
//│ 1, 
//│ let* (x$16) = nat(10) -- #65
//│   in let* (x$17) = odd(x$16) -- #64
//│     in x$17 -- #63
//│ )
//│ },
//│ let* (x$18) = foo() -- #69
//│   in x$18 -- #68)
//│ 
//│ Promoted ------------------------------------
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x$0],
//│ S: None,
//│ 1, 
//│ case x$0 of -- #15
//│   O => let x$2 = False() -- #4
//│     in jump j$0(x$2) -- #3
//│   S => let x$3 = x$0.s -- #14
//│     in let* (x$4) = even(x$3) -- #13
//│       in jump j$0(x$4) -- #12
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #1
//│ )
//│ Def(2, even, [x$5],
//│ S: None,
//│ 1, 
//│ case x$5 of -- #31
//│   O => let x$7 = True() -- #20
//│     in jump j$1(x$7) -- #19
//│   S => let x$8 = x$5.s -- #30
//│     in let* (x$9) = odd(x$8) -- #29
//│       in jump j$1(x$9) -- #28
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #17
//│ )
//│ Def(4, nat, [n$0],
//│ S: None,
//│ 1, 
//│ let x$10 = >(n$0,0) -- #54
//│   in if x$10 -- #53
//│     true => let x$12 = -(n$0,1) -- #49
//│       in let* (x$13) = nat(x$12) -- #48
//│         in let x$14 = S(x$13) -- #47
//│           in jump j$2(x$14) -- #46
//│     false => let x$15 = O() -- #52
//│       in jump j$2(x$15) -- #51
//│ )
//│ Def(5, j$2, [x$11],
//│ S: None,
//│ 1, 
//│ x$11 -- #35
//│ )
//│ Def(6, foo, [],
//│ S: None,
//│ 1, 
//│ let* (x$16) = nat(10) -- #65
//│   in let* (x$17) = odd(x$16) -- #64
//│     in x$17 -- #63
//│ )
//│ },
//│ let* (x$18) = foo() -- #69
//│   in x$18 -- #68)
//│ 
//│ Interpreted ------------------------------
//│ False()

:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun list_of_n(n) =
  if n == 0 then Nil else Cons(0, list_of_n(n - 1))
fun head(l) =
  if l is
    Nil then None
    Cons(h, t) then Some(h)
fun is_none(o) =
  if o is
    None then True
    Some(x) then False
fun is_nil(l) =
  is_none(head(l))
fun main() =
  is_nil(Cons(0, Cons(1, Cons(2, Nil))))
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |Cons|(|h|,| |t|)|↵|#class| |Nil|↵|#class| |Some|(|x|)|↵|#class| |None|↵|#fun| |list_of_n|(|n|)| |#=|→|#if| |n| |==| |0| |#then| |Nil| |#else| |Cons|(|0|,| |list_of_n|(|n| |-| |1|)|)|←|↵|#fun| |head|(|l|)| |#=|→|#if| |l| |is|→|Nil| |#then| |None|↵|Cons|(|h|,| |t|)| |#then| |Some|(|h|)|←|←|↵|#fun| |is_none|(|o|)| |#=|→|#if| |o| |is|→|None| |#then| |True|↵|Some|(|x|)| |#then| |False|←|←|↵|#fun| |is_nil|(|l|)| |#=|→|is_none|(|head|(|l|)|)|←|↵|#fun| |main|(||)| |#=|→|is_nil|(|Cons|(|0|,| |Cons|(|1|,| |Cons|(|2|,| |Nil|)|)|)|)|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class Cons(h, t,) {}; class Nil {}; class Some(x,) {}; class None {}; fun list_of_n = (n,) => {if (==(n,)(0,)) then Nil else Cons(0, list_of_n(-(n,)(1,),),)}; fun head = (l,) => {if l is ‹(Nil) then None; (Cons(h, t,)) then Some(h,)›}; fun is_none = (o,) => {if o is ‹(None) then True; (Some(x,)) then False›}; fun is_nil = (l,) => {is_none(head(l,),)}; fun main = () => {is_nil(Cons(0, Cons(1, Cons(2, Nil,),),),)}; main()}
//│ 
//│ 
//│ GraphOpt:
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, list_of_n, [n$0],
//│ S: None,
//│ 1, 
//│ let x$0 = ==(n$0,0) -- #24
//│   in if x$0 -- #23
//│     true => let x$2 = Nil() -- #6
//│       in jump j$0(x$2) -- #5
//│     false => let x$3 = -(n$0,1) -- #22
//│       in let* (x$4) = list_of_n(x$3) -- #21
//│         in let x$5 = Cons(0,x$4) -- #20
//│           in jump j$0(x$5) -- #19
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #3
//│ )
//│ Def(2, head, [l$0],
//│ S: None,
//│ 1, 
//│ case l$0 of -- #42
//│   Nil => let x$7 = None() -- #29
//│     in jump j$1(x$7) -- #28
//│   Cons => let x$8 = l$0.t -- #41
//│     in let x$9 = l$0.h -- #40
//│       in let x$10 = Some(x$9) -- #39
//│         in jump j$1(x$10) -- #38
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #26
//│ )
//│ Def(4, is_none, [o$0],
//│ S: None,
//│ 1, 
//│ case o$0 of -- #54
//│   None => let x$12 = True() -- #47
//│     in jump j$2(x$12) -- #46
//│   Some => let x$13 = o$0.x -- #53
//│     in let x$14 = False() -- #52
//│       in jump j$2(x$14) -- #51
//│ )
//│ Def(5, j$2, [x$11],
//│ S: None,
//│ 1, 
//│ x$11 -- #44
//│ )
//│ Def(6, is_nil, [l$1],
//│ S: None,
//│ 1, 
//│ let* (x$15) = head(l$1) -- #65
//│   in let* (x$16) = is_none(x$15) -- #64
//│     in x$16 -- #63
//│ )
//│ Def(7, main, [],
//│ S: None,
//│ 1, 
//│ let x$17 = Nil() -- #90
//│   in let x$18 = Cons(2,x$17) -- #89
//│     in let x$19 = Cons(1,x$18) -- #88
//│       in let x$20 = Cons(0,x$19) -- #87
//│         in let* (x$21) = is_nil(x$20) -- #86
//│           in x$21 -- #85
//│ )
//│ },
//│ let* (x$22) = main() -- #94
//│   in x$22 -- #93)
//│ 
//│ Promoted ------------------------------------
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, list_of_n, [n$0],
//│ S: None,
//│ 1, 
//│ let x$0 = ==(n$0,0) -- #24
//│   in if x$0 -- #23
//│     true => let x$2 = Nil() -- #6
//│       in jump j$0(x$2) -- #5
//│     false => let x$3 = -(n$0,1) -- #22
//│       in let* (x$4) = list_of_n(x$3) -- #21
//│         in let x$5 = Cons(0,x$4) -- #20
//│           in jump j$0(x$5) -- #19
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #3
//│ )
//│ Def(2, head, [l$0],
//│ S: None,
//│ 1, 
//│ case l$0 of -- #42
//│   Nil => let x$7 = None() -- #29
//│     in jump j$1(x$7) -- #28
//│   Cons => let x$8 = l$0.t -- #41
//│     in let x$9 = l$0.h -- #40
//│       in let x$10 = Some(x$9) -- #39
//│         in jump j$1(x$10) -- #38
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #26
//│ )
//│ Def(4, is_none, [o$0],
//│ S: None,
//│ 1, 
//│ case o$0 of -- #54
//│   None => let x$12 = True() -- #47
//│     in jump j$2(x$12) -- #46
//│   Some => let x$13 = o$0.x -- #53
//│     in let x$14 = False() -- #52
//│       in jump j$2(x$14) -- #51
//│ )
//│ Def(5, j$2, [x$11],
//│ S: None,
//│ 1, 
//│ x$11 -- #44
//│ )
//│ Def(6, is_nil, [l$1],
//│ S: None,
//│ 1, 
//│ let* (x$15) = head(l$1) -- #65
//│   in let* (x$16) = is_none(x$15) -- #64
//│     in x$16 -- #63
//│ )
//│ Def(7, main, [],
//│ S: None,
//│ 1, 
//│ let x$17 = Nil() -- #90
//│   in let x$18 = Cons(2,x$17) -- #89
//│     in let x$19 = Cons(1,x$18) -- #88
//│       in let x$20 = Cons(0,x$19) -- #87
//│         in let* (x$21) = is_nil(x$20) -- #86
//│           in x$21 -- #85
//│ )
//│ },
//│ let* (x$22) = main() -- #94
//│   in x$22 -- #93)
//│ 
//│ Interpreted ------------------------------
//│ False()

:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun list_of_n(n) =
  if n == 0 then Nil else Cons(0, list_of_n(n - 1))
fun head(l) =
  if l is
    Nil then None
    Cons(h, t) then Some(h)
fun is_none(o) =
  if o is
    None then True
    Some(x) then False
fun is_nil(l) =
  is_none(head(l))
fun main() =
  is_nil(list_of_n(10))
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |Cons|(|h|,| |t|)|↵|#class| |Nil|↵|#class| |Some|(|x|)|↵|#class| |None|↵|#fun| |list_of_n|(|n|)| |#=|→|#if| |n| |==| |0| |#then| |Nil| |#else| |Cons|(|0|,| |list_of_n|(|n| |-| |1|)|)|←|↵|#fun| |head|(|l|)| |#=|→|#if| |l| |is|→|Nil| |#then| |None|↵|Cons|(|h|,| |t|)| |#then| |Some|(|h|)|←|←|↵|#fun| |is_none|(|o|)| |#=|→|#if| |o| |is|→|None| |#then| |True|↵|Some|(|x|)| |#then| |False|←|←|↵|#fun| |is_nil|(|l|)| |#=|→|is_none|(|head|(|l|)|)|←|↵|#fun| |main|(||)| |#=|→|is_nil|(|list_of_n|(|10|)|)|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class Cons(h, t,) {}; class Nil {}; class Some(x,) {}; class None {}; fun list_of_n = (n,) => {if (==(n,)(0,)) then Nil else Cons(0, list_of_n(-(n,)(1,),),)}; fun head = (l,) => {if l is ‹(Nil) then None; (Cons(h, t,)) then Some(h,)›}; fun is_none = (o,) => {if o is ‹(None) then True; (Some(x,)) then False›}; fun is_nil = (l,) => {is_none(head(l,),)}; fun main = () => {is_nil(list_of_n(10,),)}; main()}
//│ 
//│ 
//│ GraphOpt:
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, list_of_n, [n$0],
//│ S: None,
//│ 1, 
//│ let x$0 = ==(n$0,0) -- #24
//│   in if x$0 -- #23
//│     true => let x$2 = Nil() -- #6
//│       in jump j$0(x$2) -- #5
//│     false => let x$3 = -(n$0,1) -- #22
//│       in let* (x$4) = list_of_n(x$3) -- #21
//│         in let x$5 = Cons(0,x$4) -- #20
//│           in jump j$0(x$5) -- #19
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #3
//│ )
//│ Def(2, head, [l$0],
//│ S: None,
//│ 1, 
//│ case l$0 of -- #42
//│   Nil => let x$7 = None() -- #29
//│     in jump j$1(x$7) -- #28
//│   Cons => let x$8 = l$0.t -- #41
//│     in let x$9 = l$0.h -- #40
//│       in let x$10 = Some(x$9) -- #39
//│         in jump j$1(x$10) -- #38
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #26
//│ )
//│ Def(4, is_none, [o$0],
//│ S: None,
//│ 1, 
//│ case o$0 of -- #54
//│   None => let x$12 = True() -- #47
//│     in jump j$2(x$12) -- #46
//│   Some => let x$13 = o$0.x -- #53
//│     in let x$14 = False() -- #52
//│       in jump j$2(x$14) -- #51
//│ )
//│ Def(5, j$2, [x$11],
//│ S: None,
//│ 1, 
//│ x$11 -- #44
//│ )
//│ Def(6, is_nil, [l$1],
//│ S: None,
//│ 1, 
//│ let* (x$15) = head(l$1) -- #65
//│   in let* (x$16) = is_none(x$15) -- #64
//│     in x$16 -- #63
//│ )
//│ Def(7, main, [],
//│ S: None,
//│ 1, 
//│ let* (x$17) = list_of_n(10) -- #76
//│   in let* (x$18) = is_nil(x$17) -- #75
//│     in x$18 -- #74
//│ )
//│ },
//│ let* (x$19) = main() -- #80
//│   in x$19 -- #79)
//│ 
//│ Promoted ------------------------------------
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, list_of_n, [n$0],
//│ S: None,
//│ 1, 
//│ let x$0 = ==(n$0,0) -- #24
//│   in if x$0 -- #23
//│     true => let x$2 = Nil() -- #6
//│       in jump j$0(x$2) -- #5
//│     false => let x$3 = -(n$0,1) -- #22
//│       in let* (x$4) = list_of_n(x$3) -- #21
//│         in let x$5 = Cons(0,x$4) -- #20
//│           in jump j$0(x$5) -- #19
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #3
//│ )
//│ Def(2, head, [l$0],
//│ S: None,
//│ 1, 
//│ case l$0 of -- #42
//│   Nil => let x$7 = None() -- #29
//│     in jump j$1(x$7) -- #28
//│   Cons => let x$8 = l$0.t -- #41
//│     in let x$9 = l$0.h -- #40
//│       in let x$10 = Some(x$9) -- #39
//│         in jump j$1(x$10) -- #38
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #26
//│ )
//│ Def(4, is_none, [o$0],
//│ S: None,
//│ 1, 
//│ case o$0 of -- #54
//│   None => let x$12 = True() -- #47
//│     in jump j$2(x$12) -- #46
//│   Some => let x$13 = o$0.x -- #53
//│     in let x$14 = False() -- #52
//│       in jump j$2(x$14) -- #51
//│ )
//│ Def(5, j$2, [x$11],
//│ S: None,
//│ 1, 
//│ x$11 -- #44
//│ )
//│ Def(6, is_nil, [l$1],
//│ S: None,
//│ 1, 
//│ let* (x$15) = head(l$1) -- #65
//│   in let* (x$16) = is_none(x$15) -- #64
//│     in x$16 -- #63
//│ )
//│ Def(7, main, [],
//│ S: None,
//│ 1, 
//│ let* (x$17) = list_of_n(10) -- #76
//│   in let* (x$18) = is_nil(x$17) -- #75
//│     in x$18 -- #74
//│ )
//│ },
//│ let* (x$19) = main() -- #80
//│   in x$19 -- #79)
//│ 
//│ Interpreted ------------------------------
//│ False()

