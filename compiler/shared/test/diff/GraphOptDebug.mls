:NewParser
:ParseOnly


:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun mk_list(n) =
  if n == 0 then Nil else Cons(n, mk_list(n - 1))
fun head_opt(l) =
  if l is
    Nil then None
    Cons(h, t) then Some(h)
fun is_none(o) =
  if o is
    None then True
    Some(x) then False
fun is_empty(l) =
  is_none(head_opt(l))
fun main() =
  is_empty(mk_list(10))
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |Cons|(|h|,| |t|)|↵|#class| |Nil|↵|#class| |Some|(|x|)|↵|#class| |None|↵|#fun| |mk_list|(|n|)| |#=|→|#if| |n| |==| |0| |#then| |Nil| |#else| |Cons|(|n|,| |mk_list|(|n| |-| |1|)|)|←|↵|#fun| |head_opt|(|l|)| |#=|→|#if| |l| |is|→|Nil| |#then| |None|↵|Cons|(|h|,| |t|)| |#then| |Some|(|h|)|←|←|↵|#fun| |is_none|(|o|)| |#=|→|#if| |o| |is|→|None| |#then| |True|↵|Some|(|x|)| |#then| |False|←|←|↵|#fun| |is_empty|(|l|)| |#=|→|is_none|(|head_opt|(|l|)|)|←|↵|#fun| |main|(||)| |#=|→|is_empty|(|mk_list|(|10|)|)|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class Cons(h, t,) {}; class Nil {}; class Some(x,) {}; class None {}; fun mk_list = (n,) => {if (==(n,)(0,)) then Nil else Cons(n, mk_list(-(n,)(1,),),)}; fun head_opt = (l,) => {if l is ‹(Nil) then None; (Cons(h, t,)) then Some(h,)›}; fun is_none = (o,) => {if o is ‹(None) then True; (Some(x,)) then False›}; fun is_empty = (l,) => {is_none(head_opt(l,),)}; fun main = () => {is_empty(mk_list(10,),)}; main()}
//│ 
//│ 
//│ GraphOpt:
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n$0],
//│ S: None,
//│ 1, 
//│ let x$0 = ==(n$0,0) -- #24
//│   in if x$0 -- #23
//│     true => let x$2 = Nil() -- #6
//│       in jump j$0(x$2) -- #5
//│     false => let x$3 = -(n$0,1) -- #22
//│       in let* (x$4) = mk_list(x$3) -- #21
//│         in let x$5 = Cons(n$0,x$4) -- #20
//│           in jump j$0(x$5) -- #19
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #3
//│ )
//│ Def(2, head_opt, [l$0],
//│ S: None,
//│ 1, 
//│ case l$0 of -- #42
//│   Nil => let x$7 = None() -- #29
//│     in jump j$1(x$7) -- #28
//│   Cons => let x$8 = l$0.t -- #41
//│     in let x$9 = l$0.h -- #40
//│       in let x$10 = Some(x$9) -- #39
//│         in jump j$1(x$10) -- #38
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #26
//│ )
//│ Def(4, is_none, [o$0],
//│ S: None,
//│ 1, 
//│ case o$0 of -- #54
//│   None => let x$12 = True() -- #47
//│     in jump j$2(x$12) -- #46
//│   Some => let x$13 = o$0.x -- #53
//│     in let x$14 = False() -- #52
//│       in jump j$2(x$14) -- #51
//│ )
//│ Def(5, j$2, [x$11],
//│ S: None,
//│ 1, 
//│ x$11 -- #44
//│ )
//│ Def(6, is_empty, [l$1],
//│ S: None,
//│ 1, 
//│ let* (x$15) = head_opt(l$1) -- #65
//│   in let* (x$16) = is_none(x$15) -- #64
//│     in x$16 -- #63
//│ )
//│ Def(7, main, [],
//│ S: None,
//│ 1, 
//│ let* (x$17) = mk_list(10) -- #76
//│   in let* (x$18) = is_empty(x$17) -- #75
//│     in x$18 -- #74
//│ )
//│ },
//│ let* (x$19) = main() -- #80
//│   in x$19 -- #79)
//│ 
//│ Promoted ------------------------------------
//│ Program({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n$0],
//│ S: None,
//│ 1, 
//│ let x$0 = ==(n$0,0) -- #24
//│   in if x$0 -- #23
//│     true => let x$2 = Nil() -- #6
//│       in jump j$0(x$2) -- #5
//│     false => let x$3 = -(n$0,1) -- #22
//│       in let* (x$4) = mk_list(x$3) -- #21
//│         in let x$5 = Cons(n$0,x$4) -- #20
//│           in jump j$0(x$5) -- #19
//│ )
//│ Def(1, j$0, [x$1],
//│ S: None,
//│ 1, 
//│ x$1 -- #3
//│ )
//│ Def(2, head_opt, [l$0],
//│ S: None,
//│ 1, 
//│ case l$0 of -- #42
//│   Nil => let x$7 = None() -- #29
//│     in jump j$1(x$7) -- #28
//│   Cons => let x$8 = l$0.t -- #41
//│     in let x$9 = l$0.h -- #40
//│       in let x$10 = Some(x$9) -- #39
//│         in jump j$1(x$10) -- #38
//│ )
//│ Def(3, j$1, [x$6],
//│ S: None,
//│ 1, 
//│ x$6 -- #26
//│ )
//│ Def(4, is_none, [o$0],
//│ S: None,
//│ 1, 
//│ case o$0 of -- #54
//│   None => let x$12 = True() -- #47
//│     in jump j$2(x$12) -- #46
//│   Some => let x$13 = o$0.x -- #53
//│     in let x$14 = False() -- #52
//│       in jump j$2(x$14) -- #51
//│ )
//│ Def(5, j$2, [x$11],
//│ S: None,
//│ 1, 
//│ x$11 -- #44
//│ )
//│ Def(6, is_empty, [l$1],
//│ S: None,
//│ 1, 
//│ let* (x$15) = head_opt(l$1) -- #65
//│   in let* (x$16) = is_none(x$15) -- #64
//│     in x$16 -- #63
//│ )
//│ Def(7, main, [],
//│ S: None,
//│ 1, 
//│ let* (x$17) = mk_list(10) -- #76
//│   in let* (x$18) = is_empty(x$17) -- #75
//│     in x$18 -- #74
//│ )
//│ },
//│ let* (x$19) = main() -- #80
//│   in x$19 -- #79)
//│ 
//│ Interpreted ------------------------------
//│ False()

