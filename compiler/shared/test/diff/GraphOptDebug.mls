:NewParser
:ParseOnly

:GOInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun foo() = odd(S(S(S(O))))
foo()
//│ |#class| |True|↵|#class| |False|↵|#class| |S|(|s|)|↵|#class| |O|↵|#fun| |odd|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |False|↵|S|(|s|)| |#then| |even|(|s|)|←|←|↵|#fun| |even|(|x|)| |#=|→|#if| |x| |is|→|O| |#then| |True|↵|S|(|s|)| |#then| |odd|(|s|)|←|←|↵|#fun| |foo|(||)| |#=| |odd|(|S|(|S|(|S|(|O|)|)|)|)|↵|foo|(||)|
//│ Parsed: {class True {}; class False {}; class S(s,) {}; class O {}; fun odd = (x,) => {if x is ‹(O) then False; (S(s,)) then even(s,)›}; fun even = (x,) => {if x is ‹(O) then True; (S(s,)) then odd(s,)›}; fun foo = () => odd(S(S(S(O,),),),); foo()}
//│ Parsed:
//│ TypingUnit(NuTypeDef(class, True, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, False, (), Tup(), (), None, None, TypingUnit()), NuTypeDef(class, S, (), Tup(_: Var(s)), (), None, None, TypingUnit()), NuTypeDef(class, O, (), Tup(), (), None, None, TypingUnit()), NuFunDef(None, odd, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, even, None, [], Lam(Tup(_: Var(x)), Blk(...))), NuFunDef(None, foo, None, [], Lam(Tup(), App(Var(odd), Tup(_: App(Var(S), Tup(_: App(Var(S), Tup(_: App(Var(S), Tup(_: Var(O))))))))))), App(Var(foo), Tup()))
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%0(x%4) = x%4
//│   in case x%0 of
//│     O => let x%1 = False()
//│       in jump j%0(x%1)
//│     S => let x%2 = x%0.s
//│       in let* (x%3) = even(x%2)
//│         in jump j%0(x%3)
//│ )
//│ Def(1, even, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let join j%1(x%9) = x%9
//│   in case x%5 of
//│     O => let x%6 = True()
//│       in jump j%1(x%6)
//│     S => let x%7 = x%5.s
//│       in let* (x%8) = odd(x%7)
//│         in jump j%1(x%8)
//│ )
//│ Def(2, foo, [], [{}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let x%13 = S(x%12)
//│         in let* (x%14) = odd(x%13)
//│           in x%14
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let x%13 = S(x%12)
//│         in let* (x%14) = odd(x%13)
//│           in x%14
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let* (x%14) = odd$D%1$S%0(x%12)
//│         in x%14
//│ )
//│ Def(8, odd$D%1$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let x%12 = S(x%11)
//│       in let* (x%14) = odd$D%1$S%0$C%0(x%12)
//│         in x%14
//│ )
//│ Def(12, odd$D%1$S%0$C%0, [x%0_s], [{ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ let x%19 = x%0_s.s
//│   in let* (x%3) = even$D%1$S%0(x%19)
//│     in x%3
//│ )
//│ Def(13, even$D%1$S%0, [x%5_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%8) = odd(x%5_s)
//│   in x%8
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let* (x%14) = odd$D%1$S%0$C%0$S%0(x%11)
//│       in x%14
//│ )
//│ Def(13, even$D%1$S%0, [x%5_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%8) = odd(x%5_s)
//│   in x%8
//│ )
//│ Def(14, odd$D%1$S%0$C%0$S%0, [x%0_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ let* (x%3) = even$D%1$S%0(x%0_s_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let* (x%14) = odd$D%1$S%0$C%0$S%0$C%0(x%11)
//│       in x%14
//│ )
//│ Def(13, even$D%1$S%0, [x%5_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ let* (x%8) = odd(x%5_s)
//│   in x%8
//│ )
//│ Def(18, odd$D%1$S%0$C%0$S%0$C%0, [x%0_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ let* (x%3) = even$D%1$S%0(x%0_s_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let* (x%14) = odd$D%1$S%0$C%0$S%0$C%0$C%0(x%11)
//│       in x%14
//│ )
//│ Def(22, even$D%1$S%0$C%0, [x%5_s], [{ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ let x%22 = x%5_s.s
//│   in let* (x%8) = odd$D%5$S%0(x%22)
//│     in x%8
//│ )
//│ Def(23, odd$D%1$S%0$C%0$S%0$C%0$C%0, [x%0_s_s], [{EDirect,ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ let* (x%3) = even$D%1$S%0$C%0(x%0_s_s)
//│   in x%3
//│ )
//│ Def(24, odd$D%5$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let x%11 = S(x%10)
//│     in let* (x%14) = odd$D%1$S%0$C%0$S%0$C%0$C%0(x%11)
//│       in x%14
//│ )
//│ Def(23, odd$D%1$S%0$C%0$S%0$C%0$C%0, [x%0_s_s], [{ESelect(s)}],
//│ S: Some([Some(ICtor(S))]),
//│ I: [[Some(ICtor(S))]],
//│ [None], 1, 
//│ let x%23 = x%0_s_s.s
//│   in let* (x%3) = even$D%1$S%0$C%0$S%0(x%23)
//│     in x%3
//│ )
//│ Def(24, odd$D%5$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(25, even$D%1$S%0$C%0$S%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%8) = odd$D%5$S%0(x%5_s_s)
//│   in x%8
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let* (x%14) = odd$D%1$S%0$C%0$S%0$C%0$C%0$S%0(x%10)
//│     in x%14
//│ )
//│ Def(24, odd$D%5$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(25, even$D%1$S%0$C%0$S%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%8) = odd$D%5$S%0(x%5_s_s)
//│   in x%8
//│ )
//│ Def(26, odd$D%1$S%0$C%0$S%0$C%0$C%0$S%0, [x%0_s_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [None], 1, 
//│ let* (x%3) = even$D%1$S%0$C%0$S%0(x%0_s_s_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let* (x%14) = odd$D%1$S%0$C%0$S%0$C%0$C%0$S%0$C%0(x%10)
//│     in x%14
//│ )
//│ Def(24, odd$D%5$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(25, even$D%1$S%0$C%0$S%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [None], 1, 
//│ let* (x%8) = odd$D%5$S%0(x%5_s_s)
//│   in x%8
//│ )
//│ Def(30, odd$D%1$S%0$C%0$S%0$C%0$C%0$S%0$C%0, [x%0_s_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [None], 1, 
//│ let* (x%3) = even$D%1$S%0$C%0$S%0(x%0_s_s_s)
//│   in x%3
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(0, odd, [x%0], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%0 of
//│   O => let x%1 = False()
//│     in x%1
//│   S => let x%2 = x%0.s
//│     in let* (x%3) = even(x%2)
//│       in x%3
//│ )
//│ Def(1, even, [x%5], [{EDestruct,EDirect,ESelect(s)}],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ case x%5 of
//│   O => let x%6 = True()
//│     in x%6
//│   S => let x%7 = x%5.s
//│     in let* (x%8) = odd(x%7)
//│       in x%8
//│ )
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [None], 1, 
//│ let x%10 = O()
//│   in let* (x%14) = odd$D%1$S%0$C%0$S%0$C%0$C%0$S%0$C%0$C%0(x%10)
//│     in x%14
//│ )
//│ Def(24, odd$D%5$S%0, [x%0_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: None,
//│ I: [[Some(ICtor(O))]],
//│ [None], 1, 
//│ let* (x%3) = even(x%0_s)
//│   in x%3
//│ )
//│ Def(34, odd$D%1$S%0$C%0$S%0$C%0$C%0$S%0$C%0$C%0, [x%0_s_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [None], 1, 
//│ let* (x%3) = even$D%1$S%0$C%0$S%0$C%0(x%0_s_s_s)
//│   in x%3
//│ )
//│ Def(35, even$D%1$S%0$C%0$S%0$C%0, [x%5_s_s], [{EDirect,EIndirectDestruct,ESelect(s)}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [None], 1, 
//│ let* (x%8) = odd$D%5$S%0(x%5_s_s)
//│   in x%8
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, S, [s]),ClassInfo(3, O, [])}, {
//│ Def(2, foo, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(True))], 1, 
//│ let x%10 = O()
//│   in let* (x%14) = odd$D%1$S%0$C%0$S%0$C%0$C%0$S%0$C%0$C%0$C%0(x%10)
//│     in x%14
//│ )
//│ Def(37, even$D%6, [], [],
//│ S: None,
//│ I: [],
//│ [Some(ICtor(True))], 1, 
//│ let x%6 = True()
//│   in x%6
//│ )
//│ Def(39, odd$D%5$S%0$C%0, [x%0_s], [{}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(ICtor(True))], 1, 
//│ let* (x%3) = even$D%6()
//│   in x%3
//│ )
//│ Def(40, odd$D%1$S%0$C%0$S%0$C%0$C%0$S%0$C%0$C%0$C%0, [x%0_s_s_s], [{EDirect}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(ICtor(True))], 1, 
//│ let* (x%3) = even$D%1$S%0$C%0$S%0$C%0$C%0(x%0_s_s_s)
//│   in x%3
//│ )
//│ Def(41, even$D%1$S%0$C%0$S%0$C%0$C%0, [x%5_s_s], [{EDirect}],
//│ S: Some([Some(ICtor(O))]),
//│ I: [[Some(ICtor(O))]],
//│ [Some(ICtor(True))], 1, 
//│ let* (x%8) = odd$D%5$S%0$C%0(x%5_s_s)
//│   in x%8
//│ )
//│ },
//│ let* (x%15) = foo()
//│   in x%15)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ True()
//│ 
//│ 
//│ Fuel used: 11
