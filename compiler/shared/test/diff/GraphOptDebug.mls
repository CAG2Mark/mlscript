:NewParser
:ParseOnly


:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun mk_list(n) =
  if n == 0 then Nil else Cons(n, mk_list(n - 1))
fun head_opt(l) =
  if l is
    Nil then None
    Cons(h, t) then Some(h)
fun is_none(o) =
  if o is
    None then True
    Some(x) then False
fun is_empty(l) =
  is_none(head_opt(l))
fun main() =
  is_empty(mk_list(10))
main()
//│ |#class| |True|↵|#class| |False|↵|#class| |Cons|(|h|,| |t|)|↵|#class| |Nil|↵|#class| |Some|(|x|)|↵|#class| |None|↵|#fun| |mk_list|(|n|)| |#=|→|#if| |n| |==| |0| |#then| |Nil| |#else| |Cons|(|n|,| |mk_list|(|n| |-| |1|)|)|←|↵|#fun| |head_opt|(|l|)| |#=|→|#if| |l| |is|→|Nil| |#then| |None|↵|Cons|(|h|,| |t|)| |#then| |Some|(|h|)|←|←|↵|#fun| |is_none|(|o|)| |#=|→|#if| |o| |is|→|None| |#then| |True|↵|Some|(|x|)| |#then| |False|←|←|↵|#fun| |is_empty|(|l|)| |#=|→|is_none|(|head_opt|(|l|)|)|←|↵|#fun| |main|(||)| |#=|→|is_empty|(|mk_list|(|10|)|)|←|↵|main|(||)|
//│ Parsed: {class True {}; class False {}; class Cons(h, t,) {}; class Nil {}; class Some(x,) {}; class None {}; fun mk_list = (n,) => {if (==(n,)(0,)) then Nil else Cons(n, mk_list(-(n,)(1,),),)}; fun head_opt = (l,) => {if l is ‹(Nil) then None; (Cons(h, t,)) then Some(h,)›}; fun is_none = (o,) => {if o is ‹(None) then True; (Some(x,)) then False›}; fun is_empty = (l,) => {is_none(head_opt(l,),)}; fun main = () => {is_empty(mk_list(10,),)}; main()}
//│ 
//│ 
//│ GraphOpt:
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let x%0 = ==(n%0,0) -- #24
//│   in if x%0 -- #23
//│     true => let x%1 = Nil() -- #5
//│       in jump j%0(x%1) -- #4
//│     false => let x%2 = -(n%0,1) -- #21
//│       in let* (x%3) = mk_list(x%2) -- #20
//│         in let x%4 = Cons(n%0,x%3) -- #19
//│           in jump j%0(x%4) -- #18
//│ )
//│ Def(1, @join j%0, [x%5], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x%5
//│ )
//│ Def(2, head_opt, [l%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case l%0 of -- #42
//│   Nil => let x%6 = None() -- #28
//│     in jump j%1(x%6) -- #27
//│   Cons => let x%7 = l%0.t -- #40
//│     in let x%8 = l%0.h -- #39
//│       in let x%9 = Some(x%8) -- #38
//│         in jump j%1(x%9) -- #37
//│ )
//│ Def(3, @join j%1, [x%10], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x%10
//│ )
//│ Def(4, is_none, [o%0], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ case o%0 of -- #54
//│   None => let x%11 = True() -- #46
//│     in jump j%2(x%11) -- #45
//│   Some => let x%12 = o%0.x -- #52
//│     in let x%13 = False() -- #51
//│       in jump j%2(x%13) -- #50
//│ )
//│ Def(5, @join j%2, [x%14], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ x%14
//│ )
//│ Def(6, is_empty, [l%1], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x%15) = head_opt(l%1) -- #65
//│   in let* (x%16) = is_none(x%15) -- #64
//│     in x%16
//│ )
//│ Def(7, main, [], [{}],
//│ S: None,
//│ I: [],
//│ R: [None],
//│ Rec: None,
//│ 1, 
//│ let* (x%17) = mk_list(10) -- #76
//│   in let* (x%18) = is_empty(x%17) -- #75
//│     in x%18
//│ )
//│ },
//│ let* (x%19) = main() -- #80
//│   in x%19)
//│ 
//│ Promoted ------------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n%0], [{<EDirect@mk_list:let x%0 = ...>,<EDirect@mk_list:let x%2 = ...>,<EDirect@mk_list:let x%4 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [Some(IMix(ICtor(Cons),ICtor(Nil)))],
//│ Rec: Some(4),
//│ 1, 
//│ let x%0 = ==(n%0,0) -- #24
//│   in if x%0 -- #23
//│     true => let x%1 = Nil() -- #5
//│       in x%1
//│     false => let x%2 = -(n%0,1) -- #21
//│       in let* (x%3) = mk_list(x%2) -- #x
//│         in let x%4 = Cons(n%0,x%3) -- #19
//│           in x%4
//│ )
//│ Def(2, head_opt, [l%0], [{<EDestruct@head_opt:case l%0 of ...>,<EDirect@head_opt:case l%0 of ...>,<ESelect(h)@head_opt:let x%8 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [Some(IMix(ICtor(None),ICtor(Some)))],
//│ Rec: None,
//│ 1, 
//│ case l%0 of -- #42
//│   Nil => let x%6 = None() -- #28
//│     in x%6
//│   Cons => let x%8 = l%0.h -- #39
//│     in let x%9 = Some(x%8) -- #38
//│       in x%9
//│ )
//│ Def(4, is_none, [o%0], [{<EDestruct@is_none:case o%0 of ...>,<EDirect@is_none:case o%0 of ...>}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(None),ICtor(Some)))]],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ case o%0 of -- #54
//│   None => let x%11 = True() -- #46
//│     in x%11
//│   Some => let x%13 = False() -- #51
//│     in x%13
//│ )
//│ Def(6, is_empty, [l%1], [{<EDirect@is_empty:let* (x%15) = head_opt ...>,<EIndirectDestruct@is_empty:let* (x%15) = head_opt ...>,<ESelect(h)@head_opt:let x%8 = ...>}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(Cons),ICtor(Nil)))]],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ let* (x%15) = head_opt(l%1) -- #x
//│   in let* (x%16) = is_none(x%15) -- #x
//│     in x%16
//│ )
//│ Def(7, main, [], [],
//│ S: None,
//│ I: [],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ let* (x%17) = mk_list(10) -- #x
//│   in let* (x%18) = is_empty(x%17) -- #x
//│     in x%18
//│ )
//│ },
//│ let* (x%19) = main() -- #80
//│   in x%19)
//│ 
//│ Interpreted ------------------------------
//│ False()
//│ 
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n%0], [{<EDirect@mk_list:let x%0 = ...>,<EDirect@mk_list:let x%2 = ...>,<EDirect@mk_list:let x%4 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [Some(IMix(ICtor(Cons),ICtor(Nil)))],
//│ Rec: Some(4),
//│ 1, 
//│ let x%0 = ==(n%0,0) -- #x
//│   in if x%0 -- #x
//│     true => let x%1 = Nil() -- #x
//│       in x%1
//│     false => let x%2 = -(n%0,1) -- #x
//│       in let* (x%3) = mk_list(x%2) -- #x
//│         in let x%4 = Cons(n%0,x%3) -- #x
//│           in x%4
//│ )
//│ Def(4, is_none, [o%0], [{<EDestruct@is_none:case o%0 of ...>,<EDirect@is_none:case o%0 of ...>}],
//│ S: None,
//│ I: [],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ case o%0 of -- #x
//│   None => let x%11 = True() -- #x
//│     in x%11
//│   Some => let x%13 = False() -- #x
//│     in x%13
//│ )
//│ Def(6, is_empty, [l%1], [{<EDestruct@is_empty:case l%1 of ...>,<EDirect@is_empty:case l%1 of ...>,<ESelect(h)@is_empty:let x%23 = ...>}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(Cons),ICtor(Nil)))]],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ case l%1 of -- #x
//│   Cons => let x%23 = l%1.h -- #x
//│     in let x%9 = Some(x%23) -- #93
//│       in jump is_empty$M%0(x%9) -- #x
//│   Nil => let x%6 = None() -- #x
//│     in jump is_empty$M%0(x%6) -- #x
//│ )
//│ Def(7, main, [], [],
//│ S: None,
//│ I: [],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ let* (x%17) = mk_list(10) -- #x
//│   in let* (x%18) = is_empty(x%17) -- #x
//│     in x%18
//│ )
//│ Def(14, @join is_empty$M%0, [x%15], [{<EDirect@is_empty$M%0:let* (x%16) = is_none ...>,<EIndirectDestruct@is_empty$M%0:let* (x%16) = is_none ...>}],
//│ S: None,
//│ I: [[Some(ICtor(Some))],[Some(ICtor(None))]],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ let* (x%16) = is_none(x%15) -- #x
//│   in x%16
//│ )
//│ },
//│ let* (x%19) = main() -- #x
//│   in x%19)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n%0], [{<EDirect@mk_list:let x%0 = ...>,<EDirect@mk_list:let x%2 = ...>,<EDirect@mk_list:let x%4 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [Some(IMix(ICtor(Cons),ICtor(Nil)))],
//│ Rec: Some(3),
//│ 1, 
//│ let x%0 = ==(n%0,0) -- #x
//│   in if x%0 -- #x
//│     true => let x%1 = Nil() -- #x
//│       in x%1
//│     false => let x%2 = -(n%0,1) -- #x
//│       in let* (x%3) = mk_list(x%2) -- #x
//│         in let x%4 = Cons(n%0,x%3) -- #x
//│           in x%4
//│ )
//│ Def(6, is_empty, [l%1], [{<EDestruct@is_empty:case l%1 of ...>,<EDirect@is_empty:case l%1 of ...>,<ESelect(h)@is_empty:let x%23 = ...>}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(Cons),ICtor(Nil)))]],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ case l%1 of -- #x
//│   Cons => let x%23 = l%1.h -- #x
//│     in let x%9 = Some(x%23) -- #x
//│       in jump is_empty$M%0(x%9) -- #x
//│   Nil => let x%6 = None() -- #x
//│     in jump is_empty$M%0(x%6) -- #x
//│ )
//│ Def(7, main, [], [],
//│ S: None,
//│ I: [],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ let* (x%17) = mk_list(10) -- #x
//│   in let* (x%18) = is_empty(x%17) -- #x
//│     in x%18
//│ )
//│ Def(14, @join is_empty$M%0, [x%15], [{<EDestruct@is_empty$M%0:case x%15 of ...>,<EDirect@is_empty$M%0:case x%15 of ...>}],
//│ S: None,
//│ I: [[Some(ICtor(Some))],[Some(ICtor(None))]],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ case x%15 of -- #x
//│   Some => let x%13 = False() -- #x
//│     in x%13
//│   None => let x%11 = True() -- #x
//│     in x%11
//│ )
//│ },
//│ let* (x%19) = main() -- #x
//│   in x%19)
//│ 
//│ Optimized ------------------------------
//│ GOProgram({ClassInfo(0, True, []),ClassInfo(1, False, []),ClassInfo(2, Cons, [h,t]),ClassInfo(3, Nil, []),ClassInfo(4, Some, [x]),ClassInfo(5, None, [])}, {
//│ Def(0, mk_list, [n%0], [{<EDirect@mk_list:let x%0 = ...>,<EDirect@mk_list:let x%2 = ...>,<EDirect@mk_list:let x%4 = ...>}],
//│ S: None,
//│ I: [],
//│ R: [Some(IMix(ICtor(Cons),ICtor(Nil)))],
//│ Rec: Some(2),
//│ 1, 
//│ let x%0 = ==(n%0,0) -- #x
//│   in if x%0 -- #x
//│     true => let x%1 = Nil() -- #x
//│       in x%1
//│     false => let x%2 = -(n%0,1) -- #x
//│       in let* (x%3) = mk_list(x%2) -- #x
//│         in let x%4 = Cons(n%0,x%3) -- #x
//│           in x%4
//│ )
//│ Def(6, is_empty, [l%1], [{<EDestruct@is_empty:case l%1 of ...>,<EDirect@is_empty:case l%1 of ...>}],
//│ S: None,
//│ I: [[Some(IMix(ICtor(Cons),ICtor(Nil)))]],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ case l%1 of -- #x
//│   Cons => let x%13 = False() -- #x
//│     in x%13
//│   Nil => let x%11 = True() -- #x
//│     in x%11
//│ )
//│ Def(7, main, [], [],
//│ S: None,
//│ I: [],
//│ R: [Some(IMix(ICtor(False),ICtor(True)))],
//│ Rec: None,
//│ 1, 
//│ let* (x%17) = mk_list(10) -- #x
//│   in let* (x%18) = is_empty(x%17) -- #x
//│     in x%18
//│ )
//│ },
//│ let* (x%19) = main() -- #x
//│   in x%19)
//│ 
//│ 
//│ Interpreted ------------------------------
//│ False()
//│ 
//│ 
//│ Fuel used: 4

