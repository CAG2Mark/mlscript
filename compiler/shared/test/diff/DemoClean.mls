:NewParser
:ParseOnly

:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun list_of_n(n) =
  if n == 0 then Nil else Cons(0, list_of_n(n - 1))
fun last(l) =
  if l is
    Nil then None
    Cons(h, t) then
      if t is
        Nil then Some(h)
        Cons(h2, t2) then last(t)
fun main() =
  last(list_of_n(10))
main()

:GraphInterp
:GraphOptVerbose
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun list_of_n(n) =
  if n == 0 then Nil else Cons(0, list_of_n(n - 1))
fun last(l) =
  if l is
    Nil then None
    Cons(h, t) then
      if t is
        Nil then Some(h)
        Cons(h2, t2) then last(t)
fun main() =
  last(Cons(0, Cons(1, Cons(2, Nil))))
main()

:GraphInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun foo() = odd(S(S(S(O))))
foo()

:GraphInterp
:GraphOpt
class True
class False
class S(s)
class O
fun odd(x) =
  if x is
    O then False
    S(s) then even(s)
fun even(x) =
  if x is
    O then True
    S(s) then odd(s)
fun nat(n) = if n > 0 then S(nat(n - 1)) else O
fun foo() = odd(nat(10))
foo()

:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun list_of_n(n) =
  if n == 0 then Nil else Cons(0, list_of_n(n - 1))
fun head(l) =
  if l is
    Nil then None
    Cons(h, t) then Some(h)
fun is_none(o) =
  if o is
    None then True
    Some(x) then False
fun is_nil(l) =
  is_none(head(l))
fun main() =
  is_nil(Cons(0, Cons(1, Cons(2, Nil))))
main()

:GraphInterp
:GraphOpt
class True
class False
class Cons(h, t)
class Nil
class Some(x)
class None
fun list_of_n(n) =
  if n == 0 then Nil else Cons(0, list_of_n(n - 1))
fun head(l) =
  if l is
    Nil then None
    Cons(h, t) then Some(h)
fun is_none(o) =
  if o is
    None then True
    Some(x) then False
fun is_nil(l) =
  is_none(head(l))
fun main() =
  is_nil(list_of_n(10))
main()

